

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Jan 30 15:36:30 2024

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataBANK0
    42  006F47                     __pidataBANK0:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _Message1
    46  006F47  45                 	db	69
    47  006F48  6E                 	db	110
    48  006F49  74                 	db	116
    49  006F4A  65                 	db	101
    50  006F4B  72                 	db	114
    51  006F4C  20                 	db	32
    52  006F4D  50                 	db	80
    53  006F4E  49                 	db	73
    54  006F4F  4E                 	db	78
    55  006F50  20                 	db	32
    56  006F51  6E                 	db	110
    57  006F52  75                 	db	117
    58  006F53  6D                 	db	109
    59  006F54  62                 	db	98
    60  006F55  65                 	db	101
    61  006F56  72                 	db	114
    62  006F57  20                 	db	32
    63  006F58  3A                 	db	58
    64  006F59  20                 	db	32
    65  006F5A  20                 	db	32
    66  006F5B  00                 	db	0
    67                           
    68                           	psect	smallconst
    69  001004                     __psmallconst:
    70                           	opt stack 0
    71  001004  00                 	db	0
    72  001005                     getkey@F4444:
    73                           	opt stack 0
    74  001005  31                 	db	49
    75  001006  32                 	db	50
    76  001007  33                 	db	51
    77  001008  46                 	db	70
    78  001009  34                 	db	52
    79  00100A  35                 	db	53
    80  00100B  36                 	db	54
    81  00100C  45                 	db	69
    82  00100D  37                 	db	55
    83  00100E  38                 	db	56
    84  00100F  39                 	db	57
    85  001010  44                 	db	68
    86  001011  41                 	db	65
    87  001012  30                 	db	48
    88  001013  42                 	db	66
    89  001014  43                 	db	67
    90  001015  20                 	db	32
    91  001016  00                 	db	0
    92  001017                     __end_ofgetkey@F4444:
    93                           	opt stack 0
    94  0000                     _ADCON1	set	4033
    95  0000                     _CCP1CON	set	4029
    96  0000                     _CCPR1L	set	4030
    97  0000                     _OSCCON	set	4051
    98  0000                     _PORTAbits	set	3968
    99  0000                     _PORTB	set	3969
   100  0000                     _PORTBbits	set	3969
   101  0000                     _PORTCbits	set	3970
   102  0000                     _PORTD	set	3971
   103  0000                     _PORTDbits	set	3971
   104  0000                     _PR2	set	4043
   105  0000                     _T2CON	set	4042
   106  0000                     _T2CONbits	set	4042
   107  0000                     _TMR2	set	4044
   108  0000                     _TRISC	set	3988
   109  0000                     _TRISCbits	set	3988
   110  0000                     _TRISD	set	3989
   111  0000                     _TRISA0	set	31888
   112  001017  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           ; #config settings
   115                           
   116                           	psect	cinit
   117  00707A                     __pcinit:
   118                           	opt stack 0
   119  00707A                     start_initialization:
   120                           	opt stack 0
   121  00707A                     __initialization:
   122                           	opt stack 0
   123                           
   124                           ; Clear objects allocated to BANK0 (9 bytes)
   125  00707A  EE00  F098         	lfsr	0,__pbssBANK0
   126  00707E  0E09               	movlw	9
   127  007080                     clear_0:
   128  007080  6AEE               	clrf	postinc0,c
   129  007082  06E8               	decf	wreg,f,c
   130  007084  E1FD               	bnz	clear_0
   131                           
   132                           ; Initialize objects allocated to BANK0 (21 bytes)
   133                           ; load TBLPTR registers with __pidataBANK0
   134  007086  0E47               	movlw	low __pidataBANK0
   135  007088  6EF6               	movwf	tblptrl,c
   136  00708A  0E6F               	movlw	high __pidataBANK0
   137  00708C  6EF7               	movwf	tblptrh,c
   138  00708E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   139  007090  6EF8               	movwf	tblptru,c
   140  007092  EE00  F083         	lfsr	0,__pdataBANK0
   141  007096  EE10 F015          	lfsr	1,21
   142  00709A                     copy_data0:
   143  00709A  0009               	tblrd		*+
   144  00709C  CFF5 FFEE          	movff	tablat,postinc0
   145  0070A0  50E5               	movf	postdec1,w,c
   146  0070A2  50E1               	movf	fsr1l,w,c
   147  0070A4  E1FA               	bnz	copy_data0
   148  0070A6                     end_of_initialization:
   149                           	opt stack 0
   150  0070A6                     __end_of__initialization:
   151                           	opt stack 0
   152  0070A6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   153  0070A8  6EF8               	movwf	tblptru,c
   154  0070AA  0E10               	movlw	high __Lsmallconst
   155  0070AC  6EF7               	movwf	tblptrh,c
   156  0070AE  0100               	movlb	0
   157  0070B0  EF9F  F037         	goto	_main	;jump to C main() function
   158                           tblptru	equ	0xFF8
   159                           tblptrh	equ	0xFF7
   160                           tblptrl	equ	0xFF6
   161                           tablat	equ	0xFF5
   162                           postinc0	equ	0xFEE
   163                           wreg	equ	0xFE8
   164                           postdec1	equ	0xFE5
   165                           fsr1l	equ	0xFE1
   166                           
   167                           	psect	bssBANK0
   168  000098                     __pbssBANK0:
   169                           	opt stack 0
   170  000098                     _errno:
   171                           	opt stack 0
   172  000098                     	ds	2
   173  00009A                     _c:
   174                           	opt stack 0
   175  00009A                     	ds	1
   176  00009B                     _key:
   177                           	opt stack 0
   178  00009B                     	ds	1
   179  00009C                     _outchar:
   180                           	opt stack 0
   181  00009C                     	ds	1
   182  00009D                     _p1:
   183                           	opt stack 0
   184  00009D                     	ds	1
   185  00009E                     _p2:
   186                           	opt stack 0
   187  00009E                     	ds	1
   188  00009F                     _p3:
   189                           	opt stack 0
   190  00009F                     	ds	1
   191  0000A0                     _p4:
   192                           	opt stack 0
   193  0000A0                     	ds	1
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	dataBANK0
   204  000083                     __pdataBANK0:
   205                           	opt stack 0
   206  000083                     _Message1:
   207                           	opt stack 0
   208  000083                     	ds	21
   209                           tblptru	equ	0xFF8
   210                           tblptrh	equ	0xFF7
   211                           tblptrl	equ	0xFF6
   212                           tablat	equ	0xFF5
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           postdec1	equ	0xFE5
   216                           fsr1l	equ	0xFE1
   217                           
   218                           	psect	cstackBANK0
   219  000060                     __pcstackBANK0:
   220                           	opt stack 0
   221  000060                     ?_round:
   222                           	opt stack 0
   223  000060                     SetDutyCycleTo@Duty_cycle:
   224                           	opt stack 0
   225  000060                     round@x:
   226                           	opt stack 0
   227                           
   228                           ; 3 bytes @ 0x0
   229  000060                     	ds	3
   230  000063                     SetDutyCycleTo@Period:
   231                           	opt stack 0
   232  000063                     round@f:
   233                           	opt stack 0
   234                           
   235                           ; 3 bytes @ 0x3
   236  000063                     	ds	2
   237  000065                     ??_SetDutyCycleTo:
   238                           
   239                           ; 0 bytes @ 0x5
   240  000065                     	ds	1
   241  000066                     ?_setPeriodTo:
   242                           	opt stack 0
   243  000066                     setPeriodTo@FPWM:
   244                           	opt stack 0
   245                           
   246                           ; 4 bytes @ 0x6
   247  000066                     	ds	1
   248  000067                     _SetDutyCycleTo$1221:
   249                           	opt stack 0
   250                           
   251                           ; 3 bytes @ 0x7
   252  000067                     	ds	3
   253  00006A                     ??_setPeriodTo:
   254  00006A                     SetDutyCycleTo@PWM10BitValue:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0xA
   258  00006A                     	ds	1
   259  00006B                     _setPeriodTo$1220:
   260                           	opt stack 0
   261                           
   262                           ; 3 bytes @ 0xB
   263  00006B                     	ds	3
   264  00006E                     setPeriodTo@TimerPrescaleBits:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0xE
   268  00006E                     	ds	2
   269  000070                     setPeriodTo@TimerPrescaleValue:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x10
   273  000070                     	ds	2
   274  000072                     setPeriodTo@FOSC:
   275                           	opt stack 0
   276                           
   277                           ; 4 bytes @ 0x12
   278  000072                     	ds	4
   279  000076                     setPeriodTo@clockSelectBits:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x16
   283  000076                     	ds	2
   284  000078                     setPeriodTo@period:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x18
   288  000078                     	ds	3
   289  00007B                     setPeriodTo@_resolution:
   290                           	opt stack 0
   291                           
   292                           ; 4 bytes @ 0x1B
   293  00007B                     	ds	4
   294  00007F                     motorlock_right@Period:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x1F
   298  00007F                     	ds	2
   299  000081                     LockMotor@i:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x21
   303  000081                     	ds	2
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           postdec1	equ	0xFE5
   311                           fsr1l	equ	0xFE1
   312                           
   313                           	psect	cstackCOMRAM
   314  000001                     __pcstackCOMRAM:
   315                           	opt stack 0
   316  000001                     ??_lcd_strobe:
   317  000001                     ?___ftpack:
   318                           	opt stack 0
   319  000001                     delay_ms@i:
   320                           	opt stack 0
   321  000001                     delay@val:
   322                           	opt stack 0
   323  000001                     ___ftpack@arg:
   324                           	opt stack 0
   325  000001                     frexp@value:
   326                           	opt stack 0
   327  000001                     getkey@lookup:
   328                           	opt stack 0
   329                           
   330                           ; 18 bytes @ 0x0
   331  000001                     	ds	1
   332  000002                     ??_lcd_write_cmd:
   333  000002                     ??_lcd_write_data:
   334                           
   335                           ; 0 bytes @ 0x1
   336  000002                     	ds	1
   337  000003                     ??_delay_ms:
   338  000003                     lcd_write_cmd@cmd:
   339                           	opt stack 0
   340  000003                     lcd_write_data@data:
   341                           	opt stack 0
   342  000003                     delay@i:
   343                           	opt stack 0
   344                           
   345                           ; 2 bytes @ 0x2
   346  000003                     	ds	1
   347  000004                     lcd_write_cmd@temp2:
   348                           	opt stack 0
   349  000004                     lcd_write_data@temp1:
   350                           	opt stack 0
   351  000004                     ___ftpack@exp:
   352                           	opt stack 0
   353  000004                     delay_ms@j:
   354                           	opt stack 0
   355  000004                     frexp@eptr:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x3
   359  000004                     	ds	1
   360  000005                     ??_lcd_init:
   361  000005                     ___ftpack@sign:
   362                           	opt stack 0
   363  000005                     clearScreen@i:
   364                           	opt stack 0
   365  000005                     delay@j:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x4
   369  000005                     	ds	1
   370  000006                     ??___ftpack:
   371  000006                     ??_frexp:
   372  000006                     lcd_init@i:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x5
   376  000006                     	ds	3
   377  000009                     ?___awtoft:
   378                           	opt stack 0
   379  000009                     ?___lltoft:
   380                           	opt stack 0
   381  000009                     ___awtoft@c:
   382                           	opt stack 0
   383  000009                     ___lltoft@c:
   384                           	opt stack 0
   385                           
   386                           ; 4 bytes @ 0x8
   387  000009                     	ds	3
   388  00000C                     ___awtoft@sign:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0xB
   392  00000C                     	ds	1
   393  00000D                     ??___lltoft:
   394                           
   395                           ; 0 bytes @ 0xC
   396  00000D                     	ds	4
   397  000011                     ___lltoft@exp:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x10
   401  000011                     	ds	1
   402  000012                     ?___ftmul:
   403                           	opt stack 0
   404  000012                     ___ftmul@f1:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0x11
   408  000012                     	ds	1
   409  000013                     getkey@keycode:
   410                           	opt stack 0
   411                           
   412                           ; 1 bytes @ 0x12
   413  000013                     	ds	2
   414  000015                     ___ftmul@f2:
   415                           	opt stack 0
   416                           
   417                           ; 3 bytes @ 0x14
   418  000015                     	ds	3
   419  000018                     ??___ftmul:
   420                           
   421                           ; 0 bytes @ 0x17
   422  000018                     	ds	3
   423  00001B                     ___ftmul@exp:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x1A
   427  00001B                     	ds	1
   428  00001C                     ___ftmul@f3_as_product:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x1B
   432  00001C                     	ds	3
   433  00001F                     ___ftmul@cntr:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x1E
   437  00001F                     	ds	1
   438  000020                     ___ftmul@sign:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1F
   442  000020                     	ds	1
   443  000021                     ?___ftdiv:
   444                           	opt stack 0
   445  000021                     ___ftdiv@f1:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x20
   449  000021                     	ds	3
   450  000024                     ___ftdiv@f2:
   451                           	opt stack 0
   452                           
   453                           ; 3 bytes @ 0x23
   454  000024                     	ds	3
   455  000027                     ??___ftdiv:
   456                           
   457                           ; 0 bytes @ 0x26
   458  000027                     	ds	3
   459  00002A                     ___ftdiv@cntr:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x29
   463  00002A                     	ds	1
   464  00002B                     ___ftdiv@f3:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x2A
   468  00002B                     	ds	3
   469  00002E                     ___ftdiv@exp:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x2D
   473  00002E                     	ds	1
   474  00002F                     ___ftdiv@sign:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x2E
   478  00002F                     	ds	1
   479  000030                     ?___fttol:
   480                           	opt stack 0
   481  000030                     ___fttol@f1:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x2F
   485  000030                     	ds	4
   486  000034                     ??___fttol:
   487                           
   488                           ; 0 bytes @ 0x33
   489  000034                     	ds	5
   490  000039                     ___fttol@sign1:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x38
   494  000039                     	ds	1
   495  00003A                     ___fttol@lval:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x39
   499  00003A                     	ds	4
   500  00003E                     ___fttol@exp1:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x3D
   504  00003E                     	ds	1
   505  00003F                     ?___altoft:
   506                           	opt stack 0
   507  00003F                     ___altoft@c:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0x3E
   511  00003F                     	ds	4
   512  000043                     ??___altoft:
   513                           
   514                           ; 0 bytes @ 0x42
   515  000043                     	ds	4
   516  000047                     ___altoft@exp:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x46
   520  000047                     	ds	1
   521  000048                     ___altoft@sign:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x47
   525  000048                     	ds	1
   526  000049                     ?_trunc:
   527                           	opt stack 0
   528  000049                     trunc@x:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x48
   532  000049                     	ds	3
   533  00004C                     trunc@i:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x4B
   537  00004C                     	ds	3
   538  00004F                     trunc@expon:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x4E
   542  00004F                     	ds	2
   543  000051                     ?___ftneg:
   544                           	opt stack 0
   545  000051                     ___ftneg@f1:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x50
   549  000051                     	ds	3
   550  000054                     ?___ftadd:
   551                           	opt stack 0
   552  000054                     ___ftadd@f1:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x53
   556  000054                     	ds	3
   557  000057                     ___ftadd@f2:
   558                           	opt stack 0
   559                           
   560                           ; 3 bytes @ 0x56
   561  000057                     	ds	3
   562  00005A                     ??___ftadd:
   563                           
   564                           ; 0 bytes @ 0x59
   565  00005A                     	ds	3
   566  00005D                     ___ftadd@sign:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x5C
   570  00005D                     	ds	1
   571  00005E                     ___ftadd@exp2:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x5D
   575  00005E                     	ds	1
   576  00005F                     ___ftadd@exp1:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x5E
   580  00005F                     	ds	1
   581  000060                     tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           postdec1	equ	0xFE5
   588                           fsr1l	equ	0xFE1
   589                           
   590                           ; 0 bytes @ 0x5F
   591 ;;
   592 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   593 ;;
   594 ;; *************** function _main *****************
   595 ;; Defined at:
   596 ;;		line 4 in file "newmain.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;		None               void
   603 ;; Registers used:
   604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   610 ;;      Params:         0       0       0       0       0       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0       0       0       0       0
   612 ;;      Temps:          0       0       0       0       0       0       0       0       0
   613 ;;      Totals:         0       0       0       0       0       0       0       0       0
   614 ;;Total ram usage:        0 bytes
   615 ;; Hardware stack levels required when called:    7
   616 ;; This function calls:
   617 ;;		_LockMotor
   618 ;; This function is called by:
   619 ;;		Startup code after reset
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           	psect	text0
   624  006F3E                     __ptext0:
   625                           	opt stack 0
   626  006F3E                     _main:
   627                           	opt stack 24
   628                           
   629                           ;newmain.c: 5: LockMotor();
   630                           
   631                           ;incstack = 0
   632  006F3E  ECC5  F03C         	call	_LockMotor	;wreg free
   633  006F42  EF00  F008         	goto	start
   634  006F46                     __end_of_main:
   635                           	opt stack 0
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645 ;; *************** function _LockMotor *****************
   646 ;; Defined at:
   647 ;;		line 22 in file "LockMotor.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  i               2   33[BANK0 ] int 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  2    2[None  ] int 
   654 ;; Registers used:
   655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   661 ;;      Params:         0       0       0       0       0       0       0       0       0
   662 ;;      Locals:         0       2       0       0       0       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0       0       0       0       0
   664 ;;      Totals:         0       2       0       0       0       0       0       0       0
   665 ;;Total ram usage:        2 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; Hardware stack levels required when called:    6
   668 ;; This function calls:
   669 ;;		_clearScreen
   670 ;;		_delay_ms
   671 ;;		_getkey
   672 ;;		_lcd_init
   673 ;;		_lcd_write_cmd
   674 ;;		_lcd_write_data
   675 ;;		_motorlock_right
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text1
   682  00798A                     __ptext1:
   683                           	opt stack 0
   684  00798A                     _LockMotor:
   685                           	opt stack 24
   686                           
   687                           ;LockMotor.c: 23: int i;
   688                           ;LockMotor.c: 24: lcd_init();
   689                           
   690                           ;incstack = 0
   691  00798A  ECDE  F038         	call	_lcd_init	;wreg free
   692                           
   693                           ;LockMotor.c: 25: TRISCbits.TRISC2 = 0;
   694  00798E  9494               	bcf	3988,2,c	;volatile
   695                           
   696                           ;LockMotor.c: 26: TRISCbits.TRISC1 = 0;
   697  007990  9294               	bcf	3988,1,c	;volatile
   698                           
   699                           ;LockMotor.c: 29: lcd_write_cmd(0x80);
   700  007992  0E80               	movlw	128
   701  007994  ECA6  F038         	call	_lcd_write_cmd
   702                           
   703                           ;LockMotor.c: 30: for (i = 0; i < 20; i++) {
   704  007998  0E00               	movlw	0
   705  00799A  0100               	movlb	0	; () banked
   706  00799C  6F82               	movwf	(LockMotor@i+1)& (0+255),b
   707  00799E  0E00               	movlw	0
   708  0079A0  6F81               	movwf	LockMotor@i& (0+255),b
   709  0079A2                     l2148:
   710                           
   711                           ; BSR set to: 0
   712  0079A2  0100               	movlb	0	; () banked
   713  0079A4  BF82               	btfsc	(LockMotor@i+1)& (0+255),7,b
   714  0079A6  D008               	goto	l2152
   715  0079A8  0100               	movlb	0	; () banked
   716  0079AA  5182               	movf	(LockMotor@i+1)& (0+255),w,b
   717  0079AC  E118               	bnz	l2160
   718  0079AE  0E14               	movlw	20
   719  0079B0  0100               	movlb	0	; () banked
   720  0079B2  5D81               	subwf	LockMotor@i& (0+255),w,b
   721  0079B4  B0D8               	btfsc	status,0,c
   722  0079B6  D013               	goto	l2160
   723  0079B8                     l2152:
   724                           
   725                           ; BSR set to: 0
   726                           ;LockMotor.c: 31: outchar = Message1[i];
   727  0079B8  0E83               	movlw	low _Message1
   728  0079BA  0100               	movlb	0	; () banked
   729  0079BC  2581               	addwf	LockMotor@i& (0+255),w,b
   730  0079BE  6ED9               	movwf	fsr2l,c
   731  0079C0  0E00               	movlw	high _Message1
   732  0079C2  0100               	movlb	0	; () banked
   733  0079C4  2182               	addwfc	(LockMotor@i+1)& (0+255),w,b
   734  0079C6  6EDA               	movwf	fsr2h,c
   735  0079C8  50DF               	movf	indf2,w,c
   736  0079CA  0100               	movlb	0	; () banked
   737  0079CC  6F9C               	movwf	_outchar& (0+255),b
   738                           
   739                           ; BSR set to: 0
   740                           ;LockMotor.c: 32: lcd_write_data(outchar);
   741  0079CE  0100               	movlb	0	; () banked
   742  0079D0  519C               	movf	_outchar& (0+255),w,b
   743  0079D2  EC53  F03A         	call	_lcd_write_data
   744  0079D6  0100               	movlb	0	; () banked
   745  0079D8  4B81               	infsnz	LockMotor@i& (0+255),f,b
   746  0079DA  2B82               	incf	(LockMotor@i+1)& (0+255),f,b
   747  0079DC  D7E2               	goto	l2148
   748  0079DE                     l2160:
   749                           
   750                           ; BSR set to: 0
   751                           ;LockMotor.c: 33: }
   752                           ;LockMotor.c: 35: lcd_write_cmd(0xC0);
   753  0079DE  0EC0               	movlw	192
   754  0079E0  ECA6  F038         	call	_lcd_write_cmd
   755                           
   756                           ;LockMotor.c: 37: key = getkey();
   757  0079E4  ECEB  F037         	call	_getkey	;wreg free
   758  0079E8  0100               	movlb	0	; () banked
   759  0079EA  6F9B               	movwf	_key& (0+255),b
   760                           
   761                           ; BSR set to: 0
   762                           ;LockMotor.c: 38: p1 = key;
   763  0079EC  C09B  F09D         	movff	_key,_p1
   764                           
   765                           ; BSR set to: 0
   766                           ;LockMotor.c: 39: lcd_write_data('*');
   767  0079F0  0E2A               	movlw	42
   768  0079F2  EC53  F03A         	call	_lcd_write_data
   769                           
   770                           ;LockMotor.c: 41: key = getkey();
   771  0079F6  ECEB  F037         	call	_getkey	;wreg free
   772  0079FA  0100               	movlb	0	; () banked
   773  0079FC  6F9B               	movwf	_key& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           ;LockMotor.c: 42: p2 = key;
   777  0079FE  C09B  F09E         	movff	_key,_p2
   778                           
   779                           ; BSR set to: 0
   780                           ;LockMotor.c: 43: lcd_write_data('*');
   781  007A02  0E2A               	movlw	42
   782  007A04  EC53  F03A         	call	_lcd_write_data
   783                           
   784                           ;LockMotor.c: 45: key = getkey();
   785  007A08  ECEB  F037         	call	_getkey	;wreg free
   786  007A0C  0100               	movlb	0	; () banked
   787  007A0E  6F9B               	movwf	_key& (0+255),b
   788                           
   789                           ; BSR set to: 0
   790                           ;LockMotor.c: 46: p3 = key;
   791  007A10  C09B  F09F         	movff	_key,_p3
   792                           
   793                           ;LockMotor.c: 47: lcd_write_data('*');
   794  007A14  0E2A               	movlw	42
   795  007A16  EC53  F03A         	call	_lcd_write_data
   796                           
   797                           ;LockMotor.c: 49: key = getkey();
   798  007A1A  ECEB  F037         	call	_getkey	;wreg free
   799  007A1E  0100               	movlb	0	; () banked
   800  007A20  6F9B               	movwf	_key& (0+255),b
   801                           
   802                           ; BSR set to: 0
   803                           ;LockMotor.c: 50: p4 = key;
   804  007A22  C09B  F0A0         	movff	_key,_p4
   805                           
   806                           ; BSR set to: 0
   807                           ;LockMotor.c: 51: lcd_write_data('*');
   808  007A26  0E2A               	movlw	42
   809  007A28  EC53  F03A         	call	_lcd_write_data
   810                           
   811                           ;LockMotor.c: 53: clearScreen();
   812  007A2C  EC5A  F038         	call	_clearScreen	;wreg free
   813                           
   814                           ;LockMotor.c: 55: if (p1 == '4' && p2 == '5' && p3 == '5' && p4 == '0') {
   815  007A30  0E34               	movlw	52
   816  007A32  0100               	movlb	0	; () banked
   817  007A34  199D               	xorwf	_p1& (0+255),w,b
   818  007A36  A4D8               	btfss	status,2,c
   819  007A38  D032               	goto	l2200
   820                           
   821                           ; BSR set to: 0
   822  007A3A  0E35               	movlw	53
   823  007A3C  0100               	movlb	0	; () banked
   824  007A3E  199E               	xorwf	_p2& (0+255),w,b
   825  007A40  A4D8               	btfss	status,2,c
   826  007A42  D02D               	goto	l2200
   827                           
   828                           ; BSR set to: 0
   829  007A44  0E35               	movlw	53
   830  007A46  0100               	movlb	0	; () banked
   831  007A48  199F               	xorwf	_p3& (0+255),w,b
   832  007A4A  A4D8               	btfss	status,2,c
   833  007A4C  D028               	goto	l2200
   834                           
   835                           ; BSR set to: 0
   836  007A4E  0E30               	movlw	48
   837  007A50  0100               	movlb	0	; () banked
   838  007A52  19A0               	xorwf	_p4& (0+255),w,b
   839  007A54  A4D8               	btfss	status,2,c
   840  007A56  D023               	goto	l2200
   841                           
   842                           ; BSR set to: 0
   843                           ;LockMotor.c: 56: lcd_write_data(0x80);
   844  007A58  0E80               	movlw	128
   845  007A5A  EC53  F03A         	call	_lcd_write_data
   846                           
   847                           ;LockMotor.c: 57: lcd_write_data('O');
   848  007A5E  0E4F               	movlw	79
   849  007A60  EC53  F03A         	call	_lcd_write_data
   850                           
   851                           ;LockMotor.c: 58: lcd_write_data('P');
   852  007A64  0E50               	movlw	80
   853  007A66  EC53  F03A         	call	_lcd_write_data
   854                           
   855                           ;LockMotor.c: 59: lcd_write_data('E');
   856  007A6A  0E45               	movlw	69
   857  007A6C  EC53  F03A         	call	_lcd_write_data
   858                           
   859                           ;LockMotor.c: 60: lcd_write_data('N');
   860  007A70  0E4E               	movlw	78
   861  007A72  EC53  F03A         	call	_lcd_write_data
   862                           
   863                           ;LockMotor.c: 61: lcd_write_data(0x20);
   864  007A76  0E20               	movlw	32
   865  007A78  EC53  F03A         	call	_lcd_write_data
   866                           
   867                           ;LockMotor.c: 63: delay_ms(1000);
   868  007A7C  0E03               	movlw	3
   869  007A7E  6E02               	movwf	delay_ms@i+1,c
   870  007A80  0EE8               	movlw	232
   871  007A82  6E01               	movwf	delay_ms@i,c
   872  007A84  ECD1  F037         	call	_delay_ms	;wreg free
   873                           
   874                           ;LockMotor.c: 64: motorlock_right();
   875  007A88  EC8F  F039         	call	_motorlock_right	;wreg free
   876                           
   877                           ;LockMotor.c: 65: delay_ms(1000);
   878  007A8C  0E03               	movlw	3
   879  007A8E  6E02               	movwf	delay_ms@i+1,c
   880  007A90  0EE8               	movlw	232
   881  007A92  6E01               	movwf	delay_ms@i,c
   882  007A94  ECD1  F037         	call	_delay_ms	;wreg free
   883                           
   884                           ;LockMotor.c: 66: clearScreen();
   885  007A98  EC5A  F038         	call	_clearScreen	;wreg free
   886                           
   887                           ;LockMotor.c: 67: } else {
   888  007A9C  0012               	return	
   889  007A9E                     l2200:
   890                           
   891                           ;LockMotor.c: 68: lcd_write_data(0x80);
   892  007A9E  0E80               	movlw	128
   893  007AA0  EC53  F03A         	call	_lcd_write_data
   894                           
   895                           ;LockMotor.c: 69: lcd_write_data('W');
   896  007AA4  0E57               	movlw	87
   897  007AA6  EC53  F03A         	call	_lcd_write_data
   898                           
   899                           ;LockMotor.c: 70: lcd_write_data('R');
   900  007AAA  0E52               	movlw	82
   901  007AAC  EC53  F03A         	call	_lcd_write_data
   902                           
   903                           ;LockMotor.c: 71: lcd_write_data('O');
   904  007AB0  0E4F               	movlw	79
   905  007AB2  EC53  F03A         	call	_lcd_write_data
   906                           
   907                           ;LockMotor.c: 72: lcd_write_data('N');
   908  007AB6  0E4E               	movlw	78
   909  007AB8  EC53  F03A         	call	_lcd_write_data
   910                           
   911                           ;LockMotor.c: 73: lcd_write_data('G');
   912  007ABC  0E47               	movlw	71
   913  007ABE  EC53  F03A         	call	_lcd_write_data
   914                           
   915                           ;LockMotor.c: 75: delay_ms(2000);
   916  007AC2  0E07               	movlw	7
   917  007AC4  6E02               	movwf	delay_ms@i+1,c
   918  007AC6  0ED0               	movlw	208
   919  007AC8  6E01               	movwf	delay_ms@i,c
   920  007ACA  ECD1  F037         	call	_delay_ms	;wreg free
   921                           
   922                           ;LockMotor.c: 76: clearScreen();
   923  007ACE  EC5A  F038         	call	_clearScreen	;wreg free
   924  007AD2  0012               	return	
   925  007AD4                     __end_of_LockMotor:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           indf2	equ	0xFDF
   936                           fsr2h	equ	0xFDA
   937                           fsr2l	equ	0xFD9
   938                           status	equ	0xFD8
   939                           
   940 ;; *************** function _motorlock_right *****************
   941 ;; Defined at:
   942 ;;		line 80 in file "MotorFunction.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;		None
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  Period          2   31[BANK0 ] int 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2   21[None  ] int 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         0       0       0       0       0       0       0       0       0
   957 ;;      Locals:         0       2       0       0       0       0       0       0       0
   958 ;;      Temps:          0       0       0       0       0       0       0       0       0
   959 ;;      Totals:         0       2       0       0       0       0       0       0       0
   960 ;;Total ram usage:        2 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    5
   963 ;; This function calls:
   964 ;;		_PWM_Init
   965 ;;		_SetDutyCycleTo
   966 ;;		_delay
   967 ;;		_setPeriodTo
   968 ;; This function is called by:
   969 ;;		_LockMotor
   970 ;;		_PIR
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           	psect	text2
   975  00731E                     __ptext2:
   976                           	opt stack 0
   977  00731E                     _motorlock_right:
   978                           	opt stack 24
   979                           
   980                           ;MotorFunction.c: 81: int Period;
   981                           ;MotorFunction.c: 82: PWM_Init();
   982                           
   983                           ;incstack = 0
   984  00731E  EC9B  F037         	call	_PWM_Init	;wreg free
   985                           
   986                           ;MotorFunction.c: 83: Period = setPeriodTo(50);
   987  007322  0E32               	movlw	50
   988  007324  0100               	movlb	0	; () banked
   989  007326  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
   990  007328  0E00               	movlw	0
   991  00732A  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
   992  00732C  0E00               	movlw	0
   993  00732E  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
   994  007330  0E00               	movlw	0
   995  007332  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
   996  007334  EC40  F03E         	call	_setPeriodTo	;wreg free
   997  007338  C066  F07F         	movff	?_setPeriodTo,motorlock_right@Period
   998  00733C  C067  F080         	movff	?_setPeriodTo+1,motorlock_right@Period+1
   999                           
  1000                           ;MotorFunction.c: 84: SetDutyCycleTo(3.0, Period);
  1001  007340  0E00               	movlw	0
  1002  007342  0100               	movlb	0	; () banked
  1003  007344  6F60               	movwf	SetDutyCycleTo@Duty_cycle& (0+255),b
  1004  007346  0E40               	movlw	64
  1005  007348  0100               	movlb	0	; () banked
  1006  00734A  6F61               	movwf	(SetDutyCycleTo@Duty_cycle+1)& (0+255),b
  1007  00734C  0E40               	movlw	64
  1008  00734E  0100               	movlb	0	; () banked
  1009  007350  6F62               	movwf	(SetDutyCycleTo@Duty_cycle+2)& (0+255),b
  1010  007352  C07F  F063         	movff	motorlock_right@Period,SetDutyCycleTo@Period
  1011  007356  C080  F064         	movff	motorlock_right@Period+1,SetDutyCycleTo@Period+1
  1012  00735A  ECF4  F03A         	call	_SetDutyCycleTo	;wreg free
  1013                           
  1014                           ;MotorFunction.c: 85: delay(1000);
  1015  00735E  0E03               	movlw	3
  1016  007360  6E02               	movwf	delay@val+1,c
  1017  007362  0EE8               	movlw	232
  1018  007364  6E01               	movwf	delay@val,c
  1019  007366  EC06  F038         	call	_delay	;wreg free
  1020                           
  1021                           ;MotorFunction.c: 86: SetDutyCycleTo(7.0, Period);
  1022  00736A  0E00               	movlw	0
  1023  00736C  0100               	movlb	0	; () banked
  1024  00736E  6F60               	movwf	SetDutyCycleTo@Duty_cycle& (0+255),b
  1025  007370  0EE0               	movlw	224
  1026  007372  0100               	movlb	0	; () banked
  1027  007374  6F61               	movwf	(SetDutyCycleTo@Duty_cycle+1)& (0+255),b
  1028  007376  0E40               	movlw	64
  1029  007378  0100               	movlb	0	; () banked
  1030  00737A  6F62               	movwf	(SetDutyCycleTo@Duty_cycle+2)& (0+255),b
  1031  00737C  C07F  F063         	movff	motorlock_right@Period,SetDutyCycleTo@Period
  1032  007380  C080  F064         	movff	motorlock_right@Period+1,SetDutyCycleTo@Period+1
  1033  007384  ECF4  F03A         	call	_SetDutyCycleTo	;wreg free
  1034                           
  1035                           ;MotorFunction.c: 87: delay(1000);
  1036  007388  0E03               	movlw	3
  1037  00738A  6E02               	movwf	delay@val+1,c
  1038  00738C  0EE8               	movlw	232
  1039  00738E  6E01               	movwf	delay@val,c
  1040  007390  EC06  F038         	call	_delay	;wreg free
  1041  007394  0012               	return		;funcret
  1042  007396                     __end_of_motorlock_right:
  1043                           	opt stack 0
  1044                           tblptru	equ	0xFF8
  1045                           tblptrh	equ	0xFF7
  1046                           tblptrl	equ	0xFF6
  1047                           tablat	equ	0xFF5
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           postdec1	equ	0xFE5
  1051                           fsr1l	equ	0xFE1
  1052                           indf2	equ	0xFDF
  1053                           fsr2h	equ	0xFDA
  1054                           fsr2l	equ	0xFD9
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _setPeriodTo *****************
  1058 ;; Defined at:
  1059 ;;		line 27 in file "MotorFunction.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  FPWM            4    6[BANK0 ] unsigned long 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  _resolution     4   27[BANK0 ] unsigned long 
  1064 ;;  FOSC            4   18[BANK0 ] unsigned long 
  1065 ;;  period          3   24[BANK0 ] float 
  1066 ;;  clockSelectB    2   22[BANK0 ] int 
  1067 ;;  TimerPrescal    2   16[BANK0 ] int 
  1068 ;;  TimerPrescal    2   14[BANK0 ] int 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  2    6[BANK0 ] int 
  1071 ;; Registers used:
  1072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1078 ;;      Params:         0       4       0       0       0       0       0       0       0
  1079 ;;      Locals:         0      20       0       0       0       0       0       0       0
  1080 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1081 ;;      Totals:         0      25       0       0       0       0       0       0       0
  1082 ;;Total ram usage:       25 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    4
  1085 ;; This function calls:
  1086 ;;		___awtoft
  1087 ;;		___ftadd
  1088 ;;		___ftdiv
  1089 ;;		___ftmul
  1090 ;;		___fttol
  1091 ;;		___lltoft
  1092 ;;		_round
  1093 ;; This function is called by:
  1094 ;;		_motorlock_right
  1095 ;;		_motor_init
  1096 ;;		_motorlock_left
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text3
  1101  007C80                     __ptext3:
  1102                           	opt stack 0
  1103  007C80                     _setPeriodTo:
  1104                           	opt stack 24
  1105                           
  1106                           ;MotorFunction.c: 29: int clockSelectBits, TimerPrescaleBits;
  1107                           ;MotorFunction.c: 30: int TimerPrescaleValue;
  1108                           ;MotorFunction.c: 31: float period;
  1109                           ;MotorFunction.c: 32: unsigned long FOSC, _resolution = 488;
  1110                           
  1111                           ;incstack = 0
  1112  007C80  0EE8               	movlw	232
  1113  007C82  0100               	movlb	0	; () banked
  1114  007C84  6F7B               	movwf	setPeriodTo@_resolution& (0+255),b
  1115  007C86  0E01               	movlw	1
  1116  007C88  6F7C               	movwf	(setPeriodTo@_resolution+1)& (0+255),b
  1117  007C8A  0E00               	movlw	0
  1118  007C8C  6F7D               	movwf	(setPeriodTo@_resolution+2)& (0+255),b
  1119  007C8E  0E00               	movlw	0
  1120  007C90  6F7E               	movwf	(setPeriodTo@_resolution+3)& (0+255),b
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;MotorFunction.c: 34: if (FPWM < 8000) {TimerPrescaleBits = 2; TimerPrescaleValue = 16;}
  1124  007C92  0100               	movlb	0	; () banked
  1125  007C94  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1126  007C96  0100               	movlb	0	; () banked
  1127  007C98  1168               	iorwf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1128  007C9A  E112               	bnz	l2006
  1129  007C9C  0E40               	movlw	64
  1130  007C9E  0100               	movlb	0	; () banked
  1131  007CA0  5D66               	subwf	setPeriodTo@FPWM& (0+255),w,b
  1132  007CA2  0E1F               	movlw	31
  1133  007CA4  0100               	movlb	0	; () banked
  1134  007CA6  5967               	subwfb	(setPeriodTo@FPWM+1)& (0+255),w,b
  1135  007CA8  B0D8               	btfsc	status,0,c
  1136  007CAA  D00A               	goto	l2006
  1137                           
  1138                           ; BSR set to: 0
  1139  007CAC  0E00               	movlw	0
  1140  007CAE  0100               	movlb	0	; () banked
  1141  007CB0  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  1142  007CB2  0E02               	movlw	2
  1143  007CB4  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  1144  007CB6  0E00               	movlw	0
  1145  007CB8  0100               	movlb	0	; () banked
  1146  007CBA  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  1147  007CBC  0E10               	movlw	16
  1148  007CBE  D009               	goto	L1
  1149  007CC0                     l2006:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;MotorFunction.c: 35: else {TimerPrescaleBits = 0; TimerPrescaleValue = 1;}
  1153  007CC0  0E00               	movlw	0
  1154  007CC2  0100               	movlb	0	; () banked
  1155  007CC4  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  1156  007CC6  0E00               	movlw	0
  1157  007CC8  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  1158  007CCA  0E00               	movlw	0
  1159  007CCC  0100               	movlb	0	; () banked
  1160  007CCE  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  1161  007CD0  0E01               	movlw	1
  1162  007CD2                     L1:
  1163  007CD2  6F70               	movwf	setPeriodTo@TimerPrescaleValue& (0+255),b
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;MotorFunction.c: 37: if (FPWM > _resolution) {clockSelectBits = 7; FOSC = 8000000;}
  1167                           
  1168                           ; BSR set to: 0
  1169  007CD4  0100               	movlb	0	; () banked
  1170  007CD6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1171  007CD8  0100               	movlb	0	; () banked
  1172  007CDA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1173  007CDC  0100               	movlb	0	; () banked
  1174  007CDE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1175  007CE0  0100               	movlb	0	; () banked
  1176  007CE2  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1177  007CE4  0100               	movlb	0	; () banked
  1178  007CE6  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1179  007CE8  0100               	movlb	0	; () banked
  1180  007CEA  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1181  007CEC  0100               	movlb	0	; () banked
  1182  007CEE  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1183  007CF0  0100               	movlb	0	; () banked
  1184  007CF2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1185  007CF4  B0D8               	btfsc	status,0,c
  1186  007CF6  D00C               	goto	l2012
  1187                           
  1188                           ; BSR set to: 0
  1189  007CF8  0E00               	movlw	0
  1190  007CFA  0100               	movlb	0	; () banked
  1191  007CFC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1192  007CFE  0E07               	movlw	7
  1193  007D00  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1194  007D02  0E00               	movlw	0
  1195  007D04  0100               	movlb	0	; () banked
  1196  007D06  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1197  007D08  0E12               	movlw	18
  1198  007D0A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1199  007D0C  0E7A               	movlw	122
  1200  007D0E  D0E3               	goto	L8
  1201  007D10                     l2012:
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;MotorFunction.c: 38: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 6; FOSC = 
      +                          4000000;}
  1205  007D10  0100               	movlb	0	; () banked
  1206  007D12  90D8               	bcf	status,0,c
  1207  007D14  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1208  007D16  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1209  007D18  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1210  007D1A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1211  007D1C  0100               	movlb	0	; () banked
  1212  007D1E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1213  007D20  0100               	movlb	0	; () banked
  1214  007D22  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1215  007D24  0100               	movlb	0	; () banked
  1216  007D26  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1217  007D28  0100               	movlb	0	; () banked
  1218  007D2A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1219  007D2C  0100               	movlb	0	; () banked
  1220  007D2E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1221  007D30  0100               	movlb	0	; () banked
  1222  007D32  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1223  007D34  0100               	movlb	0	; () banked
  1224  007D36  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1225  007D38  0100               	movlb	0	; () banked
  1226  007D3A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1227  007D3C  B0D8               	btfsc	status,0,c
  1228  007D3E  D00C               	goto	l2016
  1229                           
  1230                           ; BSR set to: 0
  1231  007D40  0E00               	movlw	0
  1232  007D42  0100               	movlb	0	; () banked
  1233  007D44  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1234  007D46  0E06               	movlw	6
  1235  007D48  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1236  007D4A  0E00               	movlw	0
  1237  007D4C  0100               	movlb	0	; () banked
  1238  007D4E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1239  007D50  0E09               	movlw	9
  1240  007D52  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1241  007D54  0E3D               	movlw	61
  1242  007D56  D0BF               	goto	L8
  1243  007D58                     l2016:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;MotorFunction.c: 39: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 5; FOSC = 
      +                          2000000;}
  1247  007D58  0100               	movlb	0	; () banked
  1248  007D5A  90D8               	bcf	status,0,c
  1249  007D5C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1250  007D5E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1251  007D60  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1252  007D62  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1253  007D64  0100               	movlb	0	; () banked
  1254  007D66  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1255  007D68  0100               	movlb	0	; () banked
  1256  007D6A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1257  007D6C  0100               	movlb	0	; () banked
  1258  007D6E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1259  007D70  0100               	movlb	0	; () banked
  1260  007D72  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1261  007D74  0100               	movlb	0	; () banked
  1262  007D76  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1263  007D78  0100               	movlb	0	; () banked
  1264  007D7A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1265  007D7C  0100               	movlb	0	; () banked
  1266  007D7E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1267  007D80  0100               	movlb	0	; () banked
  1268  007D82  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1269  007D84  B0D8               	btfsc	status,0,c
  1270  007D86  D00C               	goto	l2020
  1271                           
  1272                           ; BSR set to: 0
  1273  007D88  0E00               	movlw	0
  1274  007D8A  0100               	movlb	0	; () banked
  1275  007D8C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1276  007D8E  0E05               	movlw	5
  1277  007D90  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1278  007D92  0E80               	movlw	128
  1279  007D94  0100               	movlb	0	; () banked
  1280  007D96  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1281  007D98  0E84               	movlw	132
  1282  007D9A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1283  007D9C  0E1E               	movlw	30
  1284  007D9E  D09B               	goto	L8
  1285  007DA0                     l2020:
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;MotorFunction.c: 40: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 4; FOSC = 
      +                          1000000;}
  1289  007DA0  0100               	movlb	0	; () banked
  1290  007DA2  90D8               	bcf	status,0,c
  1291  007DA4  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1292  007DA6  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1293  007DA8  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1294  007DAA  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1295  007DAC  0100               	movlb	0	; () banked
  1296  007DAE  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1297  007DB0  0100               	movlb	0	; () banked
  1298  007DB2  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1299  007DB4  0100               	movlb	0	; () banked
  1300  007DB6  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1301  007DB8  0100               	movlb	0	; () banked
  1302  007DBA  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1303  007DBC  0100               	movlb	0	; () banked
  1304  007DBE  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1305  007DC0  0100               	movlb	0	; () banked
  1306  007DC2  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1307  007DC4  0100               	movlb	0	; () banked
  1308  007DC6  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1309  007DC8  0100               	movlb	0	; () banked
  1310  007DCA  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1311  007DCC  B0D8               	btfsc	status,0,c
  1312  007DCE  D00C               	goto	l2024
  1313                           
  1314                           ; BSR set to: 0
  1315  007DD0  0E00               	movlw	0
  1316  007DD2  0100               	movlb	0	; () banked
  1317  007DD4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1318  007DD6  0E04               	movlw	4
  1319  007DD8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1320  007DDA  0E40               	movlw	64
  1321  007DDC  0100               	movlb	0	; () banked
  1322  007DDE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1323  007DE0  0E42               	movlw	66
  1324  007DE2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1325  007DE4  0E0F               	movlw	15
  1326  007DE6  D077               	goto	L8
  1327  007DE8                     l2024:
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;MotorFunction.c: 41: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 3; FOSC = 
      +                          500000;}
  1331  007DE8  0100               	movlb	0	; () banked
  1332  007DEA  90D8               	bcf	status,0,c
  1333  007DEC  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1334  007DEE  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1335  007DF0  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1336  007DF2  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1337  007DF4  0100               	movlb	0	; () banked
  1338  007DF6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1339  007DF8  0100               	movlb	0	; () banked
  1340  007DFA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1341  007DFC  0100               	movlb	0	; () banked
  1342  007DFE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1343  007E00  0100               	movlb	0	; () banked
  1344  007E02  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1345  007E04  0100               	movlb	0	; () banked
  1346  007E06  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1347  007E08  0100               	movlb	0	; () banked
  1348  007E0A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1349  007E0C  0100               	movlb	0	; () banked
  1350  007E0E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1351  007E10  0100               	movlb	0	; () banked
  1352  007E12  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1353  007E14  B0D8               	btfsc	status,0,c
  1354  007E16  D00C               	goto	l2028
  1355                           
  1356                           ; BSR set to: 0
  1357  007E18  0E00               	movlw	0
  1358  007E1A  0100               	movlb	0	; () banked
  1359  007E1C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1360  007E1E  0E03               	movlw	3
  1361  007E20  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1362  007E22  0E20               	movlw	32
  1363  007E24  0100               	movlb	0	; () banked
  1364  007E26  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1365  007E28  0EA1               	movlw	161
  1366  007E2A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1367  007E2C  0E07               	movlw	7
  1368  007E2E  D053               	goto	L8
  1369  007E30                     l2028:
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;MotorFunction.c: 42: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 2; FOSC = 
      +                          250000;}
  1373  007E30  0100               	movlb	0	; () banked
  1374  007E32  90D8               	bcf	status,0,c
  1375  007E34  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1376  007E36  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1377  007E38  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1378  007E3A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1379  007E3C  0100               	movlb	0	; () banked
  1380  007E3E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1381  007E40  0100               	movlb	0	; () banked
  1382  007E42  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1383  007E44  0100               	movlb	0	; () banked
  1384  007E46  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1385  007E48  0100               	movlb	0	; () banked
  1386  007E4A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1387  007E4C  0100               	movlb	0	; () banked
  1388  007E4E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1389  007E50  0100               	movlb	0	; () banked
  1390  007E52  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1391  007E54  0100               	movlb	0	; () banked
  1392  007E56  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1393  007E58  0100               	movlb	0	; () banked
  1394  007E5A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1395  007E5C  B0D8               	btfsc	status,0,c
  1396  007E5E  D00C               	goto	l2032
  1397                           
  1398                           ; BSR set to: 0
  1399  007E60  0E00               	movlw	0
  1400  007E62  0100               	movlb	0	; () banked
  1401  007E64  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1402  007E66  0E02               	movlw	2
  1403  007E68  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1404  007E6A  0E90               	movlw	144
  1405  007E6C  0100               	movlb	0	; () banked
  1406  007E6E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1407  007E70  0ED0               	movlw	208
  1408  007E72  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1409  007E74  0E03               	movlw	3
  1410  007E76  D02F               	goto	L8
  1411  007E78                     l2032:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;MotorFunction.c: 43: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 1; FOSC = 
      +                          125000;}
  1415  007E78  0100               	movlb	0	; () banked
  1416  007E7A  90D8               	bcf	status,0,c
  1417  007E7C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1418  007E7E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1419  007E80  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1420  007E82  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1421  007E84  0100               	movlb	0	; () banked
  1422  007E86  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1423  007E88  0100               	movlb	0	; () banked
  1424  007E8A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1425  007E8C  0100               	movlb	0	; () banked
  1426  007E8E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1427  007E90  0100               	movlb	0	; () banked
  1428  007E92  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1429  007E94  0100               	movlb	0	; () banked
  1430  007E96  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1431  007E98  0100               	movlb	0	; () banked
  1432  007E9A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1433  007E9C  0100               	movlb	0	; () banked
  1434  007E9E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1435  007EA0  0100               	movlb	0	; () banked
  1436  007EA2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1437  007EA4  B0D8               	btfsc	status,0,c
  1438  007EA6  D00C               	goto	l2036
  1439                           
  1440                           ; BSR set to: 0
  1441  007EA8  0E00               	movlw	0
  1442  007EAA  0100               	movlb	0	; () banked
  1443  007EAC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1444  007EAE  0E01               	movlw	1
  1445  007EB0  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1446  007EB2  0E48               	movlw	72
  1447  007EB4  0100               	movlb	0	; () banked
  1448  007EB6  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1449  007EB8  0EE8               	movlw	232
  1450  007EBA  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1451  007EBC  0E01               	movlw	1
  1452  007EBE  D00B               	goto	L8
  1453  007EC0                     l2036:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;MotorFunction.c: 44: else {clockSelectBits = 0; FOSC = 31000;}
  1457  007EC0  0E00               	movlw	0
  1458  007EC2  0100               	movlb	0	; () banked
  1459  007EC4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1460  007EC6  0E00               	movlw	0
  1461  007EC8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1462  007ECA  0E18               	movlw	24
  1463  007ECC  0100               	movlb	0	; () banked
  1464  007ECE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1465  007ED0  0E79               	movlw	121
  1466  007ED2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1467  007ED4  0E00               	movlw	0
  1468  007ED6                     L8:
  1469  007ED6  6F74               	movwf	(setPeriodTo@FOSC+2)& (0+255),b
  1470  007ED8  0E00               	movlw	0
  1471  007EDA  6F75               	movwf	(setPeriodTo@FOSC+3)& (0+255),b
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;MotorFunction.c: 46: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  1475                           
  1476                           ; BSR set to: 0
  1477                           
  1478                           ; BSR set to: 0
  1479                           
  1480                           ; BSR set to: 0
  1481                           
  1482                           ; BSR set to: 0
  1483                           
  1484                           ; BSR set to: 0
  1485                           
  1486                           ; BSR set to: 0
  1487                           
  1488                           ; BSR set to: 0
  1489  007EDC  C066  F009         	movff	setPeriodTo@FPWM,___lltoft@c
  1490  007EE0  C067  F00A         	movff	setPeriodTo@FPWM+1,___lltoft@c+1
  1491  007EE4  C068  F00B         	movff	setPeriodTo@FPWM+2,___lltoft@c+2
  1492  007EE8  C069  F00C         	movff	setPeriodTo@FPWM+3,___lltoft@c+3
  1493  007EEC  EC78  F038         	call	___lltoft	;wreg free
  1494  007EF0  C009  F015         	movff	?___lltoft,___ftmul@f2
  1495  007EF4  C00A  F016         	movff	?___lltoft+1,___ftmul@f2+1
  1496  007EF8  C00B  F017         	movff	?___lltoft+2,___ftmul@f2+2
  1497  007EFC  C070  F009         	movff	setPeriodTo@TimerPrescaleValue,___awtoft@c
  1498  007F00  C071  F00A         	movff	setPeriodTo@TimerPrescaleValue+1,___awtoft@c+1
  1499  007F04  EC21  F038         	call	___awtoft	;wreg free
  1500  007F08  C009  F012         	movff	?___awtoft,___ftmul@f1
  1501  007F0C  C00A  F013         	movff	?___awtoft+1,___ftmul@f1+1
  1502  007F10  C00B  F014         	movff	?___awtoft+2,___ftmul@f1+2
  1503  007F14  ECD1  F03B         	call	___ftmul	;wreg free
  1504  007F18  C012  F06B         	movff	?___ftmul,_setPeriodTo$1220
  1505  007F1C  C013  F06C         	movff	?___ftmul+1,_setPeriodTo$1220+1
  1506  007F20  C014  F06D         	movff	?___ftmul+2,_setPeriodTo$1220+2
  1507                           
  1508                           ;MotorFunction.c: 46: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  1509  007F24  0E00               	movlw	0
  1510  007F26  6E15               	movwf	___ftmul@f2,c
  1511  007F28  0E80               	movlw	128
  1512  007F2A  6E16               	movwf	___ftmul@f2+1,c
  1513  007F2C  0E40               	movlw	64
  1514  007F2E  6E17               	movwf	___ftmul@f2+2,c
  1515  007F30  C06B  F012         	movff	_setPeriodTo$1220,___ftmul@f1
  1516  007F34  C06C  F013         	movff	_setPeriodTo$1220+1,___ftmul@f1+1
  1517  007F38  C06D  F014         	movff	_setPeriodTo$1220+2,___ftmul@f1+2
  1518  007F3C  ECD1  F03B         	call	___ftmul	;wreg free
  1519  007F40  C012  F024         	movff	?___ftmul,___ftdiv@f2
  1520  007F44  C013  F025         	movff	?___ftmul+1,___ftdiv@f2+1
  1521  007F48  C014  F026         	movff	?___ftmul+2,___ftdiv@f2+2
  1522  007F4C  C072  F009         	movff	setPeriodTo@FOSC,___lltoft@c
  1523  007F50  C073  F00A         	movff	setPeriodTo@FOSC+1,___lltoft@c+1
  1524  007F54  C074  F00B         	movff	setPeriodTo@FOSC+2,___lltoft@c+2
  1525  007F58  C075  F00C         	movff	setPeriodTo@FOSC+3,___lltoft@c+3
  1526  007F5C  EC78  F038         	call	___lltoft	;wreg free
  1527  007F60  C009  F021         	movff	?___lltoft,___ftdiv@f1
  1528  007F64  C00A  F022         	movff	?___lltoft+1,___ftdiv@f1+1
  1529  007F68  C00B  F023         	movff	?___lltoft+2,___ftdiv@f1+2
  1530  007F6C  EC5E  F03B         	call	___ftdiv	;wreg free
  1531  007F70  C021  F054         	movff	?___ftdiv,___ftadd@f1
  1532  007F74  C022  F055         	movff	?___ftdiv+1,___ftadd@f1+1
  1533  007F78  C023  F056         	movff	?___ftdiv+2,___ftadd@f1+2
  1534  007F7C  0E00               	movlw	0
  1535  007F7E  6E57               	movwf	___ftadd@f2,c
  1536  007F80  0E80               	movlw	128
  1537  007F82  6E58               	movwf	___ftadd@f2+1,c
  1538  007F84  0EBF               	movlw	191
  1539  007F86  6E59               	movwf	___ftadd@f2+2,c
  1540  007F88  EC6A  F03D         	call	___ftadd	;wreg free
  1541  007F8C  C054  F078         	movff	?___ftadd,setPeriodTo@period
  1542  007F90  C055  F079         	movff	?___ftadd+1,setPeriodTo@period+1
  1543  007F94  C056  F07A         	movff	?___ftadd+2,setPeriodTo@period+2
  1544                           
  1545                           ;MotorFunction.c: 47: period = round(period);
  1546  007F98  C078  F060         	movff	setPeriodTo@period,round@x
  1547  007F9C  C079  F061         	movff	setPeriodTo@period+1,round@x+1
  1548  007FA0  C07A  F062         	movff	setPeriodTo@period+2,round@x+2
  1549  007FA4  EC0C  F03A         	call	_round	;wreg free
  1550  007FA8  C060  F078         	movff	?_round,setPeriodTo@period
  1551  007FAC  C061  F079         	movff	?_round+1,setPeriodTo@period+1
  1552  007FB0  C062  F07A         	movff	?_round+2,setPeriodTo@period+2
  1553                           
  1554                           ;MotorFunction.c: 49: OSCCON = ((clockSelectBits & 0x07) << 4) | 0x02;
  1555  007FB4  C076  F06A         	movff	setPeriodTo@clockSelectBits,??_setPeriodTo
  1556  007FB8  0E07               	movlw	7
  1557  007FBA  0100               	movlb	0	; () banked
  1558  007FBC  176A               	andwf	??_setPeriodTo& (0+255),f,b
  1559  007FBE  0100               	movlb	0	; () banked
  1560  007FC0  396A               	swapf	??_setPeriodTo& (0+255),w,b
  1561  007FC2  0BF0               	andlw	240
  1562  007FC4  0902               	iorlw	2
  1563  007FC6  6ED3               	movwf	4051,c	;volatile
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;MotorFunction.c: 50: PR2 = (int)period;
  1567  007FC8  C078  F030         	movff	setPeriodTo@period,___fttol@f1
  1568  007FCC  C079  F031         	movff	setPeriodTo@period+1,___fttol@f1+1
  1569  007FD0  C07A  F032         	movff	setPeriodTo@period+2,___fttol@f1+2
  1570  007FD4  EC4B  F03C         	call	___fttol	;wreg free
  1571  007FD8  5030               	movf	?___fttol,w,c
  1572  007FDA  6ECB               	movwf	4043,c	;volatile
  1573                           
  1574                           ;MotorFunction.c: 51: T2CON = TimerPrescaleBits;
  1575  007FDC  C06E  FFCA         	movff	setPeriodTo@TimerPrescaleBits,4042	;volatile
  1576                           
  1577                           ;MotorFunction.c: 52: TMR2 = 0;
  1578  007FE0  0E00               	movlw	0
  1579  007FE2  6ECC               	movwf	4044,c	;volatile
  1580                           
  1581                           ;MotorFunction.c: 53: T2CONbits.TMR2ON = 1;
  1582  007FE4  84CA               	bsf	4042,2,c	;volatile
  1583                           
  1584                           ;MotorFunction.c: 54: return (int)period;
  1585  007FE6  C078  F030         	movff	setPeriodTo@period,___fttol@f1
  1586  007FEA  C079  F031         	movff	setPeriodTo@period+1,___fttol@f1+1
  1587  007FEE  C07A  F032         	movff	setPeriodTo@period+2,___fttol@f1+2
  1588  007FF2  EC4B  F03C         	call	___fttol	;wreg free
  1589  007FF6  C030  F066         	movff	?___fttol,?_setPeriodTo
  1590  007FFA  C031  F067         	movff	?___fttol+1,?_setPeriodTo+1
  1591  007FFE  0012               	return	
  1592  008000                     __end_of_setPeriodTo:
  1593                           	opt stack 0
  1594                           tblptru	equ	0xFF8
  1595                           tblptrh	equ	0xFF7
  1596                           tblptrl	equ	0xFF6
  1597                           tablat	equ	0xFF5
  1598                           postinc0	equ	0xFEE
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1l	equ	0xFE1
  1602                           indf2	equ	0xFDF
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _round *****************
  1608 ;; Defined at:
  1609 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\round.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  x               3    0[BANK0 ] int 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  f               3    3[BANK0 ] int 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  3    0[BANK0 ] int 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1623 ;;      Params:         0       3       0       0       0       0       0       0       0
  1624 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1626 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1627 ;;Total ram usage:        6 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    3
  1630 ;; This function calls:
  1631 ;;		___ftadd
  1632 ;;		___ftneg
  1633 ;;		_trunc
  1634 ;; This function is called by:
  1635 ;;		_setPeriodTo
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640  007418                     __ptext4:
  1641                           	opt stack 0
  1642  007418                     _round:
  1643                           	opt stack 24
  1644                           
  1645                           ;incstack = 0
  1646  007418  C060  F049         	movff	round@x,trunc@x
  1647  00741C  C061  F04A         	movff	round@x+1,trunc@x+1
  1648  007420  C062  F04B         	movff	round@x+2,trunc@x+2
  1649  007424  ECCB  F039         	call	_trunc	;wreg free
  1650  007428  C049  F051         	movff	?_trunc,___ftneg@f1
  1651  00742C  C04A  F052         	movff	?_trunc+1,___ftneg@f1+1
  1652  007430  C04B  F053         	movff	?_trunc+2,___ftneg@f1+2
  1653  007434  ECBF  F037         	call	___ftneg	;wreg free
  1654  007438  C051  F054         	movff	?___ftneg,___ftadd@f1
  1655  00743C  C052  F055         	movff	?___ftneg+1,___ftadd@f1+1
  1656  007440  C053  F056         	movff	?___ftneg+2,___ftadd@f1+2
  1657  007444  C060  F057         	movff	round@x,___ftadd@f2
  1658  007448  C061  F058         	movff	round@x+1,___ftadd@f2+1
  1659  00744C  C062  F059         	movff	round@x+2,___ftadd@f2+2
  1660  007450  EC6A  F03D         	call	___ftadd	;wreg free
  1661  007454  C054  F063         	movff	?___ftadd,round@f
  1662  007458  C055  F064         	movff	?___ftadd+1,round@f+1
  1663  00745C  C056  F065         	movff	?___ftadd+2,round@f+2
  1664  007460  C060  F054         	movff	round@x,___ftadd@f1
  1665  007464  C061  F055         	movff	round@x+1,___ftadd@f1+1
  1666  007468  C062  F056         	movff	round@x+2,___ftadd@f1+2
  1667  00746C  C063  F057         	movff	round@f,___ftadd@f2
  1668  007470  C064  F058         	movff	round@f+1,___ftadd@f2+1
  1669  007474  C065  F059         	movff	round@f+2,___ftadd@f2+2
  1670  007478  EC6A  F03D         	call	___ftadd	;wreg free
  1671  00747C  C054  F060         	movff	?___ftadd,round@x
  1672  007480  C055  F061         	movff	?___ftadd+1,round@x+1
  1673  007484  C056  F062         	movff	?___ftadd+2,round@x+2
  1674  007488  C060  F049         	movff	round@x,trunc@x
  1675  00748C  C061  F04A         	movff	round@x+1,trunc@x+1
  1676  007490  C062  F04B         	movff	round@x+2,trunc@x+2
  1677  007494  ECCB  F039         	call	_trunc	;wreg free
  1678  007498  C049  F060         	movff	?_trunc,?_round
  1679  00749C  C04A  F061         	movff	?_trunc+1,?_round+1
  1680  0074A0  C04B  F062         	movff	?_trunc+2,?_round+2
  1681  0074A4  0012               	return	
  1682  0074A6                     __end_of_round:
  1683                           	opt stack 0
  1684                           tblptru	equ	0xFF8
  1685                           tblptrh	equ	0xFF7
  1686                           tblptrl	equ	0xFF6
  1687                           tablat	equ	0xFF5
  1688                           postinc0	equ	0xFEE
  1689                           wreg	equ	0xFE8
  1690                           postdec1	equ	0xFE5
  1691                           fsr1l	equ	0xFE1
  1692                           indf2	equ	0xFDF
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           status	equ	0xFD8
  1696                           
  1697 ;; *************** function _trunc *****************
  1698 ;; Defined at:
  1699 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\trunc.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;  x               3   72[COMRAM] int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  i               3   75[COMRAM] int 
  1704 ;;  expon           2   78[COMRAM] int 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  3   72[COMRAM] int 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1714 ;;      Params:         3       0       0       0       0       0       0       0       0
  1715 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1717 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1718 ;;Total ram usage:        8 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    2
  1721 ;; This function calls:
  1722 ;;		___altoft
  1723 ;;		___fttol
  1724 ;;		_frexp
  1725 ;; This function is called by:
  1726 ;;		_round
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text5
  1731  007396                     __ptext5:
  1732                           	opt stack 0
  1733  007396                     _trunc:
  1734                           	opt stack 24
  1735                           
  1736                           ;incstack = 0
  1737  007396  C049  F001         	movff	trunc@x,frexp@value
  1738  00739A  C04A  F002         	movff	trunc@x+1,frexp@value+1
  1739  00739E  C04B  F003         	movff	trunc@x+2,frexp@value+2
  1740  0073A2  0E4F               	movlw	low trunc@expon
  1741  0073A4  6E04               	movwf	frexp@eptr,c
  1742  0073A6  0E00               	movlw	high trunc@expon
  1743  0073A8  6E05               	movwf	frexp@eptr+1,c
  1744  0073AA  EC53  F039         	call	_frexp	;wreg free
  1745  0073AE  AE50               	btfss	trunc@expon+1,7,c
  1746  0073B0  D007               	goto	l1796
  1747  0073B2  0E00               	movlw	0
  1748  0073B4  6E49               	movwf	?_trunc,c
  1749  0073B6  0E00               	movlw	0
  1750  0073B8  6E4A               	movwf	?_trunc+1,c
  1751  0073BA  0E00               	movlw	0
  1752  0073BC  6E4B               	movwf	?_trunc+2,c
  1753  0073BE  0012               	return	
  1754  0073C0                     l1796:
  1755  0073C0  5050               	movf	trunc@expon+1,w,c
  1756  0073C2  E104               	bnz	u1370
  1757  0073C4  0E15               	movlw	21
  1758  0073C6  5C4F               	subwf	trunc@expon,w,c
  1759  0073C8  A0D8               	btfss	status,0,c
  1760  0073CA  D007               	goto	l1800
  1761  0073CC                     u1370:
  1762  0073CC  C049  F049         	movff	trunc@x,?_trunc
  1763  0073D0  C04A  F04A         	movff	trunc@x+1,?_trunc+1
  1764  0073D4  C04B  F04B         	movff	trunc@x+2,?_trunc+2
  1765  0073D8  0012               	return	
  1766  0073DA                     l1800:
  1767  0073DA  C049  F030         	movff	trunc@x,___fttol@f1
  1768  0073DE  C04A  F031         	movff	trunc@x+1,___fttol@f1+1
  1769  0073E2  C04B  F032         	movff	trunc@x+2,___fttol@f1+2
  1770  0073E6  EC4B  F03C         	call	___fttol	;wreg free
  1771  0073EA  C030  F03F         	movff	?___fttol,___altoft@c
  1772  0073EE  C031  F040         	movff	?___fttol+1,___altoft@c+1
  1773  0073F2  C032  F041         	movff	?___fttol+2,___altoft@c+2
  1774  0073F6  C033  F042         	movff	?___fttol+3,___altoft@c+3
  1775  0073FA  EC17  F039         	call	___altoft	;wreg free
  1776  0073FE  C03F  F04C         	movff	?___altoft,trunc@i
  1777  007402  C040  F04D         	movff	?___altoft+1,trunc@i+1
  1778  007406  C041  F04E         	movff	?___altoft+2,trunc@i+2
  1779  00740A  C04C  F049         	movff	trunc@i,?_trunc
  1780  00740E  C04D  F04A         	movff	trunc@i+1,?_trunc+1
  1781  007412  C04E  F04B         	movff	trunc@i+2,?_trunc+2
  1782  007416  0012               	return	
  1783  007418                     __end_of_trunc:
  1784                           	opt stack 0
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           indf2	equ	0xFDF
  1794                           fsr2h	equ	0xFDA
  1795                           fsr2l	equ	0xFD9
  1796                           status	equ	0xFD8
  1797                           
  1798 ;; *************** function _frexp *****************
  1799 ;; Defined at:
  1800 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  value           3    0[COMRAM] int 
  1803 ;;  eptr            2    3[COMRAM] PTR int 
  1804 ;;		 -> trunc@expon(2), 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  3    0[COMRAM] PTR int 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1816 ;;      Params:         5       0       0       0       0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1818 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1819 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1820 ;;Total ram usage:        7 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_trunc
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text6
  1830  0072A6                     __ptext6:
  1831                           	opt stack 0
  1832  0072A6                     _frexp:
  1833                           	opt stack 25
  1834                           
  1835                           ;incstack = 0
  1836  0072A6  5001               	movf	frexp@value,w,c
  1837  0072A8  1002               	iorwf	frexp@value+1,w,c
  1838  0072AA  1003               	iorwf	frexp@value+2,w,c
  1839  0072AC  A4D8               	btfss	status,2,c
  1840  0072AE  D009               	goto	l1704
  1841  0072B0  C004  FFD9         	movff	frexp@eptr,fsr2l
  1842  0072B4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1843  0072B8  0E00               	movlw	0
  1844  0072BA  6EDE               	movwf	postinc2,c
  1845  0072BC  0E00               	movlw	0
  1846  0072BE  6EDD               	movwf	postdec2,c
  1847                           
  1848                           ;	Return value of _frexp is never used
  1849  0072C0  0012               	return	
  1850  0072C2                     l1704:
  1851  0072C2  5003               	movf	frexp@value+2,w,c
  1852  0072C4  0B7F               	andlw	127
  1853  0072C6  6E06               	movwf	??_frexp& (0+255),c
  1854  0072C8  6A07               	clrf	(??_frexp+1)& (0+255),c
  1855  0072CA  90D8               	bcf	status,0,c
  1856  0072CC  3606               	rlcf	??_frexp,f,c
  1857  0072CE  3607               	rlcf	??_frexp+1,f,c
  1858  0072D0  C004  FFD9         	movff	frexp@eptr,fsr2l
  1859  0072D4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1860  0072D8  C006  FFDE         	movff	??_frexp,postinc2
  1861  0072DC  C007  FFDD         	movff	??_frexp+1,postdec2
  1862  0072E0  AE02               	btfss	frexp@value+1,7,c
  1863  0072E2  D003               	goto	u1130
  1864  0072E4  6A06               	clrf	??_frexp& (0+255),c
  1865  0072E6  2A06               	incf	??_frexp& (0+255),f,c
  1866  0072E8  D001               	goto	u1138
  1867  0072EA                     u1130:
  1868  0072EA  6A06               	clrf	??_frexp& (0+255),c
  1869  0072EC                     u1138:
  1870  0072EC  5006               	movf	??_frexp,w,c
  1871  0072EE  C004  FFD9         	movff	frexp@eptr,fsr2l
  1872  0072F2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1873  0072F6  12DE               	iorwf	postinc2,f,c
  1874  0072F8  0E00               	movlw	0
  1875  0072FA  12DD               	iorwf	postdec2,f,c
  1876  0072FC  C004  FFD9         	movff	frexp@eptr,fsr2l
  1877  007300  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1878  007304  0E82               	movlw	130
  1879  007306  26DE               	addwf	postinc2,f,c
  1880  007308  0EFF               	movlw	255
  1881  00730A  22DD               	addwfc	postdec2,f,c
  1882  00730C  8003               	bsf	frexp@value+2,0,c
  1883  00730E  8203               	bsf	frexp@value+2,1,c
  1884  007310  8403               	bsf	frexp@value+2,2,c
  1885  007312  8603               	bsf	frexp@value+2,3,c
  1886  007314  8803               	bsf	frexp@value+2,4,c
  1887  007316  8A03               	bsf	frexp@value+2,5,c
  1888  007318  9C03               	bcf	frexp@value+2,6,c
  1889  00731A  9E02               	bcf	frexp@value+1,7,c
  1890  00731C  0012               	return	
  1891  00731E                     __end_of_frexp:
  1892                           	opt stack 0
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1l	equ	0xFE1
  1901                           indf2	equ	0xFDF
  1902                           postinc2	equ	0xFDE
  1903                           postdec2	equ	0xFDD
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function ___altoft *****************
  1909 ;; Defined at:
  1910 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  c               4   62[COMRAM] long 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  sign            1   71[COMRAM] unsigned char 
  1915 ;;  exp             1   70[COMRAM] unsigned char 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  3   62[COMRAM] float 
  1918 ;; Registers used:
  1919 ;;		wreg, status,2, status,0, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1925 ;;      Params:         4       0       0       0       0       0       0       0       0
  1926 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1927 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1928 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1929 ;;Total ram usage:       10 bytes
  1930 ;; Hardware stack levels used:    1
  1931 ;; Hardware stack levels required when called:    1
  1932 ;; This function calls:
  1933 ;;		___ftpack
  1934 ;; This function is called by:
  1935 ;;		_trunc
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text7
  1940  00722E                     __ptext7:
  1941                           	opt stack 0
  1942  00722E                     ___altoft:
  1943                           	opt stack 24
  1944                           
  1945                           ;incstack = 0
  1946  00722E  0E00               	movlw	0
  1947  007230  6E48               	movwf	___altoft@sign,c
  1948  007232  0E8E               	movlw	142
  1949  007234  6E47               	movwf	___altoft@exp,c
  1950  007236  AE42               	btfss	___altoft@c+3,7,c
  1951  007238  D011               	goto	l1646
  1952  00723A  1E42               	comf	___altoft@c+3,f,c
  1953  00723C  1E41               	comf	___altoft@c+2,f,c
  1954  00723E  1E40               	comf	___altoft@c+1,f,c
  1955  007240  6C3F               	negf	___altoft@c,c
  1956  007242  0E00               	movlw	0
  1957  007244  2240               	addwfc	___altoft@c+1,f,c
  1958  007246  2241               	addwfc	___altoft@c+2,f,c
  1959  007248  2242               	addwfc	___altoft@c+3,f,c
  1960  00724A  0E01               	movlw	1
  1961  00724C  6E48               	movwf	___altoft@sign,c
  1962  00724E  D006               	goto	l1646
  1963  007250                     l1644:
  1964  007250  90D8               	bcf	status,0,c
  1965  007252  3242               	rrcf	___altoft@c+3,f,c
  1966  007254  3241               	rrcf	___altoft@c+2,f,c
  1967  007256  3240               	rrcf	___altoft@c+1,f,c
  1968  007258  323F               	rrcf	___altoft@c,f,c
  1969  00725A  2A47               	incf	___altoft@exp,f,c
  1970  00725C                     l1646:
  1971  00725C  0E00               	movlw	0
  1972  00725E  143F               	andwf	___altoft@c,w,c
  1973  007260  6E43               	movwf	??___altoft& (0+255),c
  1974  007262  0E00               	movlw	0
  1975  007264  1440               	andwf	___altoft@c+1,w,c
  1976  007266  6E44               	movwf	(??___altoft+1)& (0+255),c
  1977  007268  0E00               	movlw	0
  1978  00726A  1441               	andwf	___altoft@c+2,w,c
  1979  00726C  6E45               	movwf	(??___altoft+2)& (0+255),c
  1980  00726E  0EFF               	movlw	255
  1981  007270  1442               	andwf	___altoft@c+3,w,c
  1982  007272  6E46               	movwf	(??___altoft+3)& (0+255),c
  1983  007274  5043               	movf	??___altoft,w,c
  1984  007276  1044               	iorwf	??___altoft+1,w,c
  1985  007278  1045               	iorwf	??___altoft+2,w,c
  1986  00727A  1046               	iorwf	??___altoft+3,w,c
  1987  00727C  A4D8               	btfss	status,2,c
  1988  00727E  D7E8               	goto	l1644
  1989  007280  C03F  F001         	movff	___altoft@c,___ftpack@arg
  1990  007284  C040  F002         	movff	___altoft@c+1,___ftpack@arg+1
  1991  007288  C041  F003         	movff	___altoft@c+2,___ftpack@arg+2
  1992  00728C  C047  F004         	movff	___altoft@exp,___ftpack@exp
  1993  007290  C048  F005         	movff	___altoft@sign,___ftpack@sign
  1994  007294  EC9D  F03A         	call	___ftpack	;wreg free
  1995  007298  C001  F03F         	movff	?___ftpack,?___altoft
  1996  00729C  C002  F040         	movff	?___ftpack+1,?___altoft+1
  1997  0072A0  C003  F041         	movff	?___ftpack+2,?___altoft+2
  1998  0072A4  0012               	return	
  1999  0072A6                     __end_of___altoft:
  2000                           	opt stack 0
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           postdec2	equ	0xFDD
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function ___ftneg *****************
  2017 ;; Defined at:
  2018 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  f1              3   80[COMRAM] float 
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  3   80[COMRAM] float 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2032 ;;      Params:         3       0       0       0       0       0       0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2035 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2036 ;;Total ram usage:        3 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_round
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text8
  2046  006F7E                     __ptext8:
  2047                           	opt stack 0
  2048  006F7E                     ___ftneg:
  2049                           	opt stack 26
  2050                           
  2051                           ;incstack = 0
  2052  006F7E  5051               	movf	___ftneg@f1,w,c
  2053  006F80  1052               	iorwf	___ftneg@f1+1,w,c
  2054  006F82  1053               	iorwf	___ftneg@f1+2,w,c
  2055  006F84  B4D8               	btfsc	status,2,c
  2056  006F86  D006               	goto	l547
  2057  006F88  0E00               	movlw	0
  2058  006F8A  1A51               	xorwf	___ftneg@f1,f,c
  2059  006F8C  0E00               	movlw	0
  2060  006F8E  1A52               	xorwf	___ftneg@f1+1,f,c
  2061  006F90  0E80               	movlw	128
  2062  006F92  1A53               	xorwf	___ftneg@f1+2,f,c
  2063  006F94                     l547:
  2064  006F94  C051  F051         	movff	___ftneg@f1,?___ftneg
  2065  006F98  C052  F052         	movff	___ftneg@f1+1,?___ftneg+1
  2066  006F9C  C053  F053         	movff	___ftneg@f1+2,?___ftneg+2
  2067  006FA0  0012               	return		;funcret
  2068  006FA2                     __end_of___ftneg:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           postinc0	equ	0xFEE
  2075                           wreg	equ	0xFE8
  2076                           postdec1	equ	0xFE5
  2077                           fsr1l	equ	0xFE1
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function ___lltoft *****************
  2086 ;; Defined at:
  2087 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  c               4    8[COMRAM] unsigned long 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;  exp             1   16[COMRAM] unsigned char 
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  3    8[COMRAM] float 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0, cstack
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2101 ;;      Params:         4       0       0       0       0       0       0       0       0
  2102 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2103 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2104 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2105 ;;Total ram usage:        9 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    1
  2108 ;; This function calls:
  2109 ;;		___ftpack
  2110 ;; This function is called by:
  2111 ;;		_setPeriodTo
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text9
  2116  0070F0                     __ptext9:
  2117                           	opt stack 0
  2118  0070F0                     ___lltoft:
  2119                           	opt stack 26
  2120                           
  2121                           ;incstack = 0
  2122  0070F0  0E8E               	movlw	142
  2123  0070F2  6E11               	movwf	___lltoft@exp,c
  2124  0070F4  D006               	goto	l1930
  2125  0070F6                     l1928:
  2126  0070F6  90D8               	bcf	status,0,c
  2127  0070F8  320C               	rrcf	___lltoft@c+3,f,c
  2128  0070FA  320B               	rrcf	___lltoft@c+2,f,c
  2129  0070FC  320A               	rrcf	___lltoft@c+1,f,c
  2130  0070FE  3209               	rrcf	___lltoft@c,f,c
  2131  007100  2A11               	incf	___lltoft@exp,f,c
  2132  007102                     l1930:
  2133  007102  0E00               	movlw	0
  2134  007104  1409               	andwf	___lltoft@c,w,c
  2135  007106  6E0D               	movwf	??___lltoft& (0+255),c
  2136  007108  0E00               	movlw	0
  2137  00710A  140A               	andwf	___lltoft@c+1,w,c
  2138  00710C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  2139  00710E  0E00               	movlw	0
  2140  007110  140B               	andwf	___lltoft@c+2,w,c
  2141  007112  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  2142  007114  0EFF               	movlw	255
  2143  007116  140C               	andwf	___lltoft@c+3,w,c
  2144  007118  6E10               	movwf	(??___lltoft+3)& (0+255),c
  2145  00711A  500D               	movf	??___lltoft,w,c
  2146  00711C  100E               	iorwf	??___lltoft+1,w,c
  2147  00711E  100F               	iorwf	??___lltoft+2,w,c
  2148  007120  1010               	iorwf	??___lltoft+3,w,c
  2149  007122  A4D8               	btfss	status,2,c
  2150  007124  D7E8               	goto	l1928
  2151  007126  C009  F001         	movff	___lltoft@c,___ftpack@arg
  2152  00712A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  2153  00712E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  2154  007132  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  2155  007136  0E00               	movlw	0
  2156  007138  6E05               	movwf	___ftpack@sign,c
  2157  00713A  EC9D  F03A         	call	___ftpack	;wreg free
  2158  00713E  C001  F009         	movff	?___ftpack,?___lltoft
  2159  007142  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  2160  007146  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  2161  00714A  0012               	return	
  2162  00714C                     __end_of___lltoft:
  2163                           	opt stack 0
  2164                           tblptru	equ	0xFF8
  2165                           tblptrh	equ	0xFF7
  2166                           tblptrl	equ	0xFF6
  2167                           tablat	equ	0xFF5
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           postdec1	equ	0xFE5
  2171                           fsr1l	equ	0xFE1
  2172                           indf2	equ	0xFDF
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _delay *****************
  2180 ;; Defined at:
  2181 ;;		line 67 in file "MotorFunction.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  val             2    0[COMRAM] unsigned int 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  j               2    4[COMRAM] unsigned int 
  2186 ;;  i               2    2[COMRAM] unsigned int 
  2187 ;; Return value:  Size  Location     Type
  2188 ;;		None               void
  2189 ;; Registers used:
  2190 ;;		wreg, status,2, status,0
  2191 ;; Tracked objects:
  2192 ;;		On entry : 0/0
  2193 ;;		On exit  : 0/0
  2194 ;;		Unchanged: 0/0
  2195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2196 ;;      Params:         2       0       0       0       0       0       0       0       0
  2197 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2199 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2200 ;;Total ram usage:        6 bytes
  2201 ;; Hardware stack levels used:    1
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_motorlock_right
  2206 ;;		_motorlock_left
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text10
  2211  00700C                     __ptext10:
  2212                           	opt stack 0
  2213  00700C                     _delay:
  2214                           	opt stack 28
  2215                           
  2216                           ;MotorFunction.c: 69: unsigned int i,j;
  2217                           ;MotorFunction.c: 70: for(i=0;i<val;i++)
  2218                           
  2219                           ;incstack = 0
  2220  00700C  0E00               	movlw	0
  2221  00700E  6E04               	movwf	delay@i+1,c
  2222  007010  0E00               	movlw	0
  2223  007012  6E03               	movwf	delay@i,c
  2224  007014  D00F               	goto	l2078
  2225  007016                     l2066:
  2226                           
  2227                           ;MotorFunction.c: 71: for(j=0;j<10;j++);
  2228  007016  0E00               	movlw	0
  2229  007018  6E06               	movwf	delay@j+1,c
  2230  00701A  0E00               	movlw	0
  2231  00701C  6E05               	movwf	delay@j,c
  2232  00701E                     l2068:
  2233  00701E  5006               	movf	delay@j+1,w,c
  2234  007020  E107               	bnz	l2076
  2235  007022  0E0A               	movlw	10
  2236  007024  5C05               	subwf	delay@j,w,c
  2237  007026  B0D8               	btfsc	status,0,c
  2238  007028  D003               	goto	l2076
  2239  00702A  4A05               	infsnz	delay@j,f,c
  2240  00702C  2A06               	incf	delay@j+1,f,c
  2241  00702E  D7F7               	goto	l2068
  2242  007030                     l2076:
  2243  007030  4A03               	infsnz	delay@i,f,c
  2244  007032  2A04               	incf	delay@i+1,f,c
  2245  007034                     l2078:
  2246  007034  5001               	movf	delay@val,w,c
  2247  007036  5C03               	subwf	delay@i,w,c
  2248  007038  5002               	movf	delay@val+1,w,c
  2249  00703A  5804               	subwfb	delay@i+1,w,c
  2250  00703C  B0D8               	btfsc	status,0,c
  2251  00703E  0012               	return	
  2252  007040  D7EA               	goto	l2066
  2253  007042                     __end_of_delay:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           postdec1	equ	0xFE5
  2262                           fsr1l	equ	0xFE1
  2263                           indf2	equ	0xFDF
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           fsr2h	equ	0xFDA
  2267                           fsr2l	equ	0xFD9
  2268                           status	equ	0xFD8
  2269                           
  2270 ;; *************** function _SetDutyCycleTo *****************
  2271 ;; Defined at:
  2272 ;;		line 57 in file "MotorFunction.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  Duty_cycle      3    0[BANK0 ] float 
  2275 ;;  Period          2    3[BANK0 ] int 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;  PWM10BitValu    2   10[BANK0 ] int 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;		None               void
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2287 ;;      Params:         0       5       0       0       0       0       0       0       0
  2288 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2289 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2290 ;;      Totals:         0      12       0       0       0       0       0       0       0
  2291 ;;Total ram usage:       12 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    2
  2294 ;; This function calls:
  2295 ;;		___awtoft
  2296 ;;		___ftadd
  2297 ;;		___ftdiv
  2298 ;;		___ftmul
  2299 ;;		___fttol
  2300 ;; This function is called by:
  2301 ;;		_motorlock_right
  2302 ;;		_motorlock_left
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text11
  2307  0075E8                     __ptext11:
  2308                           	opt stack 0
  2309  0075E8                     _SetDutyCycleTo:
  2310                           	opt stack 26
  2311                           
  2312                           ;MotorFunction.c: 59: int PWM10BitValue;
  2313                           ;MotorFunction.c: 61: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2314                           
  2315                           ;incstack = 0
  2316  0075E8  0E00               	movlw	0
  2317  0075EA  6E24               	movwf	___ftdiv@f2,c
  2318  0075EC  0EC8               	movlw	200
  2319  0075EE  6E25               	movwf	___ftdiv@f2+1,c
  2320  0075F0  0E42               	movlw	66
  2321  0075F2  6E26               	movwf	___ftdiv@f2+2,c
  2322  0075F4  C060  F021         	movff	SetDutyCycleTo@Duty_cycle,___ftdiv@f1
  2323  0075F8  C061  F022         	movff	SetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  2324  0075FC  C062  F023         	movff	SetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  2325  007600  EC5E  F03B         	call	___ftdiv	;wreg free
  2326  007604  C021  F015         	movff	?___ftdiv,___ftmul@f2
  2327  007608  C022  F016         	movff	?___ftdiv+1,___ftmul@f2+1
  2328  00760C  C023  F017         	movff	?___ftdiv+2,___ftmul@f2+2
  2329  007610  0E00               	movlw	0
  2330  007612  6E57               	movwf	___ftadd@f2,c
  2331  007614  0E80               	movlw	128
  2332  007616  6E58               	movwf	___ftadd@f2+1,c
  2333  007618  0E3F               	movlw	63
  2334  00761A  6E59               	movwf	___ftadd@f2+2,c
  2335  00761C  C063  F009         	movff	SetDutyCycleTo@Period,___awtoft@c
  2336  007620  C064  F00A         	movff	SetDutyCycleTo@Period+1,___awtoft@c+1
  2337  007624  EC21  F038         	call	___awtoft	;wreg free
  2338  007628  C009  F054         	movff	?___awtoft,___ftadd@f1
  2339  00762C  C00A  F055         	movff	?___awtoft+1,___ftadd@f1+1
  2340  007630  C00B  F056         	movff	?___awtoft+2,___ftadd@f1+2
  2341  007634  EC6A  F03D         	call	___ftadd	;wreg free
  2342  007638  C054  F012         	movff	?___ftadd,___ftmul@f1
  2343  00763C  C055  F013         	movff	?___ftadd+1,___ftmul@f1+1
  2344  007640  C056  F014         	movff	?___ftadd+2,___ftmul@f1+2
  2345  007644  ECD1  F03B         	call	___ftmul	;wreg free
  2346  007648  C012  F067         	movff	?___ftmul,_SetDutyCycleTo$1221
  2347  00764C  C013  F068         	movff	?___ftmul+1,_SetDutyCycleTo$1221+1
  2348  007650  C014  F069         	movff	?___ftmul+2,_SetDutyCycleTo$1221+2
  2349                           
  2350                           ;MotorFunction.c: 59: int PWM10BitValue;
  2351                           ;MotorFunction.c: 61: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2352  007654  0E00               	movlw	0
  2353  007656  6E15               	movwf	___ftmul@f2,c
  2354  007658  0E80               	movlw	128
  2355  00765A  6E16               	movwf	___ftmul@f2+1,c
  2356  00765C  0E40               	movlw	64
  2357  00765E  6E17               	movwf	___ftmul@f2+2,c
  2358  007660  C067  F012         	movff	_SetDutyCycleTo$1221,___ftmul@f1
  2359  007664  C068  F013         	movff	_SetDutyCycleTo$1221+1,___ftmul@f1+1
  2360  007668  C069  F014         	movff	_SetDutyCycleTo$1221+2,___ftmul@f1+2
  2361  00766C  ECD1  F03B         	call	___ftmul	;wreg free
  2362  007670  C012  F030         	movff	?___ftmul,___fttol@f1
  2363  007674  C013  F031         	movff	?___ftmul+1,___fttol@f1+1
  2364  007678  C014  F032         	movff	?___ftmul+2,___fttol@f1+2
  2365  00767C  EC4B  F03C         	call	___fttol	;wreg free
  2366  007680  C030  F06A         	movff	?___fttol,SetDutyCycleTo@PWM10BitValue
  2367  007684  C031  F06B         	movff	?___fttol+1,SetDutyCycleTo@PWM10BitValue+1
  2368                           
  2369                           ;MotorFunction.c: 62: CCPR1L = (PWM10BitValue >> 2);
  2370  007688  C06A  F065         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2371  00768C  C06B  F066         	movff	SetDutyCycleTo@PWM10BitValue+1,??_SetDutyCycleTo+1
  2372  007690  0100               	movlb	0	; () banked
  2373  007692  3566               	rlcf	(??_SetDutyCycleTo+1)& (0+255),w,b
  2374  007694  3366               	rrcf	(??_SetDutyCycleTo+1)& (0+255),f,b
  2375  007696  3365               	rrcf	??_SetDutyCycleTo& (0+255),f,b
  2376  007698  0100               	movlb	0	; () banked
  2377  00769A  3566               	rlcf	(??_SetDutyCycleTo+1)& (0+255),w,b
  2378  00769C  3366               	rrcf	(??_SetDutyCycleTo+1)& (0+255),f,b
  2379  00769E  3365               	rrcf	??_SetDutyCycleTo& (0+255),f,b
  2380  0076A0  0100               	movlb	0	; () banked
  2381  0076A2  5165               	movf	??_SetDutyCycleTo& (0+255),w,b
  2382  0076A4  6EBE               	movwf	4030,c	;volatile
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;MotorFunction.c: 63: CCP1CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  2386  0076A6  C06A  F065         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2387  0076AA  0E03               	movlw	3
  2388  0076AC  0100               	movlb	0	; () banked
  2389  0076AE  1765               	andwf	??_SetDutyCycleTo& (0+255),f,b
  2390  0076B0  0100               	movlb	0	; () banked
  2391  0076B2  3965               	swapf	??_SetDutyCycleTo& (0+255),w,b
  2392  0076B4  0BF0               	andlw	240
  2393  0076B6  090C               	iorlw	12
  2394  0076B8  6EBD               	movwf	4029,c	;volatile
  2395                           
  2396                           ; BSR set to: 0
  2397  0076BA  0012               	return		;funcret
  2398  0076BC                     __end_of_SetDutyCycleTo:
  2399                           	opt stack 0
  2400                           tblptru	equ	0xFF8
  2401                           tblptrh	equ	0xFF7
  2402                           tblptrl	equ	0xFF6
  2403                           tablat	equ	0xFF5
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           fsr1l	equ	0xFE1
  2408                           indf2	equ	0xFDF
  2409                           postinc2	equ	0xFDE
  2410                           postdec2	equ	0xFDD
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function ___fttol *****************
  2416 ;; Defined at:
  2417 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  f1              3   47[COMRAM] float 
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  lval            4   57[COMRAM] unsigned long 
  2422 ;;  exp1            1   61[COMRAM] unsigned char 
  2423 ;;  sign1           1   56[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  4   47[COMRAM] long 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2433 ;;      Params:         4       0       0       0       0       0       0       0       0
  2434 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2435 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2436 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2437 ;;Total ram usage:       15 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_setPeriodTo
  2443 ;;		_SetDutyCycleTo
  2444 ;;		_trunc
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text12
  2449  007896                     __ptext12:
  2450                           	opt stack 0
  2451  007896                     ___fttol:
  2452                           	opt stack 25
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;incstack = 0
  2456  007896  C032  F034         	movff	___fttol@f1+2,??___fttol
  2457  00789A  6A35               	clrf	(??___fttol+1)& (0+255),c
  2458  00789C  6A36               	clrf	(??___fttol+2)& (0+255),c
  2459  00789E  3431               	rlcf	___fttol@f1+1,w,c
  2460  0078A0  3634               	rlcf	??___fttol& (0+255),f,c
  2461  0078A2  E301               	bnc	u1041
  2462  0078A4  8035               	bsf	(??___fttol+1)& (0+255),0,c
  2463  0078A6                     u1041:
  2464  0078A6  5034               	movf	??___fttol,w,c
  2465  0078A8  6E3E               	movwf	___fttol@exp1,c
  2466  0078AA  503E               	movf	___fttol@exp1,w,c
  2467  0078AC  A4D8               	btfss	status,2,c
  2468  0078AE  D009               	goto	l1658
  2469  0078B0  0E00               	movlw	0
  2470  0078B2  6E30               	movwf	?___fttol,c
  2471  0078B4  0E00               	movlw	0
  2472  0078B6  6E31               	movwf	?___fttol+1,c
  2473  0078B8  0E00               	movlw	0
  2474  0078BA  6E32               	movwf	?___fttol+2,c
  2475  0078BC  0E00               	movlw	0
  2476  0078BE  6E33               	movwf	?___fttol+3,c
  2477  0078C0  0012               	return	
  2478  0078C2                     l1658:
  2479  0078C2  0E17               	movlw	23
  2480  0078C4  6E34               	movwf	??___fttol& (0+255),c
  2481  0078C6  C030  F035         	movff	___fttol@f1,??___fttol+1
  2482  0078CA  C031  F036         	movff	___fttol@f1+1,??___fttol+2
  2483  0078CE  C032  F037         	movff	___fttol@f1+2,??___fttol+3
  2484  0078D2  2834               	incf	??___fttol,w,c
  2485  0078D4  6E38               	movwf	(??___fttol+4)& (0+255),c
  2486  0078D6  D004               	goto	u1060
  2487  0078D8                     u1065:
  2488  0078D8  90D8               	bcf	status,0,c
  2489  0078DA  3237               	rrcf	??___fttol+3,f,c
  2490  0078DC  3236               	rrcf	??___fttol+2,f,c
  2491  0078DE  3235               	rrcf	??___fttol+1,f,c
  2492  0078E0                     u1060:
  2493  0078E0  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
  2494  0078E2  D7FA               	goto	u1065
  2495  0078E4  5035               	movf	??___fttol+1,w,c
  2496  0078E6  6E39               	movwf	___fttol@sign1,c
  2497  0078E8  8E31               	bsf	___fttol@f1+1,7,c
  2498  0078EA  0EFF               	movlw	255
  2499  0078EC  1630               	andwf	___fttol@f1,f,c
  2500  0078EE  0EFF               	movlw	255
  2501  0078F0  1631               	andwf	___fttol@f1+1,f,c
  2502  0078F2  0E00               	movlw	0
  2503  0078F4  1632               	andwf	___fttol@f1+2,f,c
  2504  0078F6  5030               	movf	___fttol@f1,w,c
  2505  0078F8  6E3A               	movwf	___fttol@lval,c
  2506  0078FA  5031               	movf	___fttol@f1+1,w,c
  2507  0078FC  6E3B               	movwf	___fttol@lval+1,c
  2508  0078FE  5032               	movf	___fttol@f1+2,w,c
  2509  007900  6E3C               	movwf	___fttol@lval+2,c
  2510  007902  6A3D               	clrf	___fttol@lval+3,c
  2511  007904  0E8E               	movlw	142
  2512  007906  5E3E               	subwf	___fttol@exp1,f,c
  2513  007908  AE3E               	btfss	___fttol@exp1,7,c
  2514  00790A  D016               	goto	l1680
  2515  00790C  503E               	movf	___fttol@exp1,w,c
  2516  00790E  0A80               	xorlw	128
  2517  007910  0F8F               	addlw	143
  2518  007912  B0D8               	btfsc	status,0,c
  2519  007914  D009               	goto	l1676
  2520  007916  0E00               	movlw	0
  2521  007918  6E30               	movwf	?___fttol,c
  2522  00791A  0E00               	movlw	0
  2523  00791C  6E31               	movwf	?___fttol+1,c
  2524  00791E  0E00               	movlw	0
  2525  007920  6E32               	movwf	?___fttol+2,c
  2526  007922  0E00               	movlw	0
  2527  007924  6E33               	movwf	?___fttol+3,c
  2528  007926  0012               	return	
  2529  007928                     l1676:
  2530  007928  90D8               	bcf	status,0,c
  2531  00792A  323D               	rrcf	___fttol@lval+3,f,c
  2532  00792C  323C               	rrcf	___fttol@lval+2,f,c
  2533  00792E  323B               	rrcf	___fttol@lval+1,f,c
  2534  007930  323A               	rrcf	___fttol@lval,f,c
  2535  007932  3E3E               	incfsz	___fttol@exp1,f,c
  2536  007934  D7F9               	goto	l1676
  2537  007936  D015               	goto	l1690
  2538  007938                     l1680:
  2539  007938  0E17               	movlw	23
  2540  00793A  643E               	cpfsgt	___fttol@exp1,c
  2541  00793C  D00F               	goto	l1688
  2542  00793E  0E00               	movlw	0
  2543  007940  6E30               	movwf	?___fttol,c
  2544  007942  0E00               	movlw	0
  2545  007944  6E31               	movwf	?___fttol+1,c
  2546  007946  0E00               	movlw	0
  2547  007948  6E32               	movwf	?___fttol+2,c
  2548  00794A  0E00               	movlw	0
  2549  00794C  6E33               	movwf	?___fttol+3,c
  2550  00794E  0012               	return	
  2551  007950                     l1686:
  2552  007950  90D8               	bcf	status,0,c
  2553  007952  363A               	rlcf	___fttol@lval,f,c
  2554  007954  363B               	rlcf	___fttol@lval+1,f,c
  2555  007956  363C               	rlcf	___fttol@lval+2,f,c
  2556  007958  363D               	rlcf	___fttol@lval+3,f,c
  2557  00795A  063E               	decf	___fttol@exp1,f,c
  2558  00795C                     l1688:
  2559  00795C  503E               	movf	___fttol@exp1,w,c
  2560  00795E  A4D8               	btfss	status,2,c
  2561  007960  D7F7               	goto	l1686
  2562  007962                     l1690:
  2563  007962  5039               	movf	___fttol@sign1,w,c
  2564  007964  B4D8               	btfsc	status,2,c
  2565  007966  D008               	goto	l1694
  2566  007968  1E3D               	comf	___fttol@lval+3,f,c
  2567  00796A  1E3C               	comf	___fttol@lval+2,f,c
  2568  00796C  1E3B               	comf	___fttol@lval+1,f,c
  2569  00796E  6C3A               	negf	___fttol@lval,c
  2570  007970  0E00               	movlw	0
  2571  007972  223B               	addwfc	___fttol@lval+1,f,c
  2572  007974  223C               	addwfc	___fttol@lval+2,f,c
  2573  007976  223D               	addwfc	___fttol@lval+3,f,c
  2574  007978                     l1694:
  2575  007978  C03A  F030         	movff	___fttol@lval,?___fttol
  2576  00797C  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
  2577  007980  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
  2578  007984  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
  2579  007988  0012               	return	
  2580  00798A                     __end_of___fttol:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           fsr1l	equ	0xFE1
  2590                           indf2	equ	0xFDF
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function ___ftmul *****************
  2598 ;; Defined at:
  2599 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  f1              3   17[COMRAM] float 
  2602 ;;  f2              3   20[COMRAM] float 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  f3_as_produc    3   27[COMRAM] unsigned um
  2605 ;;  sign            1   31[COMRAM] unsigned char 
  2606 ;;  cntr            1   30[COMRAM] unsigned char 
  2607 ;;  exp             1   26[COMRAM] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  3   17[COMRAM] float 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0, cstack
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2617 ;;      Params:         6       0       0       0       0       0       0       0       0
  2618 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2619 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2620 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2621 ;;Total ram usage:       15 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    1
  2624 ;; This function calls:
  2625 ;;		___ftpack
  2626 ;; This function is called by:
  2627 ;;		_setPeriodTo
  2628 ;;		_SetDutyCycleTo
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text13
  2633  0077A2                     __ptext13:
  2634                           	opt stack 0
  2635  0077A2                     ___ftmul:
  2636                           	opt stack 26
  2637                           
  2638                           ;incstack = 0
  2639  0077A2  C014  F018         	movff	___ftmul@f1+2,??___ftmul
  2640  0077A6  6A19               	clrf	(??___ftmul+1)& (0+255),c
  2641  0077A8  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  2642  0077AA  3413               	rlcf	___ftmul@f1+1,w,c
  2643  0077AC  3618               	rlcf	??___ftmul& (0+255),f,c
  2644  0077AE  E301               	bnc	u1431
  2645  0077B0  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  2646  0077B2                     u1431:
  2647  0077B2  5018               	movf	??___ftmul,w,c
  2648  0077B4  6E1B               	movwf	___ftmul@exp,c
  2649  0077B6  501B               	movf	___ftmul@exp,w,c
  2650  0077B8  A4D8               	btfss	status,2,c
  2651  0077BA  D007               	goto	l1872
  2652  0077BC  0E00               	movlw	0
  2653  0077BE  6E12               	movwf	?___ftmul,c
  2654  0077C0  0E00               	movlw	0
  2655  0077C2  6E13               	movwf	?___ftmul+1,c
  2656  0077C4  0E00               	movlw	0
  2657  0077C6  6E14               	movwf	?___ftmul+2,c
  2658  0077C8  0012               	return	
  2659  0077CA                     l1872:
  2660  0077CA  C017  F018         	movff	___ftmul@f2+2,??___ftmul
  2661  0077CE  6A19               	clrf	(??___ftmul+1)& (0+255),c
  2662  0077D0  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  2663  0077D2  3416               	rlcf	___ftmul@f2+1,w,c
  2664  0077D4  3618               	rlcf	??___ftmul& (0+255),f,c
  2665  0077D6  E301               	bnc	u1451
  2666  0077D8  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  2667  0077DA                     u1451:
  2668  0077DA  5018               	movf	??___ftmul,w,c
  2669  0077DC  6E20               	movwf	___ftmul@sign,c
  2670  0077DE  5020               	movf	___ftmul@sign,w,c
  2671  0077E0  A4D8               	btfss	status,2,c
  2672  0077E2  D007               	goto	l1878
  2673  0077E4  0E00               	movlw	0
  2674  0077E6  6E12               	movwf	?___ftmul,c
  2675  0077E8  0E00               	movlw	0
  2676  0077EA  6E13               	movwf	?___ftmul+1,c
  2677  0077EC  0E00               	movlw	0
  2678  0077EE  6E14               	movwf	?___ftmul+2,c
  2679  0077F0  0012               	return	
  2680  0077F2                     l1878:
  2681  0077F2  5020               	movf	___ftmul@sign,w,c
  2682  0077F4  0F7B               	addlw	123
  2683  0077F6  261B               	addwf	___ftmul@exp,f,c
  2684  0077F8  C014  F020         	movff	___ftmul@f1+2,___ftmul@sign
  2685  0077FC  5017               	movf	___ftmul@f2+2,w,c
  2686  0077FE  1A20               	xorwf	___ftmul@sign,f,c
  2687  007800  0E80               	movlw	128
  2688  007802  1620               	andwf	___ftmul@sign,f,c
  2689  007804  8E13               	bsf	___ftmul@f1+1,7,c
  2690  007806  8E16               	bsf	___ftmul@f2+1,7,c
  2691  007808  0EFF               	movlw	255
  2692  00780A  1615               	andwf	___ftmul@f2,f,c
  2693  00780C  0EFF               	movlw	255
  2694  00780E  1616               	andwf	___ftmul@f2+1,f,c
  2695  007810  0E00               	movlw	0
  2696  007812  1617               	andwf	___ftmul@f2+2,f,c
  2697  007814  0E00               	movlw	0
  2698  007816  6E1C               	movwf	___ftmul@f3_as_product,c
  2699  007818  0E00               	movlw	0
  2700  00781A  6E1D               	movwf	___ftmul@f3_as_product+1,c
  2701  00781C  0E00               	movlw	0
  2702  00781E  6E1E               	movwf	___ftmul@f3_as_product+2,c
  2703  007820  0E07               	movlw	7
  2704  007822  6E1F               	movwf	___ftmul@cntr,c
  2705  007824                     l1892:
  2706  007824  A012               	btfss	___ftmul@f1,0,c
  2707  007826  D006               	goto	l1896
  2708  007828  5015               	movf	___ftmul@f2,w,c
  2709  00782A  261C               	addwf	___ftmul@f3_as_product,f,c
  2710  00782C  5016               	movf	___ftmul@f2+1,w,c
  2711  00782E  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  2712  007830  5017               	movf	___ftmul@f2+2,w,c
  2713  007832  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  2714  007834                     l1896:
  2715  007834  90D8               	bcf	status,0,c
  2716  007836  3214               	rrcf	___ftmul@f1+2,f,c
  2717  007838  3213               	rrcf	___ftmul@f1+1,f,c
  2718  00783A  3212               	rrcf	___ftmul@f1,f,c
  2719  00783C  90D8               	bcf	status,0,c
  2720  00783E  3615               	rlcf	___ftmul@f2,f,c
  2721  007840  3616               	rlcf	___ftmul@f2+1,f,c
  2722  007842  3617               	rlcf	___ftmul@f2+2,f,c
  2723  007844  2E1F               	decfsz	___ftmul@cntr,f,c
  2724  007846  D7EE               	goto	l1892
  2725  007848  0E09               	movlw	9
  2726  00784A  6E1F               	movwf	___ftmul@cntr,c
  2727  00784C                     l1902:
  2728  00784C  A012               	btfss	___ftmul@f1,0,c
  2729  00784E  D006               	goto	l1906
  2730  007850  5015               	movf	___ftmul@f2,w,c
  2731  007852  261C               	addwf	___ftmul@f3_as_product,f,c
  2732  007854  5016               	movf	___ftmul@f2+1,w,c
  2733  007856  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  2734  007858  5017               	movf	___ftmul@f2+2,w,c
  2735  00785A  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  2736  00785C                     l1906:
  2737  00785C  90D8               	bcf	status,0,c
  2738  00785E  3214               	rrcf	___ftmul@f1+2,f,c
  2739  007860  3213               	rrcf	___ftmul@f1+1,f,c
  2740  007862  3212               	rrcf	___ftmul@f1,f,c
  2741  007864  90D8               	bcf	status,0,c
  2742  007866  321E               	rrcf	___ftmul@f3_as_product+2,f,c
  2743  007868  321D               	rrcf	___ftmul@f3_as_product+1,f,c
  2744  00786A  321C               	rrcf	___ftmul@f3_as_product,f,c
  2745  00786C  2E1F               	decfsz	___ftmul@cntr,f,c
  2746  00786E  D7EE               	goto	l1902
  2747  007870  C01C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2748  007874  C01D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2749  007878  C01E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2750  00787C  C01B  F004         	movff	___ftmul@exp,___ftpack@exp
  2751  007880  C020  F005         	movff	___ftmul@sign,___ftpack@sign
  2752  007884  EC9D  F03A         	call	___ftpack	;wreg free
  2753  007888  C001  F012         	movff	?___ftpack,?___ftmul
  2754  00788C  C002  F013         	movff	?___ftpack+1,?___ftmul+1
  2755  007890  C003  F014         	movff	?___ftpack+2,?___ftmul+2
  2756  007894  0012               	return	
  2757  007896                     __end_of___ftmul:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           fsr1l	equ	0xFE1
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function ___ftdiv *****************
  2775 ;; Defined at:
  2776 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  f1              3   32[COMRAM] float 
  2779 ;;  f2              3   35[COMRAM] float 
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  f3              3   42[COMRAM] float 
  2782 ;;  sign            1   46[COMRAM] unsigned char 
  2783 ;;  exp             1   45[COMRAM] unsigned char 
  2784 ;;  cntr            1   41[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  3   32[COMRAM] float 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         6       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2797 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:       15 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    1
  2801 ;; This function calls:
  2802 ;;		___ftpack
  2803 ;; This function is called by:
  2804 ;;		_setPeriodTo
  2805 ;;		_SetDutyCycleTo
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text14
  2810  0076BC                     __ptext14:
  2811                           	opt stack 0
  2812  0076BC                     ___ftdiv:
  2813                           	opt stack 26
  2814                           
  2815                           ;incstack = 0
  2816  0076BC  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  2817  0076C0  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2818  0076C2  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2819  0076C4  3422               	rlcf	___ftdiv@f1+1,w,c
  2820  0076C6  3627               	rlcf	??___ftdiv& (0+255),f,c
  2821  0076C8  E301               	bnc	u1381
  2822  0076CA  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2823  0076CC                     u1381:
  2824  0076CC  5027               	movf	??___ftdiv,w,c
  2825  0076CE  6E2E               	movwf	___ftdiv@exp,c
  2826  0076D0  502E               	movf	___ftdiv@exp,w,c
  2827  0076D2  A4D8               	btfss	status,2,c
  2828  0076D4  D007               	goto	l1826
  2829  0076D6  0E00               	movlw	0
  2830  0076D8  6E21               	movwf	?___ftdiv,c
  2831  0076DA  0E00               	movlw	0
  2832  0076DC  6E22               	movwf	?___ftdiv+1,c
  2833  0076DE  0E00               	movlw	0
  2834  0076E0  6E23               	movwf	?___ftdiv+2,c
  2835  0076E2  0012               	return	
  2836  0076E4                     l1826:
  2837  0076E4  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  2838  0076E8  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2839  0076EA  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2840  0076EC  3425               	rlcf	___ftdiv@f2+1,w,c
  2841  0076EE  3627               	rlcf	??___ftdiv& (0+255),f,c
  2842  0076F0  E301               	bnc	u1401
  2843  0076F2  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2844  0076F4                     u1401:
  2845  0076F4  5027               	movf	??___ftdiv,w,c
  2846  0076F6  6E2F               	movwf	___ftdiv@sign,c
  2847  0076F8  502F               	movf	___ftdiv@sign,w,c
  2848  0076FA  A4D8               	btfss	status,2,c
  2849  0076FC  D007               	goto	l1832
  2850  0076FE  0E00               	movlw	0
  2851  007700  6E21               	movwf	?___ftdiv,c
  2852  007702  0E00               	movlw	0
  2853  007704  6E22               	movwf	?___ftdiv+1,c
  2854  007706  0E00               	movlw	0
  2855  007708  6E23               	movwf	?___ftdiv+2,c
  2856  00770A  0012               	return	
  2857  00770C                     l1832:
  2858  00770C  0E00               	movlw	0
  2859  00770E  6E2B               	movwf	___ftdiv@f3,c
  2860  007710  0E00               	movlw	0
  2861  007712  6E2C               	movwf	___ftdiv@f3+1,c
  2862  007714  0E00               	movlw	0
  2863  007716  6E2D               	movwf	___ftdiv@f3+2,c
  2864  007718  502F               	movf	___ftdiv@sign,w,c
  2865  00771A  0F89               	addlw	137
  2866  00771C  5E2E               	subwf	___ftdiv@exp,f,c
  2867  00771E  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  2868  007722  5026               	movf	___ftdiv@f2+2,w,c
  2869  007724  1A2F               	xorwf	___ftdiv@sign,f,c
  2870  007726  0E80               	movlw	128
  2871  007728  162F               	andwf	___ftdiv@sign,f,c
  2872  00772A  8E22               	bsf	___ftdiv@f1+1,7,c
  2873  00772C  0EFF               	movlw	255
  2874  00772E  1621               	andwf	___ftdiv@f1,f,c
  2875  007730  0EFF               	movlw	255
  2876  007732  1622               	andwf	___ftdiv@f1+1,f,c
  2877  007734  0E00               	movlw	0
  2878  007736  1623               	andwf	___ftdiv@f1+2,f,c
  2879  007738  8E25               	bsf	___ftdiv@f2+1,7,c
  2880  00773A  0EFF               	movlw	255
  2881  00773C  1624               	andwf	___ftdiv@f2,f,c
  2882  00773E  0EFF               	movlw	255
  2883  007740  1625               	andwf	___ftdiv@f2+1,f,c
  2884  007742  0E00               	movlw	0
  2885  007744  1626               	andwf	___ftdiv@f2+2,f,c
  2886  007746  0E18               	movlw	24
  2887  007748  6E2A               	movwf	___ftdiv@cntr,c
  2888  00774A                     l1852:
  2889  00774A  90D8               	bcf	status,0,c
  2890  00774C  362B               	rlcf	___ftdiv@f3,f,c
  2891  00774E  362C               	rlcf	___ftdiv@f3+1,f,c
  2892  007750  362D               	rlcf	___ftdiv@f3+2,f,c
  2893  007752  5024               	movf	___ftdiv@f2,w,c
  2894  007754  5C21               	subwf	___ftdiv@f1,w,c
  2895  007756  5025               	movf	___ftdiv@f2+1,w,c
  2896  007758  5822               	subwfb	___ftdiv@f1+1,w,c
  2897  00775A  5026               	movf	___ftdiv@f2+2,w,c
  2898  00775C  5823               	subwfb	___ftdiv@f1+2,w,c
  2899  00775E  A0D8               	btfss	status,0,c
  2900  007760  D007               	goto	l525
  2901  007762  5024               	movf	___ftdiv@f2,w,c
  2902  007764  5E21               	subwf	___ftdiv@f1,f,c
  2903  007766  5025               	movf	___ftdiv@f2+1,w,c
  2904  007768  5A22               	subwfb	___ftdiv@f1+1,f,c
  2905  00776A  5026               	movf	___ftdiv@f2+2,w,c
  2906  00776C  5A23               	subwfb	___ftdiv@f1+2,f,c
  2907  00776E  802B               	bsf	___ftdiv@f3,0,c
  2908  007770                     l525:
  2909  007770  90D8               	bcf	status,0,c
  2910  007772  3621               	rlcf	___ftdiv@f1,f,c
  2911  007774  3622               	rlcf	___ftdiv@f1+1,f,c
  2912  007776  3623               	rlcf	___ftdiv@f1+2,f,c
  2913  007778  2E2A               	decfsz	___ftdiv@cntr,f,c
  2914  00777A  D7E7               	goto	l1852
  2915  00777C  C02B  F001         	movff	___ftdiv@f3,___ftpack@arg
  2916  007780  C02C  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2917  007784  C02D  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2918  007788  C02E  F004         	movff	___ftdiv@exp,___ftpack@exp
  2919  00778C  C02F  F005         	movff	___ftdiv@sign,___ftpack@sign
  2920  007790  EC9D  F03A         	call	___ftpack	;wreg free
  2921  007794  C001  F021         	movff	?___ftpack,?___ftdiv
  2922  007798  C002  F022         	movff	?___ftpack+1,?___ftdiv+1
  2923  00779C  C003  F023         	movff	?___ftpack+2,?___ftdiv+2
  2924  0077A0  0012               	return	
  2925  0077A2                     __end_of___ftdiv:
  2926                           	opt stack 0
  2927                           tblptru	equ	0xFF8
  2928                           tblptrh	equ	0xFF7
  2929                           tblptrl	equ	0xFF6
  2930                           tablat	equ	0xFF5
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           postdec1	equ	0xFE5
  2934                           fsr1l	equ	0xFE1
  2935                           indf2	equ	0xFDF
  2936                           postinc2	equ	0xFDE
  2937                           postdec2	equ	0xFDD
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           status	equ	0xFD8
  2941                           
  2942 ;; *************** function ___ftadd *****************
  2943 ;; Defined at:
  2944 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  f1              3   83[COMRAM] float 
  2947 ;;  f2              3   86[COMRAM] float 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  exp1            1   94[COMRAM] unsigned char 
  2950 ;;  exp2            1   93[COMRAM] unsigned char 
  2951 ;;  sign            1   92[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  3   83[COMRAM] float 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0, cstack
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2961 ;;      Params:         6       0       0       0       0       0       0       0       0
  2962 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2963 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2964 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2965 ;;Total ram usage:       12 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    1
  2968 ;; This function calls:
  2969 ;;		___ftpack
  2970 ;; This function is called by:
  2971 ;;		_setPeriodTo
  2972 ;;		_SetDutyCycleTo
  2973 ;;		_round
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text15
  2978  007AD4                     __ptext15:
  2979                           	opt stack 0
  2980  007AD4                     ___ftadd:
  2981                           	opt stack 25
  2982                           
  2983                           ;incstack = 0
  2984  007AD4  C056  F05A         	movff	___ftadd@f1+2,??___ftadd
  2985  007AD8  6A5B               	clrf	(??___ftadd+1)& (0+255),c
  2986  007ADA  6A5C               	clrf	(??___ftadd+2)& (0+255),c
  2987  007ADC  3455               	rlcf	___ftadd@f1+1,w,c
  2988  007ADE  365A               	rlcf	??___ftadd& (0+255),f,c
  2989  007AE0  E301               	bnc	u1141
  2990  007AE2  805B               	bsf	(??___ftadd+1)& (0+255),0,c
  2991  007AE4                     u1141:
  2992  007AE4  505A               	movf	??___ftadd,w,c
  2993  007AE6  6E5F               	movwf	___ftadd@exp1,c
  2994  007AE8  C059  F05A         	movff	___ftadd@f2+2,??___ftadd
  2995  007AEC  6A5B               	clrf	(??___ftadd+1)& (0+255),c
  2996  007AEE  6A5C               	clrf	(??___ftadd+2)& (0+255),c
  2997  007AF0  3458               	rlcf	___ftadd@f2+1,w,c
  2998  007AF2  365A               	rlcf	??___ftadd& (0+255),f,c
  2999  007AF4  E301               	bnc	u1151
  3000  007AF6  805B               	bsf	(??___ftadd+1)& (0+255),0,c
  3001  007AF8                     u1151:
  3002  007AF8  505A               	movf	??___ftadd,w,c
  3003  007AFA  6E5E               	movwf	___ftadd@exp2,c
  3004  007AFC  505F               	movf	___ftadd@exp1,w,c
  3005  007AFE  B4D8               	btfsc	status,2,c
  3006  007B00  D00B               	goto	l490
  3007  007B02  505E               	movf	___ftadd@exp2,w,c
  3008  007B04  5C5F               	subwf	___ftadd@exp1,w,c
  3009  007B06  B0D8               	btfsc	status,0,c
  3010  007B08  D00E               	goto	l1722
  3011  007B0A  505F               	movf	___ftadd@exp1,w,c
  3012  007B0C  0800               	sublw	0
  3013  007B0E  245E               	addwf	___ftadd@exp2,w,c
  3014  007B10  6E5A               	movwf	??___ftadd& (0+255),c
  3015  007B12  0E18               	movlw	24
  3016  007B14  645A               	cpfsgt	??___ftadd,c
  3017  007B16  D007               	goto	l1722
  3018  007B18                     l490:
  3019  007B18  C057  F054         	movff	___ftadd@f2,?___ftadd
  3020  007B1C  C058  F055         	movff	___ftadd@f2+1,?___ftadd+1
  3021  007B20  C059  F056         	movff	___ftadd@f2+2,?___ftadd+2
  3022  007B24  0012               	return	
  3023  007B26                     l1722:
  3024  007B26  505E               	movf	___ftadd@exp2,w,c
  3025  007B28  B4D8               	btfsc	status,2,c
  3026  007B2A  D00B               	goto	l494
  3027  007B2C  505F               	movf	___ftadd@exp1,w,c
  3028  007B2E  5C5E               	subwf	___ftadd@exp2,w,c
  3029  007B30  B0D8               	btfsc	status,0,c
  3030  007B32  D00E               	goto	l1728
  3031  007B34  505E               	movf	___ftadd@exp2,w,c
  3032  007B36  0800               	sublw	0
  3033  007B38  245F               	addwf	___ftadd@exp1,w,c
  3034  007B3A  6E5A               	movwf	??___ftadd& (0+255),c
  3035  007B3C  0E18               	movlw	24
  3036  007B3E  645A               	cpfsgt	??___ftadd,c
  3037  007B40  D007               	goto	l1728
  3038  007B42                     l494:
  3039  007B42  C054  F054         	movff	___ftadd@f1,?___ftadd
  3040  007B46  C055  F055         	movff	___ftadd@f1+1,?___ftadd+1
  3041  007B4A  C056  F056         	movff	___ftadd@f1+2,?___ftadd+2
  3042  007B4E  0012               	return	
  3043  007B50                     l1728:
  3044  007B50  0E06               	movlw	6
  3045  007B52  6E5D               	movwf	___ftadd@sign,c
  3046  007B54  BE56               	btfsc	___ftadd@f1+2,7,c
  3047  007B56  8E5D               	bsf	___ftadd@sign,7,c
  3048  007B58  BE59               	btfsc	___ftadd@f2+2,7,c
  3049  007B5A  8C5D               	bsf	___ftadd@sign,6,c
  3050  007B5C  8E55               	bsf	___ftadd@f1+1,7,c
  3051  007B5E  0EFF               	movlw	255
  3052  007B60  1654               	andwf	___ftadd@f1,f,c
  3053  007B62  0EFF               	movlw	255
  3054  007B64  1655               	andwf	___ftadd@f1+1,f,c
  3055  007B66  0E00               	movlw	0
  3056  007B68  1656               	andwf	___ftadd@f1+2,f,c
  3057  007B6A  8E58               	bsf	___ftadd@f2+1,7,c
  3058  007B6C  0EFF               	movlw	255
  3059  007B6E  1657               	andwf	___ftadd@f2,f,c
  3060  007B70  0EFF               	movlw	255
  3061  007B72  1658               	andwf	___ftadd@f2+1,f,c
  3062  007B74  0E00               	movlw	0
  3063  007B76  1659               	andwf	___ftadd@f2+2,f,c
  3064  007B78  505E               	movf	___ftadd@exp2,w,c
  3065  007B7A  5C5F               	subwf	___ftadd@exp1,w,c
  3066  007B7C  B0D8               	btfsc	status,0,c
  3067  007B7E  D01B               	goto	l1754
  3068  007B80                     l1744:
  3069  007B80  90D8               	bcf	status,0,c
  3070  007B82  3657               	rlcf	___ftadd@f2,f,c
  3071  007B84  3658               	rlcf	___ftadd@f2+1,f,c
  3072  007B86  3659               	rlcf	___ftadd@f2+2,f,c
  3073  007B88  065E               	decf	___ftadd@exp2,f,c
  3074  007B8A  505F               	movf	___ftadd@exp1,w,c
  3075  007B8C  185E               	xorwf	___ftadd@exp2,w,c
  3076  007B8E  B4D8               	btfsc	status,2,c
  3077  007B90  D00D               	goto	l1752
  3078  007B92  065D               	decf	___ftadd@sign,f,c
  3079  007B94  C05D  F05A         	movff	___ftadd@sign,??___ftadd
  3080  007B98  0E07               	movlw	7
  3081  007B9A  165A               	andwf	??___ftadd,f,c
  3082  007B9C  B4D8               	btfsc	status,2,c
  3083  007B9E  D006               	goto	l1752
  3084  007BA0  D7EF               	goto	l1744
  3085  007BA2                     l1750:
  3086  007BA2  90D8               	bcf	status,0,c
  3087  007BA4  3256               	rrcf	___ftadd@f1+2,f,c
  3088  007BA6  3255               	rrcf	___ftadd@f1+1,f,c
  3089  007BA8  3254               	rrcf	___ftadd@f1,f,c
  3090  007BAA  2A5F               	incf	___ftadd@exp1,f,c
  3091  007BAC                     l1752:
  3092  007BAC  505E               	movf	___ftadd@exp2,w,c
  3093  007BAE  185F               	xorwf	___ftadd@exp1,w,c
  3094  007BB0  B4D8               	btfsc	status,2,c
  3095  007BB2  D01F               	goto	l505
  3096  007BB4  D7F6               	goto	l1750
  3097  007BB6                     l1754:
  3098  007BB6  505F               	movf	___ftadd@exp1,w,c
  3099  007BB8  5C5E               	subwf	___ftadd@exp2,w,c
  3100  007BBA  B0D8               	btfsc	status,0,c
  3101  007BBC  D01A               	goto	l505
  3102  007BBE                     l1756:
  3103  007BBE  90D8               	bcf	status,0,c
  3104  007BC0  3654               	rlcf	___ftadd@f1,f,c
  3105  007BC2  3655               	rlcf	___ftadd@f1+1,f,c
  3106  007BC4  3656               	rlcf	___ftadd@f1+2,f,c
  3107  007BC6  065F               	decf	___ftadd@exp1,f,c
  3108  007BC8  505F               	movf	___ftadd@exp1,w,c
  3109  007BCA  185E               	xorwf	___ftadd@exp2,w,c
  3110  007BCC  B4D8               	btfsc	status,2,c
  3111  007BCE  D00D               	goto	l1764
  3112  007BD0  065D               	decf	___ftadd@sign,f,c
  3113  007BD2  C05D  F05A         	movff	___ftadd@sign,??___ftadd
  3114  007BD6  0E07               	movlw	7
  3115  007BD8  165A               	andwf	??___ftadd,f,c
  3116  007BDA  B4D8               	btfsc	status,2,c
  3117  007BDC  D006               	goto	l1764
  3118  007BDE  D7EF               	goto	l1756
  3119  007BE0                     l1762:
  3120  007BE0  90D8               	bcf	status,0,c
  3121  007BE2  3259               	rrcf	___ftadd@f2+2,f,c
  3122  007BE4  3258               	rrcf	___ftadd@f2+1,f,c
  3123  007BE6  3257               	rrcf	___ftadd@f2,f,c
  3124  007BE8  2A5E               	incf	___ftadd@exp2,f,c
  3125  007BEA                     l1764:
  3126  007BEA  505E               	movf	___ftadd@exp2,w,c
  3127  007BEC  185F               	xorwf	___ftadd@exp1,w,c
  3128  007BEE  A4D8               	btfss	status,2,c
  3129  007BF0  D7F7               	goto	l1762
  3130  007BF2                     l505:
  3131  007BF2  AE5D               	btfss	___ftadd@sign,7,c
  3132  007BF4  D00C               	goto	l514
  3133  007BF6  0EFF               	movlw	255
  3134  007BF8  1A54               	xorwf	___ftadd@f1,f,c
  3135  007BFA  0EFF               	movlw	255
  3136  007BFC  1A55               	xorwf	___ftadd@f1+1,f,c
  3137  007BFE  0EFF               	movlw	255
  3138  007C00  1A56               	xorwf	___ftadd@f1+2,f,c
  3139  007C02  0E01               	movlw	1
  3140  007C04  2654               	addwf	___ftadd@f1,f,c
  3141  007C06  0E00               	movlw	0
  3142  007C08  2255               	addwfc	___ftadd@f1+1,f,c
  3143  007C0A  0E00               	movlw	0
  3144  007C0C  2256               	addwfc	___ftadd@f1+2,f,c
  3145  007C0E                     l514:
  3146  007C0E  AC5D               	btfss	___ftadd@sign,6,c
  3147  007C10  D00C               	goto	l1770
  3148  007C12  0EFF               	movlw	255
  3149  007C14  1A57               	xorwf	___ftadd@f2,f,c
  3150  007C16  0EFF               	movlw	255
  3151  007C18  1A58               	xorwf	___ftadd@f2+1,f,c
  3152  007C1A  0EFF               	movlw	255
  3153  007C1C  1A59               	xorwf	___ftadd@f2+2,f,c
  3154  007C1E  0E01               	movlw	1
  3155  007C20  2657               	addwf	___ftadd@f2,f,c
  3156  007C22  0E00               	movlw	0
  3157  007C24  2258               	addwfc	___ftadd@f2+1,f,c
  3158  007C26  0E00               	movlw	0
  3159  007C28  2259               	addwfc	___ftadd@f2+2,f,c
  3160  007C2A                     l1770:
  3161  007C2A  0E00               	movlw	0
  3162  007C2C  6E5D               	movwf	___ftadd@sign,c
  3163  007C2E  5054               	movf	___ftadd@f1,w,c
  3164  007C30  2657               	addwf	___ftadd@f2,f,c
  3165  007C32  5055               	movf	___ftadd@f1+1,w,c
  3166  007C34  2258               	addwfc	___ftadd@f2+1,f,c
  3167  007C36  5056               	movf	___ftadd@f1+2,w,c
  3168  007C38  2259               	addwfc	___ftadd@f2+2,f,c
  3169  007C3A  AE59               	btfss	___ftadd@f2+2,7,c
  3170  007C3C  D00E               	goto	l1780
  3171  007C3E  0EFF               	movlw	255
  3172  007C40  1A57               	xorwf	___ftadd@f2,f,c
  3173  007C42  0EFF               	movlw	255
  3174  007C44  1A58               	xorwf	___ftadd@f2+1,f,c
  3175  007C46  0EFF               	movlw	255
  3176  007C48  1A59               	xorwf	___ftadd@f2+2,f,c
  3177  007C4A  0E01               	movlw	1
  3178  007C4C  2657               	addwf	___ftadd@f2,f,c
  3179  007C4E  0E00               	movlw	0
  3180  007C50  2258               	addwfc	___ftadd@f2+1,f,c
  3181  007C52  0E00               	movlw	0
  3182  007C54  2259               	addwfc	___ftadd@f2+2,f,c
  3183  007C56  0E01               	movlw	1
  3184  007C58  6E5D               	movwf	___ftadd@sign,c
  3185  007C5A                     l1780:
  3186  007C5A  C057  F001         	movff	___ftadd@f2,___ftpack@arg
  3187  007C5E  C058  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3188  007C62  C059  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3189  007C66  C05F  F004         	movff	___ftadd@exp1,___ftpack@exp
  3190  007C6A  C05D  F005         	movff	___ftadd@sign,___ftpack@sign
  3191  007C6E  EC9D  F03A         	call	___ftpack	;wreg free
  3192  007C72  C001  F054         	movff	?___ftpack,?___ftadd
  3193  007C76  C002  F055         	movff	?___ftpack+1,?___ftadd+1
  3194  007C7A  C003  F056         	movff	?___ftpack+2,?___ftadd+2
  3195  007C7E  0012               	return	
  3196  007C80                     __end_of___ftadd:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function ___awtoft *****************
  3214 ;; Defined at:
  3215 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  c               2    8[COMRAM] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  sign            1   11[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  3    8[COMRAM] float 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3229 ;;      Params:         3       0       0       0       0       0       0       0       0
  3230 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3232 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3233 ;;Total ram usage:        4 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    1
  3236 ;; This function calls:
  3237 ;;		___ftpack
  3238 ;; This function is called by:
  3239 ;;		_setPeriodTo
  3240 ;;		_SetDutyCycleTo
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text16
  3245  007042                     __ptext16:
  3246                           	opt stack 0
  3247  007042                     ___awtoft:
  3248                           	opt stack 26
  3249                           
  3250                           ;incstack = 0
  3251  007042  0E00               	movlw	0
  3252  007044  6E0C               	movwf	___awtoft@sign,c
  3253  007046  AE0A               	btfss	___awtoft@c+1,7,c
  3254  007048  D006               	goto	l1922
  3255  00704A  6C09               	negf	___awtoft@c,c
  3256  00704C  1E0A               	comf	___awtoft@c+1,f,c
  3257  00704E  B0D8               	btfsc	status,0,c
  3258  007050  2A0A               	incf	___awtoft@c+1,f,c
  3259  007052  0E01               	movlw	1
  3260  007054  6E0C               	movwf	___awtoft@sign,c
  3261  007056                     l1922:
  3262  007056  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3263  00705A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3264  00705E  6A03               	clrf	___ftpack@arg+2,c
  3265  007060  0E8E               	movlw	142
  3266  007062  6E04               	movwf	___ftpack@exp,c
  3267  007064  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3268  007068  EC9D  F03A         	call	___ftpack	;wreg free
  3269  00706C  C001  F009         	movff	?___ftpack,?___awtoft
  3270  007070  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3271  007074  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3272  007078  0012               	return	
  3273  00707A                     __end_of___awtoft:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postdec1	equ	0xFE5
  3282                           fsr1l	equ	0xFE1
  3283                           indf2	equ	0xFDF
  3284                           postinc2	equ	0xFDE
  3285                           postdec2	equ	0xFDD
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function ___ftpack *****************
  3291 ;; Defined at:
  3292 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  arg             3    0[COMRAM] unsigned um
  3295 ;;  exp             1    3[COMRAM] unsigned char 
  3296 ;;  sign            1    4[COMRAM] unsigned char 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  3    0[COMRAM] float 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3308 ;;      Params:         5       0       0       0       0       0       0       0       0
  3309 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3310 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3311 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3312 ;;Total ram usage:        8 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		___altoft
  3318 ;;		___awtoft
  3319 ;;		___ftadd
  3320 ;;		___ftdiv
  3321 ;;		___ftmul
  3322 ;;		___lltoft
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text17
  3327  00753A                     __ptext17:
  3328                           	opt stack 0
  3329  00753A                     ___ftpack:
  3330                           	opt stack 24
  3331                           
  3332                           ;incstack = 0
  3333  00753A  5004               	movf	___ftpack@exp,w,c
  3334  00753C  B4D8               	btfsc	status,2,c
  3335  00753E  D005               	goto	l1604
  3336  007540  5001               	movf	___ftpack@arg,w,c
  3337  007542  1002               	iorwf	___ftpack@arg+1,w,c
  3338  007544  1003               	iorwf	___ftpack@arg+2,w,c
  3339  007546  A4D8               	btfss	status,2,c
  3340  007548  D00C               	goto	l1610
  3341  00754A                     l1604:
  3342  00754A  0E00               	movlw	0
  3343  00754C  6E01               	movwf	?___ftpack,c
  3344  00754E  0E00               	movlw	0
  3345  007550  6E02               	movwf	?___ftpack+1,c
  3346  007552  0E00               	movlw	0
  3347  007554  6E03               	movwf	?___ftpack+2,c
  3348  007556  0012               	return	
  3349  007558                     l1608:
  3350  007558  2A04               	incf	___ftpack@exp,f,c
  3351  00755A  90D8               	bcf	status,0,c
  3352  00755C  3203               	rrcf	___ftpack@arg+2,f,c
  3353  00755E  3202               	rrcf	___ftpack@arg+1,f,c
  3354  007560  3201               	rrcf	___ftpack@arg,f,c
  3355  007562                     l1610:
  3356  007562  0E00               	movlw	0
  3357  007564  1401               	andwf	___ftpack@arg,w,c
  3358  007566  6E06               	movwf	??___ftpack& (0+255),c
  3359  007568  0E00               	movlw	0
  3360  00756A  1402               	andwf	___ftpack@arg+1,w,c
  3361  00756C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3362  00756E  0EFE               	movlw	254
  3363  007570  1403               	andwf	___ftpack@arg+2,w,c
  3364  007572  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3365  007574  5006               	movf	??___ftpack,w,c
  3366  007576  1007               	iorwf	??___ftpack+1,w,c
  3367  007578  1008               	iorwf	??___ftpack+2,w,c
  3368  00757A  B4D8               	btfsc	status,2,c
  3369  00757C  D00C               	goto	l1616
  3370  00757E  D7EC               	goto	l1608
  3371  007580                     l1612:
  3372  007580  2A04               	incf	___ftpack@exp,f,c
  3373  007582  0E01               	movlw	1
  3374  007584  2601               	addwf	___ftpack@arg,f,c
  3375  007586  0E00               	movlw	0
  3376  007588  2202               	addwfc	___ftpack@arg+1,f,c
  3377  00758A  0E00               	movlw	0
  3378  00758C  2203               	addwfc	___ftpack@arg+2,f,c
  3379  00758E  90D8               	bcf	status,0,c
  3380  007590  3203               	rrcf	___ftpack@arg+2,f,c
  3381  007592  3202               	rrcf	___ftpack@arg+1,f,c
  3382  007594  3201               	rrcf	___ftpack@arg,f,c
  3383  007596                     l1616:
  3384  007596  0E00               	movlw	0
  3385  007598  1401               	andwf	___ftpack@arg,w,c
  3386  00759A  6E06               	movwf	??___ftpack& (0+255),c
  3387  00759C  0E00               	movlw	0
  3388  00759E  1402               	andwf	___ftpack@arg+1,w,c
  3389  0075A0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3390  0075A2  0EFF               	movlw	255
  3391  0075A4  1403               	andwf	___ftpack@arg+2,w,c
  3392  0075A6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3393  0075A8  5006               	movf	??___ftpack,w,c
  3394  0075AA  1007               	iorwf	??___ftpack+1,w,c
  3395  0075AC  1008               	iorwf	??___ftpack+2,w,c
  3396  0075AE  B4D8               	btfsc	status,2,c
  3397  0075B0  D006               	goto	l1620
  3398  0075B2  D7E6               	goto	l1612
  3399  0075B4                     l1618:
  3400  0075B4  0604               	decf	___ftpack@exp,f,c
  3401  0075B6  90D8               	bcf	status,0,c
  3402  0075B8  3601               	rlcf	___ftpack@arg,f,c
  3403  0075BA  3602               	rlcf	___ftpack@arg+1,f,c
  3404  0075BC  3603               	rlcf	___ftpack@arg+2,f,c
  3405  0075BE                     l1620:
  3406  0075BE  BE02               	btfsc	___ftpack@arg+1,7,c
  3407  0075C0  D003               	goto	l467
  3408  0075C2  0E02               	movlw	2
  3409  0075C4  6004               	cpfslt	___ftpack@exp,c
  3410  0075C6  D7F6               	goto	l1618
  3411  0075C8                     l467:
  3412  0075C8  A004               	btfss	___ftpack@exp,0,c
  3413  0075CA  9E02               	bcf	___ftpack@arg+1,7,c
  3414  0075CC  90D8               	bcf	status,0,c
  3415  0075CE  3204               	rrcf	___ftpack@exp,f,c
  3416  0075D0  5004               	movf	___ftpack@exp,w,c
  3417  0075D2  1203               	iorwf	___ftpack@arg+2,f,c
  3418  0075D4  5005               	movf	___ftpack@sign,w,c
  3419  0075D6  A4D8               	btfss	status,2,c
  3420  0075D8  8E03               	bsf	___ftpack@arg+2,7,c
  3421  0075DA  C001  F001         	movff	___ftpack@arg,?___ftpack
  3422  0075DE  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3423  0075E2  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3424  0075E6  0012               	return	
  3425  0075E8                     __end_of___ftpack:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           postinc0	equ	0xFEE
  3432                           wreg	equ	0xFE8
  3433                           postdec1	equ	0xFE5
  3434                           fsr1l	equ	0xFE1
  3435                           indf2	equ	0xFDF
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function _PWM_Init *****************
  3443 ;; Defined at:
  3444 ;;		line 20 in file "MotorFunction.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;		None               void
  3451 ;; Registers used:
  3452 ;;		wreg, status,2
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3461 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3462 ;;Total ram usage:        0 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; This function calls:
  3465 ;;		Nothing
  3466 ;; This function is called by:
  3467 ;;		_motorlock_right
  3468 ;;		_motor_init
  3469 ;;		_motorlock_left
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text18
  3474  006F36                     __ptext18:
  3475                           	opt stack 0
  3476  006F36                     _PWM_Init:
  3477                           	opt stack 28
  3478                           
  3479                           ;MotorFunction.c: 23: TRISCbits.TRISC2 = 0;
  3480                           
  3481                           ;incstack = 0
  3482  006F36  9494               	bcf	3988,2,c	;volatile
  3483                           
  3484                           ;MotorFunction.c: 24: CCP1CON = 0x0C;
  3485  006F38  0E0C               	movlw	12
  3486  006F3A  6EBD               	movwf	4029,c	;volatile
  3487  006F3C  0012               	return		;funcret
  3488  006F3E                     __end_of_PWM_Init:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postdec1	equ	0xFE5
  3497                           fsr1l	equ	0xFE1
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _lcd_init *****************
  3506 ;; Defined at:
  3507 ;;		line 94 in file "lcd_utilities.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  i               2    5[COMRAM] int 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;		None               void
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3521 ;;      Params:         0       0       0       0       0       0       0       0       0
  3522 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3523 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3524 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3525 ;;Total ram usage:        3 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    2
  3528 ;; This function calls:
  3529 ;;		_lcd_write_cmd
  3530 ;; This function is called by:
  3531 ;;		_LockMotor
  3532 ;;		_PIR
  3533 ;;		_UltraSound
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537                           	psect	text19
  3538  0071BC                     __ptext19:
  3539                           	opt stack 0
  3540  0071BC                     _lcd_init:
  3541                           	opt stack 27
  3542                           
  3543                           ;lcd_utilities.c: 96: int i;
  3544                           ;lcd_utilities.c: 97: TRISD = 0x00;
  3545                           
  3546                           ;incstack = 0
  3547  0071BC  0E00               	movlw	0
  3548  0071BE  6E95               	movwf	3989,c	;volatile
  3549                           
  3550                           ;lcd_utilities.c: 98: PORTD = 0x00;
  3551  0071C0  0E00               	movlw	0
  3552  0071C2  6E83               	movwf	3971,c	;volatile
  3553                           
  3554                           ;lcd_utilities.c: 99: PORTDbits.RD4 = 0;
  3555  0071C4  9883               	bcf	3971,4,c	;volatile
  3556                           
  3557                           ;lcd_utilities.c: 100: PORTDbits.RD6 = 0;
  3558  0071C6  9C83               	bcf	3971,6,c	;volatile
  3559                           
  3560                           ;lcd_utilities.c: 101: PORTDbits.RD5 = 0;
  3561  0071C8  9A83               	bcf	3971,5,c	;volatile
  3562                           
  3563                           ;lcd_utilities.c: 103: for(i=0;i<100;i++)
  3564  0071CA  0E00               	movlw	0
  3565  0071CC  6E07               	movwf	lcd_init@i+1,c
  3566  0071CE  0E00               	movlw	0
  3567  0071D0  6E06               	movwf	lcd_init@i,c
  3568  0071D2                     l2088:
  3569  0071D2  BE07               	btfsc	lcd_init@i+1,7,c
  3570  0071D4  D006               	goto	l2092
  3571  0071D6  5007               	movf	lcd_init@i+1,w,c
  3572  0071D8  E10F               	bnz	l2096
  3573  0071DA  0E64               	movlw	100
  3574  0071DC  5C06               	subwf	lcd_init@i,w,c
  3575  0071DE  B0D8               	btfsc	status,0,c
  3576  0071E0  D00B               	goto	l2096
  3577  0071E2                     l2092:
  3578                           
  3579                           ;lcd_utilities.c: 104: _delay((unsigned long)((10)*(48000000/4000.0)));
  3580  0071E2  0E9C               	movlw	156
  3581  0071E4  6E05               	movwf	??_lcd_init& (0+255),c
  3582  0071E6  0ED7               	movlw	215
  3583  0071E8                     u1837:
  3584  0071E8  2EE8               	decfsz	wreg,f,c
  3585  0071EA  D7FE               	goto	u1837
  3586  0071EC  2E05               	decfsz	??_lcd_init& (0+255),f,c
  3587  0071EE  D7FC               	goto	u1837
  3588  0071F0  F000               	nop	
  3589  0071F2  4A06               	infsnz	lcd_init@i,f,c
  3590  0071F4  2A07               	incf	lcd_init@i+1,f,c
  3591  0071F6  D7ED               	goto	l2088
  3592  0071F8                     l2096:
  3593                           
  3594                           ;lcd_utilities.c: 117: lcd_write_cmd(0x33);
  3595  0071F8  0E33               	movlw	51
  3596  0071FA  ECA6  F038         	call	_lcd_write_cmd
  3597                           
  3598                           ;lcd_utilities.c: 118: lcd_write_cmd(0x32);
  3599  0071FE  0E32               	movlw	50
  3600  007200  ECA6  F038         	call	_lcd_write_cmd
  3601                           
  3602                           ;lcd_utilities.c: 120: lcd_write_cmd(0x28);
  3603  007204  0E28               	movlw	40
  3604  007206  ECA6  F038         	call	_lcd_write_cmd
  3605                           
  3606                           ;lcd_utilities.c: 123: lcd_write_cmd(0x0E);
  3607  00720A  0E0E               	movlw	14
  3608  00720C  ECA6  F038         	call	_lcd_write_cmd
  3609                           
  3610                           ;lcd_utilities.c: 126: lcd_write_cmd(0x06);
  3611  007210  0E06               	movlw	6
  3612  007212  ECA6  F038         	call	_lcd_write_cmd
  3613                           
  3614                           ;lcd_utilities.c: 130: lcd_write_cmd(0x01);
  3615  007216  0E01               	movlw	1
  3616  007218  ECA6  F038         	call	_lcd_write_cmd
  3617                           
  3618                           ;lcd_utilities.c: 132: _delay((unsigned long)((10)*(48000000/4000.0)));
  3619  00721C  0E9C               	movlw	156
  3620  00721E  6E05               	movwf	??_lcd_init& (0+255),c
  3621  007220  0ED7               	movlw	215
  3622  007222                     u1847:
  3623  007222  2EE8               	decfsz	wreg,f,c
  3624  007224  D7FE               	goto	u1847
  3625  007226  2E05               	decfsz	??_lcd_init& (0+255),f,c
  3626  007228  D7FC               	goto	u1847
  3627  00722A  F000               	nop	
  3628  00722C  0012               	return		;funcret
  3629  00722E                     __end_of_lcd_init:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           postinc0	equ	0xFEE
  3636                           wreg	equ	0xFE8
  3637                           postdec1	equ	0xFE5
  3638                           fsr1l	equ	0xFE1
  3639                           indf2	equ	0xFDF
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           fsr2h	equ	0xFDA
  3643                           fsr2l	equ	0xFD9
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function _getkey *****************
  3647 ;; Defined at:
  3648 ;;		line 17 in file "keypad_utilities.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  lookup         18    0[COMRAM] const unsigned char [18]
  3653 ;;  keycode         1   18[COMRAM] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      unsigned char 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3663 ;;      Params:         0       0       0       0       0       0       0       0       0
  3664 ;;      Locals:        19       0       0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3666 ;;      Totals:        19       0       0       0       0       0       0       0       0
  3667 ;;Total ram usage:       19 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_LockMotor
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text20
  3677  006FD6                     __ptext20:
  3678                           	opt stack 0
  3679  006FD6                     _getkey:
  3680                           	opt stack 29
  3681                           
  3682                           ;keypad_utilities.c: 19: const unsigned char lookup[] = "123F456E789DA0BC ";
  3683                           
  3684                           ;incstack = 0
  3685  006FD6  0E05               	movlw	low getkey@F4444
  3686  006FD8  6EF6               	movwf	tblptrl,c
  3687  006FDA                     	if	0	;There is only one active tblptr byte
  3688  006FDA                     	endif
  3689  006FDA                     	if	0	;There are less than 3 active tblptr bytes
  3690  006FDA                     	endif
  3691  006FDA  EE20  F001         	lfsr	2,getkey@lookup
  3692  006FDE  0E11               	movlw	17
  3693  006FE0                     u1660:
  3694  006FE0  0009               	tblrd		*+
  3695  006FE2  CFF5 FFDE          	movff	tablat,postinc2
  3696  006FE6  06E8               	decf	wreg,f,c
  3697  006FE8  E2FB               	bc	u1660
  3698  006FEA                     l124:
  3699  006FEA  AA81               	btfss	3969,5,c	;volatile
  3700  006FEC  D7FE               	goto	l124
  3701                           
  3702                           ;keypad_utilities.c: 22: keycode=PORTB & 0x0F;
  3703  006FEE  5081               	movf	3969,w,c	;volatile
  3704  006FF0  0B0F               	andlw	15
  3705  006FF2  6E13               	movwf	getkey@keycode,c
  3706  006FF4                     l127:
  3707  006FF4  BA81               	btfsc	3969,5,c	;volatile
  3708  006FF6  D7FE               	goto	l127
  3709                           
  3710                           ;keypad_utilities.c: 25: return(lookup[keycode]);
  3711  006FF8  5013               	movf	getkey@keycode,w,c
  3712  006FFA  0D01               	mullw	1
  3713  006FFC  0E01               	movlw	low getkey@lookup
  3714  006FFE  24F3               	addwf	prodl,w,c
  3715  007000  6ED9               	movwf	fsr2l,c
  3716  007002  0E00               	movlw	high getkey@lookup
  3717  007004  20F4               	addwfc	prodh,w,c
  3718  007006  6EDA               	movwf	fsr2h,c
  3719  007008  50DF               	movf	indf2,w,c
  3720  00700A  0012               	return	
  3721  00700C                     __end_of_getkey:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           postdec1	equ	0xFE5
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _delay_ms *****************
  3741 ;; Defined at:
  3742 ;;		line 10 in file "delays_utilities.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  i               2    0[COMRAM] unsigned int 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  j               2    3[COMRAM] unsigned int 
  3747 ;; Return value:  Size  Location     Type
  3748 ;;		None               void
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3756 ;;      Params:         2       0       0       0       0       0       0       0       0
  3757 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3758 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3759 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3760 ;;Total ram usage:        5 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; This function calls:
  3763 ;;		Nothing
  3764 ;; This function is called by:
  3765 ;;		_LockMotor
  3766 ;;		_PIR
  3767 ;;		_UltraSound
  3768 ;;		_buzzer_but
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text21
  3773  006FA2                     __ptext21:
  3774                           	opt stack 0
  3775  006FA2                     _delay_ms:
  3776                           	opt stack 29
  3777                           
  3778                           ;delays_utilities.c: 12: if(i!=0)
  3779                           
  3780                           ;incstack = 0
  3781  006FA2  5001               	movf	delay_ms@i,w,c
  3782  006FA4  1002               	iorwf	delay_ms@i+1,w,c
  3783  006FA6  B4D8               	btfsc	status,2,c
  3784  006FA8  0012               	return	
  3785                           
  3786                           ;delays_utilities.c: 13: for(j=0;j<i;j++)_delay((unsigned long)((1)*(48000000/4000.0)));
  3787  006FAA  0E00               	movlw	0
  3788  006FAC  6E05               	movwf	delay_ms@j+1,c
  3789  006FAE  0E00               	movlw	0
  3790  006FB0  6E04               	movwf	delay_ms@j,c
  3791  006FB2  D00A               	goto	l70
  3792  006FB4                     l2104:
  3793  006FB4  0E10               	movlw	16
  3794  006FB6  6E03               	movwf	??_delay_ms& (0+255),c
  3795  006FB8  0E94               	movlw	148
  3796  006FBA                     u1857:
  3797  006FBA  2EE8               	decfsz	wreg,f,c
  3798  006FBC  D7FE               	goto	u1857
  3799  006FBE  2E03               	decfsz	??_delay_ms& (0+255),f,c
  3800  006FC0  D7FC               	goto	u1857
  3801  006FC2  D000               	nop2	
  3802  006FC4  4A04               	infsnz	delay_ms@j,f,c
  3803  006FC6  2A05               	incf	delay_ms@j+1,f,c
  3804  006FC8                     l70:
  3805  006FC8  5001               	movf	delay_ms@i,w,c
  3806  006FCA  5C04               	subwf	delay_ms@j,w,c
  3807  006FCC  5002               	movf	delay_ms@i+1,w,c
  3808  006FCE  5805               	subwfb	delay_ms@j+1,w,c
  3809  006FD0  B0D8               	btfsc	status,0,c
  3810  006FD2  0012               	return	
  3811  006FD4  D7EF               	goto	l2104
  3812  006FD6                     __end_of_delay_ms:
  3813                           	opt stack 0
  3814                           tblptru	equ	0xFF8
  3815                           tblptrh	equ	0xFF7
  3816                           tblptrl	equ	0xFF6
  3817                           tablat	equ	0xFF5
  3818                           prodh	equ	0xFF4
  3819                           prodl	equ	0xFF3
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postdec1	equ	0xFE5
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831 ;; *************** function _clearScreen *****************
  3832 ;; Defined at:
  3833 ;;		line 10 in file "LockMotor.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;		None
  3836 ;; Auto vars:     Size  Location     Type
  3837 ;;  i               2    4[COMRAM] int 
  3838 ;; Return value:  Size  Location     Type
  3839 ;;		None               void
  3840 ;; Registers used:
  3841 ;;		wreg, status,2, status,0, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3847 ;;      Params:         0       0       0       0       0       0       0       0       0
  3848 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3850 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3851 ;;Total ram usage:        2 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    2
  3854 ;; This function calls:
  3855 ;;		_lcd_write_cmd
  3856 ;;		_lcd_write_data
  3857 ;; This function is called by:
  3858 ;;		_LockMotor
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           	psect	text22
  3863  0070B4                     __ptext22:
  3864                           	opt stack 0
  3865  0070B4                     _clearScreen:
  3866                           	opt stack 27
  3867                           
  3868                           ;LockMotor.c: 11: int i;
  3869                           ;LockMotor.c: 12: for (i = 0; i < 20; i++) {
  3870                           
  3871                           ;incstack = 0
  3872  0070B4  0E00               	movlw	0
  3873  0070B6  6E06               	movwf	clearScreen@i+1,c
  3874  0070B8  0E00               	movlw	0
  3875  0070BA  6E05               	movwf	clearScreen@i,c
  3876  0070BC                     l2130:
  3877  0070BC  BE06               	btfsc	clearScreen@i+1,7,c
  3878  0070BE  D006               	goto	l2134
  3879  0070C0  5006               	movf	clearScreen@i+1,w,c
  3880  0070C2  E115               	bnz	l163
  3881  0070C4  0E14               	movlw	20
  3882  0070C6  5C05               	subwf	clearScreen@i,w,c
  3883  0070C8  B0D8               	btfsc	status,0,c
  3884  0070CA  0012               	return	
  3885  0070CC                     l2134:
  3886                           
  3887                           ;LockMotor.c: 13: lcd_write_cmd(0x80 + i);
  3888  0070CC  5005               	movf	clearScreen@i,w,c
  3889  0070CE  0F80               	addlw	128
  3890  0070D0  ECA6  F038         	call	_lcd_write_cmd
  3891                           
  3892                           ;LockMotor.c: 14: lcd_write_data(' ');
  3893  0070D4  0E20               	movlw	32
  3894  0070D6  EC53  F03A         	call	_lcd_write_data
  3895                           
  3896                           ;LockMotor.c: 15: lcd_write_cmd(0xC0 + i);
  3897  0070DA  5005               	movf	clearScreen@i,w,c
  3898  0070DC  0FC0               	addlw	192
  3899  0070DE  ECA6  F038         	call	_lcd_write_cmd
  3900                           
  3901                           ;LockMotor.c: 16: lcd_write_data(' ');
  3902  0070E2  0E20               	movlw	32
  3903  0070E4  EC53  F03A         	call	_lcd_write_data
  3904  0070E8  4A05               	infsnz	clearScreen@i,f,c
  3905  0070EA  2A06               	incf	clearScreen@i+1,f,c
  3906  0070EC  D7E7               	goto	l2130
  3907  0070EE                     l163:
  3908  0070EE  0012               	return		;funcret
  3909  0070F0                     __end_of_clearScreen:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _lcd_write_data *****************
  3929 ;; Defined at:
  3930 ;;		line 54 in file "lcd_utilities.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  data            1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  data            1    2[COMRAM] unsigned char 
  3935 ;;  temp1           1    3[COMRAM] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;		None               void
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0
  3946 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3947 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3948 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3949 ;;Total ram usage:        3 bytes
  3950 ;; Hardware stack levels used:    1
  3951 ;; Hardware stack levels required when called:    1
  3952 ;; This function calls:
  3953 ;;		_lcd_strobe
  3954 ;; This function is called by:
  3955 ;;		_clearScreen
  3956 ;;		_LockMotor
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text23
  3961  0074A6                     __ptext23:
  3962                           	opt stack 0
  3963  0074A6                     _lcd_write_data:
  3964                           	opt stack 28
  3965                           
  3966                           ;incstack = 0
  3967                           ;lcd_write_data@data stored from wreg
  3968  0074A6  6E03               	movwf	lcd_write_data@data,c
  3969                           
  3970                           ;lcd_utilities.c: 56: char temp1;
  3971                           ;lcd_utilities.c: 58: PORTDbits.RD6 = 1;
  3972  0074A8  8C83               	bsf	3971,6,c	;volatile
  3973                           
  3974                           ;lcd_utilities.c: 59: _delay((unsigned long)((4)*(48000000/4000.0)));
  3975  0074AA  0E3F               	movlw	63
  3976  0074AC  6E02               	movwf	??_lcd_write_data& (0+255),c
  3977  0074AE  0E55               	movlw	85
  3978  0074B0                     u1867:
  3979  0074B0  2EE8               	decfsz	wreg,f,c
  3980  0074B2  D7FE               	goto	u1867
  3981  0074B4  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  3982  0074B6  D7FC               	goto	u1867
  3983  0074B8  F000               	nop	
  3984                           
  3985                           ;lcd_utilities.c: 61: temp1 = data;
  3986  0074BA  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  3987                           
  3988                           ;lcd_utilities.c: 62: temp1 = temp1 >> 4;
  3989  0074BE  3804               	swapf	lcd_write_data@temp1,w,c
  3990  0074C0  0B0F               	andlw	15
  3991  0074C2  6E04               	movwf	lcd_write_data@temp1,c
  3992                           
  3993                           ;lcd_utilities.c: 63: PORTD = temp1 & 0x0F;
  3994  0074C4  5004               	movf	lcd_write_data@temp1,w,c
  3995  0074C6  0B0F               	andlw	15
  3996  0074C8  6E83               	movwf	3971,c	;volatile
  3997                           
  3998                           ;lcd_utilities.c: 64: _delay((unsigned long)((8)*(48000000/4000.0)));
  3999  0074CA  0E7D               	movlw	125
  4000  0074CC  6E02               	movwf	??_lcd_write_data& (0+255),c
  4001  0074CE  0EAC               	movlw	172
  4002  0074D0                     u1877:
  4003  0074D0  2EE8               	decfsz	wreg,f,c
  4004  0074D2  D7FE               	goto	u1877
  4005  0074D4  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4006  0074D6  D7FC               	goto	u1877
  4007                           
  4008                           ;lcd_utilities.c: 65: PORTDbits.RD6 = 1;
  4009  0074D8  8C83               	bsf	3971,6,c	;volatile
  4010                           
  4011                           ;lcd_utilities.c: 66: _delay((unsigned long)((8)*(48000000/4000.0)));
  4012  0074DA  0E7D               	movlw	125
  4013  0074DC  6E02               	movwf	??_lcd_write_data& (0+255),c
  4014  0074DE  0EAC               	movlw	172
  4015  0074E0                     u1887:
  4016  0074E0  2EE8               	decfsz	wreg,f,c
  4017  0074E2  D7FE               	goto	u1887
  4018  0074E4  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4019  0074E6  D7FC               	goto	u1887
  4020                           
  4021                           ;lcd_utilities.c: 68: lcd_strobe();
  4022  0074E8  ECAE  F037         	call	_lcd_strobe	;wreg free
  4023                           
  4024                           ;lcd_utilities.c: 69: _delay((unsigned long)((8)*(48000000/4000.0)));
  4025  0074EC  0E7D               	movlw	125
  4026  0074EE  6E02               	movwf	??_lcd_write_data& (0+255),c
  4027  0074F0  0EAC               	movlw	172
  4028  0074F2                     u1897:
  4029  0074F2  2EE8               	decfsz	wreg,f,c
  4030  0074F4  D7FE               	goto	u1897
  4031  0074F6  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4032  0074F8  D7FC               	goto	u1897
  4033                           
  4034                           ;lcd_utilities.c: 71: temp1 = data;
  4035  0074FA  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4036                           
  4037                           ;lcd_utilities.c: 72: PORTD = temp1 & 0x0F;
  4038  0074FE  5004               	movf	lcd_write_data@temp1,w,c
  4039  007500  0B0F               	andlw	15
  4040  007502  6E83               	movwf	3971,c	;volatile
  4041                           
  4042                           ;lcd_utilities.c: 73: _delay((unsigned long)((8)*(48000000/4000.0)));
  4043  007504  0E7D               	movlw	125
  4044  007506  6E02               	movwf	??_lcd_write_data& (0+255),c
  4045  007508  0EAC               	movlw	172
  4046  00750A                     u1907:
  4047  00750A  2EE8               	decfsz	wreg,f,c
  4048  00750C  D7FE               	goto	u1907
  4049  00750E  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4050  007510  D7FC               	goto	u1907
  4051                           
  4052                           ;lcd_utilities.c: 74: PORTDbits.RD6 = 1;
  4053  007512  8C83               	bsf	3971,6,c	;volatile
  4054                           
  4055                           ;lcd_utilities.c: 75: _delay((unsigned long)((10)*(48000000/4000.0)));
  4056  007514  0E9C               	movlw	156
  4057  007516  6E02               	movwf	??_lcd_write_data& (0+255),c
  4058  007518  0ED7               	movlw	215
  4059  00751A                     u1917:
  4060  00751A  2EE8               	decfsz	wreg,f,c
  4061  00751C  D7FE               	goto	u1917
  4062  00751E  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4063  007520  D7FC               	goto	u1917
  4064  007522  F000               	nop	
  4065                           
  4066                           ;lcd_utilities.c: 77: lcd_strobe();
  4067  007524  ECAE  F037         	call	_lcd_strobe	;wreg free
  4068                           
  4069                           ;lcd_utilities.c: 78: _delay((unsigned long)((10)*(48000000/4000.0)));
  4070  007528  0E9C               	movlw	156
  4071  00752A  6E02               	movwf	??_lcd_write_data& (0+255),c
  4072  00752C  0ED7               	movlw	215
  4073  00752E                     u1927:
  4074  00752E  2EE8               	decfsz	wreg,f,c
  4075  007530  D7FE               	goto	u1927
  4076  007532  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4077  007534  D7FC               	goto	u1927
  4078  007536  F000               	nop	
  4079  007538  0012               	return		;funcret
  4080  00753A                     __end_of_lcd_write_data:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _lcd_write_cmd *****************
  4100 ;; Defined at:
  4101 ;;		line 29 in file "lcd_utilities.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;  cmd             1    wreg     unsigned char 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  cmd             1    2[COMRAM] unsigned char 
  4106 ;;  temp2           1    3[COMRAM] unsigned char 
  4107 ;; Return value:  Size  Location     Type
  4108 ;;		None               void
  4109 ;; Registers used:
  4110 ;;		wreg, status,2, status,0, cstack
  4111 ;; Tracked objects:
  4112 ;;		On entry : 0/0
  4113 ;;		On exit  : 0/0
  4114 ;;		Unchanged: 0/0
  4115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4116 ;;      Params:         0       0       0       0       0       0       0       0       0
  4117 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4118 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4119 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4120 ;;Total ram usage:        3 bytes
  4121 ;; Hardware stack levels used:    1
  4122 ;; Hardware stack levels required when called:    1
  4123 ;; This function calls:
  4124 ;;		_lcd_strobe
  4125 ;; This function is called by:
  4126 ;;		_lcd_init
  4127 ;;		_clearScreen
  4128 ;;		_LockMotor
  4129 ;;		_PIR
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text24
  4134  00714C                     __ptext24:
  4135                           	opt stack 0
  4136  00714C                     _lcd_write_cmd:
  4137                           	opt stack 28
  4138                           
  4139                           ;incstack = 0
  4140                           ;lcd_write_cmd@cmd stored from wreg
  4141  00714C  6E03               	movwf	lcd_write_cmd@cmd,c
  4142                           
  4143                           ;lcd_utilities.c: 31: unsigned char temp2;
  4144                           ;lcd_utilities.c: 32: PORTDbits.RD6 = 0;
  4145  00714E  9C83               	bcf	3971,6,c	;volatile
  4146                           
  4147                           ;lcd_utilities.c: 33: _delay((unsigned long)((4)*(48000000/4000.0)));
  4148  007150  0E3F               	movlw	63
  4149  007152  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4150  007154  0E55               	movlw	85
  4151  007156                     u1937:
  4152  007156  2EE8               	decfsz	wreg,f,c
  4153  007158  D7FE               	goto	u1937
  4154  00715A  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4155  00715C  D7FC               	goto	u1937
  4156  00715E  F000               	nop	
  4157                           
  4158                           ;lcd_utilities.c: 34: temp2 = cmd;
  4159  007160  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  4160                           
  4161                           ;lcd_utilities.c: 35: temp2 = temp2 >> 4;
  4162  007164  3804               	swapf	lcd_write_cmd@temp2,w,c
  4163  007166  0B0F               	andlw	15
  4164  007168  6E04               	movwf	lcd_write_cmd@temp2,c
  4165                           
  4166                           ;lcd_utilities.c: 36: PORTD = temp2 & 0x0F;
  4167  00716A  5004               	movf	lcd_write_cmd@temp2,w,c
  4168  00716C  0B0F               	andlw	15
  4169  00716E  6E83               	movwf	3971,c	;volatile
  4170                           
  4171                           ;lcd_utilities.c: 38: _delay((unsigned long)((8)*(48000000/4000.0)));
  4172  007170  0E7D               	movlw	125
  4173  007172  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4174  007174  0EAC               	movlw	172
  4175  007176                     u1947:
  4176  007176  2EE8               	decfsz	wreg,f,c
  4177  007178  D7FE               	goto	u1947
  4178  00717A  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4179  00717C  D7FC               	goto	u1947
  4180                           
  4181                           ;lcd_utilities.c: 39: lcd_strobe();
  4182  00717E  ECAE  F037         	call	_lcd_strobe	;wreg free
  4183                           
  4184                           ;lcd_utilities.c: 41: _delay((unsigned long)((8)*(48000000/4000.0)));
  4185  007182  0E7D               	movlw	125
  4186  007184  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4187  007186  0EAC               	movlw	172
  4188  007188                     u1957:
  4189  007188  2EE8               	decfsz	wreg,f,c
  4190  00718A  D7FE               	goto	u1957
  4191  00718C  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4192  00718E  D7FC               	goto	u1957
  4193                           
  4194                           ;lcd_utilities.c: 43: temp2 = cmd;
  4195  007190  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  4196                           
  4197                           ;lcd_utilities.c: 44: PORTD = temp2 & 0x0F;
  4198  007194  5004               	movf	lcd_write_cmd@temp2,w,c
  4199  007196  0B0F               	andlw	15
  4200  007198  6E83               	movwf	3971,c	;volatile
  4201                           
  4202                           ;lcd_utilities.c: 46: _delay((unsigned long)((8)*(48000000/4000.0)));
  4203  00719A  0E7D               	movlw	125
  4204  00719C  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4205  00719E  0EAC               	movlw	172
  4206  0071A0                     u1967:
  4207  0071A0  2EE8               	decfsz	wreg,f,c
  4208  0071A2  D7FE               	goto	u1967
  4209  0071A4  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4210  0071A6  D7FC               	goto	u1967
  4211                           
  4212                           ;lcd_utilities.c: 47: lcd_strobe();
  4213  0071A8  ECAE  F037         	call	_lcd_strobe	;wreg free
  4214                           
  4215                           ;lcd_utilities.c: 48: _delay((unsigned long)((8)*(48000000/4000.0)));
  4216  0071AC  0E7D               	movlw	125
  4217  0071AE  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4218  0071B0  0EAC               	movlw	172
  4219  0071B2                     u1977:
  4220  0071B2  2EE8               	decfsz	wreg,f,c
  4221  0071B4  D7FE               	goto	u1977
  4222  0071B6  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4223  0071B8  D7FC               	goto	u1977
  4224  0071BA  0012               	return		;funcret
  4225  0071BC                     __end_of_lcd_write_cmd:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _lcd_strobe *****************
  4245 ;; Defined at:
  4246 ;;		line 84 in file "lcd_utilities.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		wreg
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4262 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4263 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4264 ;;Total ram usage:        1 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_lcd_write_cmd
  4270 ;;		_lcd_write_data
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text25
  4275  006F5C                     __ptext25:
  4276                           	opt stack 0
  4277  006F5C                     _lcd_strobe:
  4278                           	opt stack 28
  4279                           
  4280                           ;lcd_utilities.c: 86: PORTDbits.RD4 = 1;
  4281                           
  4282                           ;incstack = 0
  4283  006F5C  8883               	bsf	3971,4,c	;volatile
  4284                           
  4285                           ;lcd_utilities.c: 87: _delay((unsigned long)((8)*(48000000/4000.0)));
  4286  006F5E  0E7D               	movlw	125
  4287  006F60  6E01               	movwf	??_lcd_strobe& (0+255),c
  4288  006F62  0EAC               	movlw	172
  4289  006F64                     u1987:
  4290  006F64  2EE8               	decfsz	wreg,f,c
  4291  006F66  D7FE               	goto	u1987
  4292  006F68  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  4293  006F6A  D7FC               	goto	u1987
  4294                           
  4295                           ;lcd_utilities.c: 88: PORTDbits.RD4 = 0;
  4296  006F6C  9883               	bcf	3971,4,c	;volatile
  4297                           
  4298                           ;lcd_utilities.c: 89: _delay((unsigned long)((8)*(48000000/4000.0)));
  4299  006F6E  0E7D               	movlw	125
  4300  006F70  6E01               	movwf	??_lcd_strobe& (0+255),c
  4301  006F72  0EAC               	movlw	172
  4302  006F74                     u1997:
  4303  006F74  2EE8               	decfsz	wreg,f,c
  4304  006F76  D7FE               	goto	u1997
  4305  006F78  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  4306  006F7A  D7FC               	goto	u1997
  4307  006F7C  0012               	return		;funcret
  4308  006F7E                     __end_of_lcd_strobe:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           prodh	equ	0xFF4
  4315                           prodl	equ	0xFF3
  4316                           postinc0	equ	0xFEE
  4317                           wreg	equ	0xFE8
  4318                           postdec1	equ	0xFE5
  4319                           fsr1l	equ	0xFE1
  4320                           indf2	equ	0xFDF
  4321                           postinc2	equ	0xFDE
  4322                           postdec2	equ	0xFDD
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           postinc0	equ	0xFEE
  4333                           wreg	equ	0xFE8
  4334                           postdec1	equ	0xFE5
  4335                           fsr1l	equ	0xFE1
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343                           	psect	rparam
  4344  0000                     tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           postinc0	equ	0xFEE
  4351                           wreg	equ	0xFE8
  4352                           postdec1	equ	0xFE5
  4353                           fsr1l	equ	0xFE1
  4354                           indf2	equ	0xFDF
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        21
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     35      65
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _setPeriodTo->___ftadd
    _round->___ftadd
    _trunc->___altoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___lltoft->___ftpack
    _SetDutyCycleTo->___ftadd
    ___fttol->___ftdiv
    ___ftmul->___lltoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _lcd_init->_lcd_write_cmd
    _clearScreen->_lcd_write_cmd
    _clearScreen->_lcd_write_data
    _lcd_write_data->_lcd_strobe
    _lcd_write_cmd->_lcd_strobe

Critical Paths under _main in BANK0

    _main->_LockMotor
    _LockMotor->_motorlock_right
    _motorlock_right->_setPeriodTo
    _setPeriodTo->_round

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   37819
                          _LockMotor
 ---------------------------------------------------------------------------------
 (1) _LockMotor                                            2     2      0   37819
                                             33 BANK0      2     2      0
                        _clearScreen
                           _delay_ms
                             _getkey
                           _lcd_init
                      _lcd_write_cmd
                     _lcd_write_data
                    _motorlock_right
 ---------------------------------------------------------------------------------
 (2) _motorlock_right                                      2     2      0   36486
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _setPeriodTo                                         25    21      4   23016
                                              6 BANK0     25    21      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3    7474
                                              0 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                8     5      3    3485
                                             72 COMRAM     8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2350
                                             62 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                             80 COMRAM     3     0      3
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2345
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _delay                                                6     4      2     348
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _SetDutyCycleTo                                      12     7      5   13077
                                              0 BANK0     12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     508
                                             47 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3088
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2786
                                             32 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3704
                                             83 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2367
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             3     3      0     159
                                              4 COMRAM     3     3      0
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (2) _getkey                                              19    19      0      48
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     516
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _clearScreen                                          2     2      0     316
                                              4 COMRAM     2     2      0
                      _lcd_write_cmd
                     _lcd_write_data
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data                                       3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_write_cmd                                        3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (3) _lcd_strobe                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LockMotor
     _clearScreen
       _lcd_write_cmd
         _lcd_strobe
       _lcd_write_data
         _lcd_strobe
     _delay_ms
     _getkey
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe
     _lcd_write_cmd
       _lcd_strobe
     _lcd_write_data
       _lcd_strobe
     _motorlock_right
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftneg (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                 _frexp
             ___ftpack (ARG)
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             ___lltoft (ARG)
               ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp
           ___ftneg
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     23      41       5       40.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A0      20        0.0%
DATA                 0      0      A0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Jan 30 15:36:30 2024

                 ___altoft@exp 0047                              _c 009A                  ___altoft@sign 0048  
                           l70 6FC8                             _p1 009D                             _p2 009E  
                           _p3 009F                             _p4 00A0                   ___ftadd@exp1 005F  
                 ___ftadd@exp2 005E                   ___ftadd@sign 005D                            l124 6FEA  
                          l127 6FF4                            l163 70EE                            l505 7BF2  
                          l514 7C0E                            l525 7770                            l490 7B18  
                          l467 75C8                            l547 6F94                            l494 7B42  
                          _PR2 000FCB                            _key 009B                            prod 000FF3  
                          wreg 000FE8                    getkey@F4444 1005                   ___ftdiv@cntr 002A  
                 ___ftdiv@sign 002F                           l2020 7DA0                           l2012 7D10  
                         l2006 7CC0                           l2104 6FB4                           l2032 7E78  
                         l2024 7DE8                           l2016 7D58                           l2200 7A9E  
                         l2130 70BC                           l2036 7EC0                           l2028 7E30  
                         l2134 70CC                           l2160 79DE                           l2152 79B8  
                         l1610 7562                           l2066 7016                           l2092 71E2  
                         l1620 75BE                           l1612 7580                           l1604 754A  
                         l2076 7030                           l2068 701E                           l2148 79A2  
                         l2078 7034                           l2096 71F8                           l2088 71D2  
                         l1616 7596                           l1608 7558                           l1704 72C2  
                         l1800 73DA                           l1618 75B4                           l1722 7B26  
                         l1644 7250                           l1750 7BA2                           l1902 784C  
                         l1646 725C                           l1752 7BAC                           l1744 7B80  
                         l1728 7B50                           l1832 770C                           l1680 7938  
                         l1922 7056                           l1770 7C2A                           l1762 7BE0  
                         l1754 7BB6                           l1826 76E4                           l1906 785C  
                         l1690 7962                           l1658 78C2                           l1930 7102  
                         l1780 7C5A                           l1764 7BEA                           l1756 7BBE  
                         l1852 774A                           l1676 7928                           l1694 7978  
                         l1686 7950                           l1872 77CA                           l1688 795C  
                         l1928 70F6                           l1892 7824                           l1796 73C0  
                         l1878 77F2                           l1896 7834                           u1041 78A6  
                         u1130 72EA                           u1060 78E0                           u1141 7AE4  
                         u1151 7AF8                           u1401 76F4                           u1065 78D8  
                         u1138 72EC                           u1431 77B2                           u1370 73CC  
                         u1451 77DA                           u1381 76CC                           u1660 6FE0  
                         u1907 750A                           u1917 751A                           u1837 71E8  
                         u1927 752E                           u1847 7222                           u1937 7156  
                         u1857 6FBA                           u1947 7176                           u1867 74B0  
                         u1957 7188                           u1877 74D0                           u1967 71A0  
                         u1887 74E0                           u1977 71B2                           u1897 74F2  
                         u1987 6F64                           u1997 6F74                           _TMR2 000FCC  
     SetDutyCycleTo@Duty_cycle 0060         __end_of_lcd_write_data 753A                           _main 6F3E  
                 ___ftpack@arg 0001                   ___ftpack@exp 0004                           fsr2h 000FDA  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
                         prodl 000FF3                 ?_lcd_write_cmd 0001                           start 1000  
                 ___ftmul@cntr 001F                   ___param_bank 000010                   ___ftmul@sign 0020  
                   LockMotor@i 0081                   ___fttol@exp1 003E                   ___fttol@lval 003A  
                        ?_main 0001                __end_of___ftadd 7C80                __end_of___ftdiv 77A2  
              __end_of___ftneg 6FA2                __end_of___ftmul 7896                __end_of___fttol 798A  
                        _T2CON 000FCA                          _PORTB 000F81                          _PORTD 000F83  
                        _TRISC 000F94                          _TRISD 000F95               lcd_write_cmd@cmd 0003  
                 ___lltoft@exp 0011     setPeriodTo@clockSelectBits 0076                  ___awtoft@sign 000C  
                        _delay 700C                          _frexp 72A6                          _errno 0098  
                ___ftpack@sign 0005                          _round 7418                          _trunc 7396  
             __end_of_PWM_Init 6F3E                          tablat 000FF5                ?_lcd_write_data 0001  
                        status 000FD8              ??_motorlock_right 0060                   getkey@lookup 0001  
         __size_of_clearScreen 003C                __initialization 707A                   __end_of_main 6F46  
                       ??_main 0060                  ___fttol@sign1 0039                  __activetblptr 000001  
                 ?_setPeriodTo 0066                         ?_delay 0001                         _ADCON1 000FC1  
                       ?_frexp 0001               __end_of___altoft 72A6                         _CCPR1L 000FBE  
             __end_of___awtoft 707A               __end_of___ftpack 75E8                         ?_round 0060  
                       ?_trunc 0049               __end_of___lltoft 714C                         _OSCCON 000FD3  
              ??_lcd_write_cmd 0002                         _TRISA0 007C90               ??_SetDutyCycleTo 0065  
           __size_of_LockMotor 014A               __end_of_delay_ms 6FD6               __end_of_lcd_init 722E  
                    ??___ftadd 005A                      ??___ftdiv 0027                      ??___ftneg 0054  
                    ??___ftmul 0018                      ??___fttol 0034                         _getkey 6FD6  
                       delay@i 0003                         delay@j 0005                         clear_0 7080  
        ___ftmul@f3_as_product 001C                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                         round@f 0063  
                       round@x 0060                         trunc@i 004C                         trunc@x 0049  
                   __accesstop 0060        __end_of__initialization 70A6                     ___altoft@c 003F  
                getkey@keycode 0013                     ___ftadd@f1 0054                     ___ftadd@f2 0057  
                ___rparam_used 000001                     ___ftdiv@f1 0021                     ___ftdiv@f2 0024  
                   ___ftdiv@f3 002B                     ___ftneg@f1 0051                     ___awtoft@c 0009  
                   ___ftmul@f1 0012                     ___ftmul@f2 0015                     ___fttol@f1 0030  
               __pcstackCOMRAM 0001         setPeriodTo@_resolution 007B                   __pidataBANK0 6F47  
                __end_of_delay 7042                     ___lltoft@c 0009                  __end_of_frexp 731E  
                __end_of_round 74A6                  __end_of_trunc 7418                      ?_PWM_Init 0001  
            __end_of_LockMotor 7AD4                        ??_delay 0003                        ??_frexp 0006  
                      ??_round 0060                        ??_trunc 004C                     __pbssBANK0 0098  
                      ?_getkey 0001                        _CCP1CON 000FBD                      ?___altoft 003F  
                    ?___awtoft 0009                      ?___ftpack 0001                      ?___lltoft 0009  
                   ??_PWM_Init 0001                      ?_delay_ms 0001                _motorlock_right 731E  
             ??_lcd_write_data 0002                     _lcd_strobe 6F5C                      ?_lcd_init 0001  
         __size_of_setPeriodTo 0380             lcd_write_data@data 0003             lcd_write_cmd@temp2 0004  
                      __Hparam 0000                        __Lparam 0000                        ___ftadd 7AD4  
                      ___ftdiv 76BC                        ___ftneg 6F7E                        ___ftmul 77A2  
                      ___fttol 7896                   __psmallconst 1004                     ??___altoft 0043  
              __size_of_getkey 0036                        __pcinit 707A                     ??___awtoft 000C  
                   ??___ftpack 0006                        __ramtop 0800                     ??___lltoft 000D  
                      __ptext0 6F3E                        __ptext1 798A                        __ptext2 731E  
                      __ptext3 7C80                        __ptext4 7418                        __ptext5 7396  
                      __ptext6 72A6                        __ptext7 722E                        __ptext8 6F7E  
                      __ptext9 70F0                      _T2CONbits 000FCA                     ??_delay_ms 0003  
                      _outchar 009C   setPeriodTo@TimerPrescaleBits 006E                     ??_lcd_init 0005  
        motorlock_right@Period 007F           end_of_initialization 70A6                  ??_clearScreen 0005  
                      postdec1 000FE5                        postdec2 000FDD  setPeriodTo@TimerPrescaleValue 0070  
                      postinc0 000FEE                        postinc2 000FDE                      _PORTAbits 000F80  
                    _PORTBbits 000F81                      _PORTCbits 000F82                      _PORTDbits 000F83  
      __end_of_motorlock_right 7396                      _TRISCbits 000F94           SetDutyCycleTo@Period 0063  
                  ?_lcd_strobe 0001                    ___ftdiv@exp 002E          __end_of_lcd_write_cmd 71BC  
                  ___ftmul@exp 001B            __end_of_clearScreen 70F0              setPeriodTo@period 0078  
               __end_of_getkey 700C              __size_of_PWM_Init 0008            start_initialization 707A  
                    _LockMotor 798A                     frexp@value 0001    SetDutyCycleTo@PWM10BitValue 006A  
                  __pdataBANK0 0083                       ??_getkey 0001            __size_of_lcd_strobe 0022  
      __size_of_SetDutyCycleTo 00D4               ?_motorlock_right 0001              __size_of___altoft 0078  
            __size_of___awtoft 0038              __size_of___ftpack 00AE              __size_of___lltoft 005C  
                __pcstackBANK0 0060                     ?_LockMotor 0001              __size_of_delay_ms 0034  
            __size_of_lcd_init 0072                    _clearScreen 70B4                       ?___ftadd 0054  
                     ?___ftdiv 0021                       ?___ftneg 0051                       ?___ftmul 0012  
                     ?___fttol 0030                    __smallconst 1004                  ??_setPeriodTo 006A  
               __size_of_delay 0036                 __size_of_frexp 0078                 __size_of_round 008E  
               __size_of_trunc 0082                      delay_ms@i 0001                      delay_ms@j 0004  
                     _PWM_Init 6F36                      lcd_init@i 0006            lcd_write_data@temp1 0004  
                 clearScreen@i 0005                    ??_LockMotor 0060                   ??_lcd_strobe 0001  
                    copy_data0 709A            __end_of_setPeriodTo 8000               _setPeriodTo$1220 006B  
                     _Message1 0083                      frexp@eptr 0004        __size_of_lcd_write_data 0094  
                     __Hrparam 0000                       __Lrparam 0000                   __Lsmallconst 1004  
             __size_of___ftadd 01AC                 _SetDutyCycleTo 75E8               __size_of___ftdiv 00E6  
             __size_of___ftneg 0024                       ___altoft 722E               __size_of___ftmul 00F4  
             __size_of___fttol 00F4             __end_of_lcd_strobe 6F7E                       ___awtoft 7042  
                     ___ftpack 753A                       ___lltoft 70F0                       _delay_ms 6FA2  
                     __ptext10 700C                       __ptext11 75E8                       __ptext20 6FD6  
                     __ptext12 7896                       __ptext21 6FA2                       __ptext13 77A2  
                     __ptext22 70B4                       __ptext14 76BC                       __ptext23 74A6  
                     __ptext15 7AD4                       __ptext24 714C                       __ptext16 7042  
                     __ptext25 6F5C                       __ptext17 753A                       __ptext18 6F36  
                     __ptext19 71BC                       _lcd_init 71BC                     trunc@expon 004F  
                __size_of_main 0008                       delay@val 0001         __end_of_SetDutyCycleTo 76BC  
              setPeriodTo@FOSC 0072                setPeriodTo@FPWM 0066         __size_of_lcd_write_cmd 0070  
                  _setPeriodTo 7C80            __end_ofgetkey@F4444 1017                   ?_clearScreen 0001  
              ?_SetDutyCycleTo 0060            _SetDutyCycleTo$1221 0067       __size_of_motorlock_right 0078  
               _lcd_write_data 74A6                  _lcd_write_cmd 714C  
