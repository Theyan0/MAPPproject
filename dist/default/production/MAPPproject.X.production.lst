

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 06 14:59:08 2024

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataBANK0
    34  0072CF                     __pidataBANK0:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _Message1
    38  0072CF  45                 	db	69
    39  0072D0  6E                 	db	110
    40  0072D1  74                 	db	116
    41  0072D2  65                 	db	101
    42  0072D3  72                 	db	114
    43  0072D4  20                 	db	32
    44  0072D5  50                 	db	80
    45  0072D6  49                 	db	73
    46  0072D7  4E                 	db	78
    47  0072D8  20                 	db	32
    48  0072D9  6E                 	db	110
    49  0072DA  75                 	db	117
    50  0072DB  6D                 	db	109
    51  0072DC  62                 	db	98
    52  0072DD  65                 	db	101
    53  0072DE  72                 	db	114
    54  0072DF  20                 	db	32
    55  0072E0  3A                 	db	58
    56  0072E1  20                 	db	32
    57  0072E2  20                 	db	32
    58  0072E3  00                 	db	0
    59                           
    60                           	psect	smallconst
    61  001004                     __psmallconst:
    62                           	opt stack 0
    63  001004  00                 	db	0
    64  001005                     getkey@F4444:
    65                           	opt stack 0
    66  001005  31                 	db	49
    67  001006  32                 	db	50
    68  001007  33                 	db	51
    69  001008  46                 	db	70
    70  001009  34                 	db	52
    71  00100A  35                 	db	53
    72  00100B  36                 	db	54
    73  00100C  45                 	db	69
    74  00100D  37                 	db	55
    75  00100E  38                 	db	56
    76  00100F  39                 	db	57
    77  001010  44                 	db	68
    78  001011  41                 	db	65
    79  001012  30                 	db	48
    80  001013  42                 	db	66
    81  001014  43                 	db	67
    82  001015  20                 	db	32
    83  001016  00                 	db	0
    84  001017                     __end_ofgetkey@F4444:
    85                           	opt stack 0
    86  0000                     _ADCON1	set	4033
    87  0000                     _CCP1CON	set	4029
    88  0000                     _CCP2CON	set	4026
    89  0000                     _CCPR1L	set	4030
    90  0000                     _CCPR2L	set	4027
    91  0000                     _OSCCON	set	4051
    92  0000                     _PORTAbits	set	3968
    93  0000                     _PORTB	set	3969
    94  0000                     _PORTBbits	set	3969
    95  0000                     _PORTCbits	set	3970
    96  0000                     _PORTD	set	3971
    97  0000                     _PORTDbits	set	3971
    98  0000                     _PR2	set	4043
    99  0000                     _T2CON	set	4042
   100  0000                     _T2CONbits	set	4042
   101  0000                     _TMR2	set	4044
   102  0000                     _TRISC	set	3988
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TRISD	set	3989
   105  0000                     _TRISA0	set	31888
   106  001017  00                 	db	0	; dummy byte at the end
   107  0000                     
   108                           ; #config settings
   109                           
   110                           	psect	cinit
   111  007376                     __pcinit:
   112                           	opt stack 0
   113  007376                     start_initialization:
   114                           	opt stack 0
   115  007376                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to BANK0 (9 bytes)
   119  007376  EE00  F096         	lfsr	0,__pbssBANK0
   120  00737A  0E09               	movlw	9
   121  00737C                     clear_0:
   122  00737C  6AEE               	clrf	postinc0,c
   123  00737E  06E8               	decf	wreg,f,c
   124  007380  E1FD               	bnz	clear_0
   125                           
   126                           ; Initialize objects allocated to BANK0 (21 bytes)
   127                           ; load TBLPTR registers with __pidataBANK0
   128  007382  0ECF               	movlw	low __pidataBANK0
   129  007384  6EF6               	movwf	tblptrl,c
   130  007386  0E72               	movlw	high __pidataBANK0
   131  007388  6EF7               	movwf	tblptrh,c
   132  00738A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   133  00738C  6EF8               	movwf	tblptru,c
   134  00738E  EE00  F081         	lfsr	0,__pdataBANK0
   135  007392  EE10 F015          	lfsr	1,21
   136  007396                     copy_data0:
   137  007396  0009               	tblrd		*+
   138  007398  CFF5 FFEE          	movff	tablat,postinc0
   139  00739C  50E5               	movf	postdec1,w,c
   140  00739E  50E1               	movf	fsr1l,w,c
   141  0073A0  E1FA               	bnz	copy_data0
   142  0073A2                     end_of_initialization:
   143                           	opt stack 0
   144  0073A2                     __end_of__initialization:
   145                           	opt stack 0
   146  0073A2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   147  0073A4  6EF8               	movwf	tblptru,c
   148  0073A6  0E10               	movlw	high __Lsmallconst
   149  0073A8  6EF7               	movwf	tblptrh,c
   150  0073AA  0100               	movlb	0
   151  0073AC  EF62  F039         	goto	_main	;jump to C main() function
   152                           tblptru	equ	0xFF8
   153                           tblptrh	equ	0xFF7
   154                           tblptrl	equ	0xFF6
   155                           tablat	equ	0xFF5
   156                           postinc0	equ	0xFEE
   157                           wreg	equ	0xFE8
   158                           postdec1	equ	0xFE5
   159                           fsr1l	equ	0xFE1
   160                           
   161                           	psect	bssBANK0
   162  000096                     __pbssBANK0:
   163                           	opt stack 0
   164  000096                     _errno:
   165                           	opt stack 0
   166  000096                     	ds	2
   167  000098                     _c:
   168                           	opt stack 0
   169  000098                     	ds	1
   170  000099                     _key:
   171                           	opt stack 0
   172  000099                     	ds	1
   173  00009A                     _outchar:
   174                           	opt stack 0
   175  00009A                     	ds	1
   176  00009B                     _p1:
   177                           	opt stack 0
   178  00009B                     	ds	1
   179  00009C                     _p2:
   180                           	opt stack 0
   181  00009C                     	ds	1
   182  00009D                     _p3:
   183                           	opt stack 0
   184  00009D                     	ds	1
   185  00009E                     _p4:
   186                           	opt stack 0
   187  00009E                     	ds	1
   188                           tblptru	equ	0xFF8
   189                           tblptrh	equ	0xFF7
   190                           tblptrl	equ	0xFF6
   191                           tablat	equ	0xFF5
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           postdec1	equ	0xFE5
   195                           fsr1l	equ	0xFE1
   196                           
   197                           	psect	dataBANK0
   198  000081                     __pdataBANK0:
   199                           	opt stack 0
   200  000081                     _Message1:
   201                           	opt stack 0
   202  000081                     	ds	21
   203                           tblptru	equ	0xFF8
   204                           tblptrh	equ	0xFF7
   205                           tblptrl	equ	0xFF6
   206                           tablat	equ	0xFF5
   207                           postinc0	equ	0xFEE
   208                           wreg	equ	0xFE8
   209                           postdec1	equ	0xFE5
   210                           fsr1l	equ	0xFE1
   211                           
   212                           	psect	cstackBANK0
   213  000060                     __pcstackBANK0:
   214                           	opt stack 0
   215  000060                     ?_round:
   216                           	opt stack 0
   217  000060                     doorSetDutyCycleTo@Duty_cycle:
   218                           	opt stack 0
   219  000060                     round@x:
   220                           	opt stack 0
   221                           
   222                           ; 3 bytes @ 0x0
   223  000060                     	ds	3
   224  000063                     doorSetDutyCycleTo@Period:
   225                           	opt stack 0
   226  000063                     round@f:
   227                           	opt stack 0
   228                           
   229                           ; 3 bytes @ 0x3
   230  000063                     	ds	2
   231  000065                     ??_doorSetDutyCycleTo:
   232                           
   233                           ; 0 bytes @ 0x5
   234  000065                     	ds	1
   235  000066                     ?_setPeriodTo:
   236                           	opt stack 0
   237  000066                     setPeriodTo@FPWM:
   238                           	opt stack 0
   239                           
   240                           ; 4 bytes @ 0x6
   241  000066                     	ds	1
   242  000067                     _doorSetDutyCycleTo$1246:
   243                           	opt stack 0
   244                           
   245                           ; 3 bytes @ 0x7
   246  000067                     	ds	3
   247  00006A                     ??_setPeriodTo:
   248  00006A                     doorSetDutyCycleTo@PWM10BitValue:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0xA
   252  00006A                     	ds	1
   253  00006B                     _setPeriodTo$1244:
   254                           	opt stack 0
   255                           
   256                           ; 3 bytes @ 0xB
   257  00006B                     	ds	3
   258  00006E                     setPeriodTo@TimerPrescaleBits:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0xE
   262  00006E                     	ds	2
   263  000070                     setPeriodTo@TimerPrescaleValue:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x10
   267  000070                     	ds	2
   268  000072                     setPeriodTo@FOSC:
   269                           	opt stack 0
   270                           
   271                           ; 4 bytes @ 0x12
   272  000072                     	ds	4
   273  000076                     setPeriodTo@clockSelectBits:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0x16
   277  000076                     	ds	2
   278  000078                     setPeriodTo@period:
   279                           	opt stack 0
   280                           
   281                           ; 3 bytes @ 0x18
   282  000078                     	ds	3
   283  00007B                     setPeriodTo@_resolution:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0x1B
   287  00007B                     	ds	4
   288  00007F                     motordoor_right@Period:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x1F
   292  00007F                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           postdec1	equ	0xFE5
   300                           fsr1l	equ	0xFE1
   301                           
   302                           	psect	cstackCOMRAM
   303  000001                     __pcstackCOMRAM:
   304                           	opt stack 0
   305  000001                     ?___ftpack:
   306                           	opt stack 0
   307  000001                     delay@val:
   308                           	opt stack 0
   309  000001                     ___ftpack@arg:
   310                           	opt stack 0
   311  000001                     frexp@value:
   312                           	opt stack 0
   313                           
   314                           ; 3 bytes @ 0x0
   315  000001                     	ds	2
   316  000003                     delay@i:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x2
   320  000003                     	ds	1
   321  000004                     ___ftpack@exp:
   322                           	opt stack 0
   323  000004                     frexp@eptr:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x3
   327  000004                     	ds	1
   328  000005                     ___ftpack@sign:
   329                           	opt stack 0
   330  000005                     delay@j:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x4
   334  000005                     	ds	1
   335  000006                     ??___ftpack:
   336  000006                     ??_frexp:
   337                           
   338                           ; 0 bytes @ 0x5
   339  000006                     	ds	3
   340  000009                     ?___awtoft:
   341                           	opt stack 0
   342  000009                     ?___lltoft:
   343                           	opt stack 0
   344  000009                     ___awtoft@c:
   345                           	opt stack 0
   346  000009                     ___lltoft@c:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0x8
   350  000009                     	ds	3
   351  00000C                     ___awtoft@sign:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0xB
   355  00000C                     	ds	1
   356  00000D                     ??___lltoft:
   357                           
   358                           ; 0 bytes @ 0xC
   359  00000D                     	ds	4
   360  000011                     ___lltoft@exp:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x10
   364  000011                     	ds	1
   365  000012                     ?___ftmul:
   366                           	opt stack 0
   367  000012                     ___ftmul@f1:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0x11
   371  000012                     	ds	3
   372  000015                     ___ftmul@f2:
   373                           	opt stack 0
   374                           
   375                           ; 3 bytes @ 0x14
   376  000015                     	ds	3
   377  000018                     ??___ftmul:
   378                           
   379                           ; 0 bytes @ 0x17
   380  000018                     	ds	3
   381  00001B                     ___ftmul@exp:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x1A
   385  00001B                     	ds	1
   386  00001C                     ___ftmul@f3_as_product:
   387                           	opt stack 0
   388                           
   389                           ; 3 bytes @ 0x1B
   390  00001C                     	ds	3
   391  00001F                     ___ftmul@cntr:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x1E
   395  00001F                     	ds	1
   396  000020                     ___ftmul@sign:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x1F
   400  000020                     	ds	1
   401  000021                     ?___ftdiv:
   402                           	opt stack 0
   403  000021                     ___ftdiv@f1:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0x20
   407  000021                     	ds	3
   408  000024                     ___ftdiv@f2:
   409                           	opt stack 0
   410                           
   411                           ; 3 bytes @ 0x23
   412  000024                     	ds	3
   413  000027                     ??___ftdiv:
   414                           
   415                           ; 0 bytes @ 0x26
   416  000027                     	ds	3
   417  00002A                     ___ftdiv@cntr:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x29
   421  00002A                     	ds	1
   422  00002B                     ___ftdiv@f3:
   423                           	opt stack 0
   424                           
   425                           ; 3 bytes @ 0x2A
   426  00002B                     	ds	3
   427  00002E                     ___ftdiv@exp:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x2D
   431  00002E                     	ds	1
   432  00002F                     ___ftdiv@sign:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x2E
   436  00002F                     	ds	1
   437  000030                     ?___fttol:
   438                           	opt stack 0
   439  000030                     ___fttol@f1:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x2F
   443  000030                     	ds	4
   444  000034                     ??___fttol:
   445                           
   446                           ; 0 bytes @ 0x33
   447  000034                     	ds	5
   448  000039                     ___fttol@sign1:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x38
   452  000039                     	ds	1
   453  00003A                     ___fttol@lval:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0x39
   457  00003A                     	ds	4
   458  00003E                     ___fttol@exp1:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x3D
   462  00003E                     	ds	1
   463  00003F                     ?___altoft:
   464                           	opt stack 0
   465  00003F                     ___altoft@c:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x3E
   469  00003F                     	ds	4
   470  000043                     ??___altoft:
   471                           
   472                           ; 0 bytes @ 0x42
   473  000043                     	ds	4
   474  000047                     ___altoft@exp:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x46
   478  000047                     	ds	1
   479  000048                     ___altoft@sign:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x47
   483  000048                     	ds	1
   484  000049                     ?_trunc:
   485                           	opt stack 0
   486  000049                     trunc@x:
   487                           	opt stack 0
   488                           
   489                           ; 3 bytes @ 0x48
   490  000049                     	ds	3
   491  00004C                     trunc@i:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0x4B
   495  00004C                     	ds	3
   496  00004F                     trunc@expon:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x4E
   500  00004F                     	ds	2
   501  000051                     ?___ftneg:
   502                           	opt stack 0
   503  000051                     ___ftneg@f1:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0x50
   507  000051                     	ds	3
   508  000054                     ?___ftadd:
   509                           	opt stack 0
   510  000054                     ___ftadd@f1:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x53
   514  000054                     	ds	3
   515  000057                     ___ftadd@f2:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x56
   519  000057                     	ds	3
   520  00005A                     ??___ftadd:
   521                           
   522                           ; 0 bytes @ 0x59
   523  00005A                     	ds	3
   524  00005D                     ___ftadd@sign:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x5C
   528  00005D                     	ds	1
   529  00005E                     ___ftadd@exp2:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x5D
   533  00005E                     	ds	1
   534  00005F                     ___ftadd@exp1:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x5E
   538  00005F                     	ds	1
   539  000060                     tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           ; 0 bytes @ 0x5F
   549 ;;
   550 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   551 ;;
   552 ;; *************** function _main *****************
   553 ;; Defined at:
   554 ;;		line 7 in file "newmain.c"
   555 ;; Parameters:    Size  Location     Type
   556 ;;		None
   557 ;; Auto vars:     Size  Location     Type
   558 ;;		None
   559 ;; Return value:  Size  Location     Type
   560 ;;		None               void
   561 ;; Registers used:
   562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   568 ;;      Params:         0       0       0       0       0       0       0       0       0
   569 ;;      Locals:         0       0       0       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0
   571 ;;      Totals:         0       0       0       0       0       0       0       0       0
   572 ;;Total ram usage:        0 bytes
   573 ;; Hardware stack levels required when called:    6
   574 ;; This function calls:
   575 ;;		_motordoor_right
   576 ;; This function is called by:
   577 ;;		Startup code after reset
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text0
   582  0072C4                     __ptext0:
   583                           	opt stack 0
   584  0072C4                     _main:
   585                           	opt stack 25
   586                           
   587                           ;newmain.c: 8: TRISC = 0b00000010;
   588                           
   589                           ;incstack = 0
   590  0072C4  0E02               	movlw	2
   591  0072C6  6E94               	movwf	3988,c	;volatile
   592  0072C8                     l2201:
   593                           
   594                           ;newmain.c: 11: motordoor_right();
   595  0072C8  EC7E  F03A         	call	_motordoor_right	;wreg free
   596  0072CC  D7FD               	goto	l2201
   597  0072CE                     __end_of_main:
   598                           	opt stack 0
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608 ;; *************** function _motordoor_right *****************
   609 ;; Defined at:
   610 ;;		line 114 in file "MotorFunction.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  Period          2   31[BANK0 ] int 
   615 ;; Return value:  Size  Location     Type
   616 ;;                  2    4[None  ] int 
   617 ;; Registers used:
   618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   624 ;;      Params:         0       0       0       0       0       0       0       0       0
   625 ;;      Locals:         0       2       0       0       0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0       0       0       0       0
   627 ;;      Totals:         0       2       0       0       0       0       0       0       0
   628 ;;Total ram usage:        2 bytes
   629 ;; Hardware stack levels used:    1
   630 ;; Hardware stack levels required when called:    5
   631 ;; This function calls:
   632 ;;		_PWMdoor_Init
   633 ;;		_delay
   634 ;;		_doorSetDutyCycleTo
   635 ;;		_setPeriodTo
   636 ;; This function is called by:
   637 ;;		_main
   638 ;; This function uses a non-reentrant model
   639 ;;
   640                           
   641                           	psect	text1
   642  0074FC                     __ptext1:
   643                           	opt stack 0
   644  0074FC                     _motordoor_right:
   645                           	opt stack 25
   646                           
   647                           ;MotorFunction.c: 115: int Period;
   648                           ;MotorFunction.c: 116: PWMdoor_Init();
   649                           
   650                           ;incstack = 0
   651  0074FC  EC5E  F039         	call	_PWMdoor_Init	;wreg free
   652                           
   653                           ;MotorFunction.c: 117: Period = setPeriodTo(50);
   654  007500  0E32               	movlw	50
   655  007502  0100               	movlb	0	; () banked
   656  007504  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
   657  007506  0E00               	movlw	0
   658  007508  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
   659  00750A  0E00               	movlw	0
   660  00750C  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
   661  00750E  0E00               	movlw	0
   662  007510  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
   663  007512  EC40  F03E         	call	_setPeriodTo	;wreg free
   664  007516  C066  F07F         	movff	?_setPeriodTo,motordoor_right@Period
   665  00751A  C067  F080         	movff	?_setPeriodTo+1,motordoor_right@Period+1
   666                           
   667                           ;MotorFunction.c: 118: doorSetDutyCycleTo(3.0, Period);
   668  00751E  0E00               	movlw	0
   669  007520  0100               	movlb	0	; () banked
   670  007522  6F60               	movwf	doorSetDutyCycleTo@Duty_cycle& (0+255),b
   671  007524  0E40               	movlw	64
   672  007526  0100               	movlb	0	; () banked
   673  007528  6F61               	movwf	(doorSetDutyCycleTo@Duty_cycle+1)& (0+255),b
   674  00752A  0E40               	movlw	64
   675  00752C  0100               	movlb	0	; () banked
   676  00752E  6F62               	movwf	(doorSetDutyCycleTo@Duty_cycle+2)& (0+255),b
   677  007530  C07F  F063         	movff	motordoor_right@Period,doorSetDutyCycleTo@Period
   678  007534  C080  F064         	movff	motordoor_right@Period+1,doorSetDutyCycleTo@Period+1
   679  007538  EC99  F03B         	call	_doorSetDutyCycleTo	;wreg free
   680                           
   681                           ;MotorFunction.c: 119: delay(1000);
   682  00753C  0E03               	movlw	3
   683  00753E  6E02               	movwf	delay@val+1,c
   684  007540  0EE8               	movlw	232
   685  007542  6E01               	movwf	delay@val,c
   686  007544  EC84  F039         	call	_delay	;wreg free
   687                           
   688                           ;MotorFunction.c: 120: doorSetDutyCycleTo(7.0, Period);
   689  007548  0E00               	movlw	0
   690  00754A  0100               	movlb	0	; () banked
   691  00754C  6F60               	movwf	doorSetDutyCycleTo@Duty_cycle& (0+255),b
   692  00754E  0EE0               	movlw	224
   693  007550  0100               	movlb	0	; () banked
   694  007552  6F61               	movwf	(doorSetDutyCycleTo@Duty_cycle+1)& (0+255),b
   695  007554  0E40               	movlw	64
   696  007556  0100               	movlb	0	; () banked
   697  007558  6F62               	movwf	(doorSetDutyCycleTo@Duty_cycle+2)& (0+255),b
   698  00755A  C07F  F063         	movff	motordoor_right@Period,doorSetDutyCycleTo@Period
   699  00755E  C080  F064         	movff	motordoor_right@Period+1,doorSetDutyCycleTo@Period+1
   700  007562  EC99  F03B         	call	_doorSetDutyCycleTo	;wreg free
   701                           
   702                           ;MotorFunction.c: 121: delay(1000);
   703  007566  0E03               	movlw	3
   704  007568  6E02               	movwf	delay@val+1,c
   705  00756A  0EE8               	movlw	232
   706  00756C  6E01               	movwf	delay@val,c
   707  00756E  EC84  F039         	call	_delay	;wreg free
   708  007572  0012               	return		;funcret
   709  007574                     __end_of_motordoor_right:
   710                           	opt stack 0
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           
   720 ;; *************** function _setPeriodTo *****************
   721 ;; Defined at:
   722 ;;		line 32 in file "MotorFunction.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  FPWM            4    6[BANK0 ] unsigned long 
   725 ;; Auto vars:     Size  Location     Type
   726 ;;  _resolution     4   27[BANK0 ] unsigned long 
   727 ;;  FOSC            4   18[BANK0 ] unsigned long 
   728 ;;  period          3   24[BANK0 ] float 
   729 ;;  clockSelectB    2   22[BANK0 ] int 
   730 ;;  TimerPrescal    2   16[BANK0 ] int 
   731 ;;  TimerPrescal    2   14[BANK0 ] int 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  2    6[BANK0 ] int 
   734 ;; Registers used:
   735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   741 ;;      Params:         0       4       0       0       0       0       0       0       0
   742 ;;      Locals:         0      20       0       0       0       0       0       0       0
   743 ;;      Temps:          0       1       0       0       0       0       0       0       0
   744 ;;      Totals:         0      25       0       0       0       0       0       0       0
   745 ;;Total ram usage:       25 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    4
   748 ;; This function calls:
   749 ;;		___awtoft
   750 ;;		___ftadd
   751 ;;		___ftdiv
   752 ;;		___ftmul
   753 ;;		___fttol
   754 ;;		___lltoft
   755 ;;		_round
   756 ;; This function is called by:
   757 ;;		_motordoor_right
   758 ;;		_motor_init
   759 ;;		_motorlock_right
   760 ;;		_motorlock_left
   761 ;;		_motordoor_left
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text2
   766  007C80                     __ptext2:
   767                           	opt stack 0
   768  007C80                     _setPeriodTo:
   769                           	opt stack 25
   770                           
   771                           ;MotorFunction.c: 34: int clockSelectBits, TimerPrescaleBits;
   772                           ;MotorFunction.c: 35: int TimerPrescaleValue;
   773                           ;MotorFunction.c: 36: float period;
   774                           ;MotorFunction.c: 37: unsigned long FOSC, _resolution = 488;
   775                           
   776                           ;incstack = 0
   777  007C80  0EE8               	movlw	232
   778  007C82  0100               	movlb	0	; () banked
   779  007C84  6F7B               	movwf	setPeriodTo@_resolution& (0+255),b
   780  007C86  0E01               	movlw	1
   781  007C88  6F7C               	movwf	(setPeriodTo@_resolution+1)& (0+255),b
   782  007C8A  0E00               	movlw	0
   783  007C8C  6F7D               	movwf	(setPeriodTo@_resolution+2)& (0+255),b
   784  007C8E  0E00               	movlw	0
   785  007C90  6F7E               	movwf	(setPeriodTo@_resolution+3)& (0+255),b
   786                           
   787                           ; BSR set to: 0
   788                           ;MotorFunction.c: 39: if (FPWM < 8000) {TimerPrescaleBits = 2; TimerPrescaleValue = 16;}
   789  007C92  0100               	movlb	0	; () banked
   790  007C94  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
   791  007C96  0100               	movlb	0	; () banked
   792  007C98  1168               	iorwf	(setPeriodTo@FPWM+2)& (0+255),w,b
   793  007C9A  E112               	bnz	l2055
   794  007C9C  0E40               	movlw	64
   795  007C9E  0100               	movlb	0	; () banked
   796  007CA0  5D66               	subwf	setPeriodTo@FPWM& (0+255),w,b
   797  007CA2  0E1F               	movlw	31
   798  007CA4  0100               	movlb	0	; () banked
   799  007CA6  5967               	subwfb	(setPeriodTo@FPWM+1)& (0+255),w,b
   800  007CA8  B0D8               	btfsc	status,0,c
   801  007CAA  D00A               	goto	l2055
   802                           
   803                           ; BSR set to: 0
   804  007CAC  0E00               	movlw	0
   805  007CAE  0100               	movlb	0	; () banked
   806  007CB0  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
   807  007CB2  0E02               	movlw	2
   808  007CB4  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
   809  007CB6  0E00               	movlw	0
   810  007CB8  0100               	movlb	0	; () banked
   811  007CBA  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
   812  007CBC  0E10               	movlw	16
   813  007CBE  D009               	goto	L1
   814  007CC0                     l2055:
   815                           
   816                           ; BSR set to: 0
   817                           ;MotorFunction.c: 40: else {TimerPrescaleBits = 0; TimerPrescaleValue = 1;}
   818  007CC0  0E00               	movlw	0
   819  007CC2  0100               	movlb	0	; () banked
   820  007CC4  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
   821  007CC6  0E00               	movlw	0
   822  007CC8  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
   823  007CCA  0E00               	movlw	0
   824  007CCC  0100               	movlb	0	; () banked
   825  007CCE  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
   826  007CD0  0E01               	movlw	1
   827  007CD2                     L1:
   828  007CD2  6F70               	movwf	setPeriodTo@TimerPrescaleValue& (0+255),b
   829                           
   830                           ; BSR set to: 0
   831                           ;MotorFunction.c: 42: if (FPWM > _resolution) {clockSelectBits = 7; FOSC = 8000000;}
   832                           
   833                           ; BSR set to: 0
   834  007CD4  0100               	movlb	0	; () banked
   835  007CD6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
   836  007CD8  0100               	movlb	0	; () banked
   837  007CDA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
   838  007CDC  0100               	movlb	0	; () banked
   839  007CDE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
   840  007CE0  0100               	movlb	0	; () banked
   841  007CE2  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
   842  007CE4  0100               	movlb	0	; () banked
   843  007CE6  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
   844  007CE8  0100               	movlb	0	; () banked
   845  007CEA  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
   846  007CEC  0100               	movlb	0	; () banked
   847  007CEE  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
   848  007CF0  0100               	movlb	0	; () banked
   849  007CF2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
   850  007CF4  B0D8               	btfsc	status,0,c
   851  007CF6  D00C               	goto	l2061
   852                           
   853                           ; BSR set to: 0
   854  007CF8  0E00               	movlw	0
   855  007CFA  0100               	movlb	0	; () banked
   856  007CFC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
   857  007CFE  0E07               	movlw	7
   858  007D00  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
   859  007D02  0E00               	movlw	0
   860  007D04  0100               	movlb	0	; () banked
   861  007D06  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
   862  007D08  0E12               	movlw	18
   863  007D0A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
   864  007D0C  0E7A               	movlw	122
   865  007D0E  D0E3               	goto	L8
   866  007D10                     l2061:
   867                           
   868                           ; BSR set to: 0
   869                           ;MotorFunction.c: 43: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 6; FOSC = 
      +                          4000000;}
   870  007D10  0100               	movlb	0	; () banked
   871  007D12  90D8               	bcf	status,0,c
   872  007D14  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
   873  007D16  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
   874  007D18  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
   875  007D1A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
   876  007D1C  0100               	movlb	0	; () banked
   877  007D1E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
   878  007D20  0100               	movlb	0	; () banked
   879  007D22  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
   880  007D24  0100               	movlb	0	; () banked
   881  007D26  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
   882  007D28  0100               	movlb	0	; () banked
   883  007D2A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
   884  007D2C  0100               	movlb	0	; () banked
   885  007D2E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
   886  007D30  0100               	movlb	0	; () banked
   887  007D32  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
   888  007D34  0100               	movlb	0	; () banked
   889  007D36  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
   890  007D38  0100               	movlb	0	; () banked
   891  007D3A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
   892  007D3C  B0D8               	btfsc	status,0,c
   893  007D3E  D00C               	goto	l2065
   894                           
   895                           ; BSR set to: 0
   896  007D40  0E00               	movlw	0
   897  007D42  0100               	movlb	0	; () banked
   898  007D44  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
   899  007D46  0E06               	movlw	6
   900  007D48  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
   901  007D4A  0E00               	movlw	0
   902  007D4C  0100               	movlb	0	; () banked
   903  007D4E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
   904  007D50  0E09               	movlw	9
   905  007D52  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
   906  007D54  0E3D               	movlw	61
   907  007D56  D0BF               	goto	L8
   908  007D58                     l2065:
   909                           
   910                           ; BSR set to: 0
   911                           ;MotorFunction.c: 44: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 5; FOSC = 
      +                          2000000;}
   912  007D58  0100               	movlb	0	; () banked
   913  007D5A  90D8               	bcf	status,0,c
   914  007D5C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
   915  007D5E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
   916  007D60  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
   917  007D62  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
   918  007D64  0100               	movlb	0	; () banked
   919  007D66  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
   920  007D68  0100               	movlb	0	; () banked
   921  007D6A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
   922  007D6C  0100               	movlb	0	; () banked
   923  007D6E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
   924  007D70  0100               	movlb	0	; () banked
   925  007D72  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
   926  007D74  0100               	movlb	0	; () banked
   927  007D76  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
   928  007D78  0100               	movlb	0	; () banked
   929  007D7A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
   930  007D7C  0100               	movlb	0	; () banked
   931  007D7E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
   932  007D80  0100               	movlb	0	; () banked
   933  007D82  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
   934  007D84  B0D8               	btfsc	status,0,c
   935  007D86  D00C               	goto	l2069
   936                           
   937                           ; BSR set to: 0
   938  007D88  0E00               	movlw	0
   939  007D8A  0100               	movlb	0	; () banked
   940  007D8C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
   941  007D8E  0E05               	movlw	5
   942  007D90  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
   943  007D92  0E80               	movlw	128
   944  007D94  0100               	movlb	0	; () banked
   945  007D96  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
   946  007D98  0E84               	movlw	132
   947  007D9A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
   948  007D9C  0E1E               	movlw	30
   949  007D9E  D09B               	goto	L8
   950  007DA0                     l2069:
   951                           
   952                           ; BSR set to: 0
   953                           ;MotorFunction.c: 45: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 4; FOSC = 
      +                          1000000;}
   954  007DA0  0100               	movlb	0	; () banked
   955  007DA2  90D8               	bcf	status,0,c
   956  007DA4  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
   957  007DA6  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
   958  007DA8  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
   959  007DAA  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
   960  007DAC  0100               	movlb	0	; () banked
   961  007DAE  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
   962  007DB0  0100               	movlb	0	; () banked
   963  007DB2  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
   964  007DB4  0100               	movlb	0	; () banked
   965  007DB6  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
   966  007DB8  0100               	movlb	0	; () banked
   967  007DBA  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
   968  007DBC  0100               	movlb	0	; () banked
   969  007DBE  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
   970  007DC0  0100               	movlb	0	; () banked
   971  007DC2  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
   972  007DC4  0100               	movlb	0	; () banked
   973  007DC6  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
   974  007DC8  0100               	movlb	0	; () banked
   975  007DCA  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
   976  007DCC  B0D8               	btfsc	status,0,c
   977  007DCE  D00C               	goto	l2073
   978                           
   979                           ; BSR set to: 0
   980  007DD0  0E00               	movlw	0
   981  007DD2  0100               	movlb	0	; () banked
   982  007DD4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
   983  007DD6  0E04               	movlw	4
   984  007DD8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
   985  007DDA  0E40               	movlw	64
   986  007DDC  0100               	movlb	0	; () banked
   987  007DDE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
   988  007DE0  0E42               	movlw	66
   989  007DE2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
   990  007DE4  0E0F               	movlw	15
   991  007DE6  D077               	goto	L8
   992  007DE8                     l2073:
   993                           
   994                           ; BSR set to: 0
   995                           ;MotorFunction.c: 46: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 3; FOSC = 
      +                          500000;}
   996  007DE8  0100               	movlb	0	; () banked
   997  007DEA  90D8               	bcf	status,0,c
   998  007DEC  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
   999  007DEE  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1000  007DF0  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1001  007DF2  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1002  007DF4  0100               	movlb	0	; () banked
  1003  007DF6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1004  007DF8  0100               	movlb	0	; () banked
  1005  007DFA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1006  007DFC  0100               	movlb	0	; () banked
  1007  007DFE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1008  007E00  0100               	movlb	0	; () banked
  1009  007E02  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1010  007E04  0100               	movlb	0	; () banked
  1011  007E06  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1012  007E08  0100               	movlb	0	; () banked
  1013  007E0A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1014  007E0C  0100               	movlb	0	; () banked
  1015  007E0E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1016  007E10  0100               	movlb	0	; () banked
  1017  007E12  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1018  007E14  B0D8               	btfsc	status,0,c
  1019  007E16  D00C               	goto	l2077
  1020                           
  1021                           ; BSR set to: 0
  1022  007E18  0E00               	movlw	0
  1023  007E1A  0100               	movlb	0	; () banked
  1024  007E1C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1025  007E1E  0E03               	movlw	3
  1026  007E20  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1027  007E22  0E20               	movlw	32
  1028  007E24  0100               	movlb	0	; () banked
  1029  007E26  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1030  007E28  0EA1               	movlw	161
  1031  007E2A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1032  007E2C  0E07               	movlw	7
  1033  007E2E  D053               	goto	L8
  1034  007E30                     l2077:
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;MotorFunction.c: 47: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 2; FOSC = 
      +                          250000;}
  1038  007E30  0100               	movlb	0	; () banked
  1039  007E32  90D8               	bcf	status,0,c
  1040  007E34  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1041  007E36  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1042  007E38  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1043  007E3A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1044  007E3C  0100               	movlb	0	; () banked
  1045  007E3E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1046  007E40  0100               	movlb	0	; () banked
  1047  007E42  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1048  007E44  0100               	movlb	0	; () banked
  1049  007E46  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1050  007E48  0100               	movlb	0	; () banked
  1051  007E4A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1052  007E4C  0100               	movlb	0	; () banked
  1053  007E4E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1054  007E50  0100               	movlb	0	; () banked
  1055  007E52  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1056  007E54  0100               	movlb	0	; () banked
  1057  007E56  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1058  007E58  0100               	movlb	0	; () banked
  1059  007E5A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1060  007E5C  B0D8               	btfsc	status,0,c
  1061  007E5E  D00C               	goto	l2081
  1062                           
  1063                           ; BSR set to: 0
  1064  007E60  0E00               	movlw	0
  1065  007E62  0100               	movlb	0	; () banked
  1066  007E64  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1067  007E66  0E02               	movlw	2
  1068  007E68  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1069  007E6A  0E90               	movlw	144
  1070  007E6C  0100               	movlb	0	; () banked
  1071  007E6E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1072  007E70  0ED0               	movlw	208
  1073  007E72  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1074  007E74  0E03               	movlw	3
  1075  007E76  D02F               	goto	L8
  1076  007E78                     l2081:
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;MotorFunction.c: 48: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 1; FOSC = 
      +                          125000;}
  1080  007E78  0100               	movlb	0	; () banked
  1081  007E7A  90D8               	bcf	status,0,c
  1082  007E7C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1083  007E7E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1084  007E80  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1085  007E82  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1086  007E84  0100               	movlb	0	; () banked
  1087  007E86  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1088  007E88  0100               	movlb	0	; () banked
  1089  007E8A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1090  007E8C  0100               	movlb	0	; () banked
  1091  007E8E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1092  007E90  0100               	movlb	0	; () banked
  1093  007E92  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1094  007E94  0100               	movlb	0	; () banked
  1095  007E96  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1096  007E98  0100               	movlb	0	; () banked
  1097  007E9A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1098  007E9C  0100               	movlb	0	; () banked
  1099  007E9E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1100  007EA0  0100               	movlb	0	; () banked
  1101  007EA2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1102  007EA4  B0D8               	btfsc	status,0,c
  1103  007EA6  D00C               	goto	l2085
  1104                           
  1105                           ; BSR set to: 0
  1106  007EA8  0E00               	movlw	0
  1107  007EAA  0100               	movlb	0	; () banked
  1108  007EAC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1109  007EAE  0E01               	movlw	1
  1110  007EB0  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1111  007EB2  0E48               	movlw	72
  1112  007EB4  0100               	movlb	0	; () banked
  1113  007EB6  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1114  007EB8  0EE8               	movlw	232
  1115  007EBA  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1116  007EBC  0E01               	movlw	1
  1117  007EBE  D00B               	goto	L8
  1118  007EC0                     l2085:
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;MotorFunction.c: 49: else {clockSelectBits = 0; FOSC = 31000;}
  1122  007EC0  0E00               	movlw	0
  1123  007EC2  0100               	movlb	0	; () banked
  1124  007EC4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1125  007EC6  0E00               	movlw	0
  1126  007EC8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1127  007ECA  0E18               	movlw	24
  1128  007ECC  0100               	movlb	0	; () banked
  1129  007ECE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1130  007ED0  0E79               	movlw	121
  1131  007ED2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1132  007ED4  0E00               	movlw	0
  1133  007ED6                     L8:
  1134  007ED6  6F74               	movwf	(setPeriodTo@FOSC+2)& (0+255),b
  1135  007ED8  0E00               	movlw	0
  1136  007EDA  6F75               	movwf	(setPeriodTo@FOSC+3)& (0+255),b
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  1140                           
  1141                           ; BSR set to: 0
  1142                           
  1143                           ; BSR set to: 0
  1144                           
  1145                           ; BSR set to: 0
  1146                           
  1147                           ; BSR set to: 0
  1148                           
  1149                           ; BSR set to: 0
  1150                           
  1151                           ; BSR set to: 0
  1152                           
  1153                           ; BSR set to: 0
  1154  007EDC  C066  F009         	movff	setPeriodTo@FPWM,___lltoft@c
  1155  007EE0  C067  F00A         	movff	setPeriodTo@FPWM+1,___lltoft@c+1
  1156  007EE4  C068  F00B         	movff	setPeriodTo@FPWM+2,___lltoft@c+2
  1157  007EE8  C069  F00C         	movff	setPeriodTo@FPWM+3,___lltoft@c+3
  1158  007EEC  ECD8  F039         	call	___lltoft	;wreg free
  1159  007EF0  C009  F015         	movff	?___lltoft,___ftmul@f2
  1160  007EF4  C00A  F016         	movff	?___lltoft+1,___ftmul@f2+1
  1161  007EF8  C00B  F017         	movff	?___lltoft+2,___ftmul@f2+2
  1162  007EFC  C070  F009         	movff	setPeriodTo@TimerPrescaleValue,___awtoft@c
  1163  007F00  C071  F00A         	movff	setPeriodTo@TimerPrescaleValue+1,___awtoft@c+1
  1164  007F04  EC9F  F039         	call	___awtoft	;wreg free
  1165  007F08  C009  F012         	movff	?___awtoft,___ftmul@f1
  1166  007F0C  C00A  F013         	movff	?___awtoft+1,___ftmul@f1+1
  1167  007F10  C00B  F014         	movff	?___awtoft+2,___ftmul@f1+2
  1168  007F14  EC76  F03C         	call	___ftmul	;wreg free
  1169  007F18  C012  F06B         	movff	?___ftmul,_setPeriodTo$1244
  1170  007F1C  C013  F06C         	movff	?___ftmul+1,_setPeriodTo$1244+1
  1171  007F20  C014  F06D         	movff	?___ftmul+2,_setPeriodTo$1244+2
  1172                           
  1173                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  1174  007F24  0E00               	movlw	0
  1175  007F26  6E15               	movwf	___ftmul@f2,c
  1176  007F28  0E80               	movlw	128
  1177  007F2A  6E16               	movwf	___ftmul@f2+1,c
  1178  007F2C  0E40               	movlw	64
  1179  007F2E  6E17               	movwf	___ftmul@f2+2,c
  1180  007F30  C06B  F012         	movff	_setPeriodTo$1244,___ftmul@f1
  1181  007F34  C06C  F013         	movff	_setPeriodTo$1244+1,___ftmul@f1+1
  1182  007F38  C06D  F014         	movff	_setPeriodTo$1244+2,___ftmul@f1+2
  1183  007F3C  EC76  F03C         	call	___ftmul	;wreg free
  1184  007F40  C012  F024         	movff	?___ftmul,___ftdiv@f2
  1185  007F44  C013  F025         	movff	?___ftmul+1,___ftdiv@f2+1
  1186  007F48  C014  F026         	movff	?___ftmul+2,___ftdiv@f2+2
  1187  007F4C  C072  F009         	movff	setPeriodTo@FOSC,___lltoft@c
  1188  007F50  C073  F00A         	movff	setPeriodTo@FOSC+1,___lltoft@c+1
  1189  007F54  C074  F00B         	movff	setPeriodTo@FOSC+2,___lltoft@c+2
  1190  007F58  C075  F00C         	movff	setPeriodTo@FOSC+3,___lltoft@c+3
  1191  007F5C  ECD8  F039         	call	___lltoft	;wreg free
  1192  007F60  C009  F021         	movff	?___lltoft,___ftdiv@f1
  1193  007F64  C00A  F022         	movff	?___lltoft+1,___ftdiv@f1+1
  1194  007F68  C00B  F023         	movff	?___lltoft+2,___ftdiv@f1+2
  1195  007F6C  EC03  F03C         	call	___ftdiv	;wreg free
  1196  007F70  C021  F054         	movff	?___ftdiv,___ftadd@f1
  1197  007F74  C022  F055         	movff	?___ftdiv+1,___ftadd@f1+1
  1198  007F78  C023  F056         	movff	?___ftdiv+2,___ftadd@f1+2
  1199  007F7C  0E00               	movlw	0
  1200  007F7E  6E57               	movwf	___ftadd@f2,c
  1201  007F80  0E80               	movlw	128
  1202  007F82  6E58               	movwf	___ftadd@f2+1,c
  1203  007F84  0EBF               	movlw	191
  1204  007F86  6E59               	movwf	___ftadd@f2+2,c
  1205  007F88  EC6A  F03D         	call	___ftadd	;wreg free
  1206  007F8C  C054  F078         	movff	?___ftadd,setPeriodTo@period
  1207  007F90  C055  F079         	movff	?___ftadd+1,setPeriodTo@period+1
  1208  007F94  C056  F07A         	movff	?___ftadd+2,setPeriodTo@period+2
  1209                           
  1210                           ;MotorFunction.c: 52: period = round(period);
  1211  007F98  C078  F060         	movff	setPeriodTo@period,round@x
  1212  007F9C  C079  F061         	movff	setPeriodTo@period+1,round@x+1
  1213  007FA0  C07A  F062         	movff	setPeriodTo@period+2,round@x+2
  1214  007FA4  ECFB  F03A         	call	_round	;wreg free
  1215  007FA8  C060  F078         	movff	?_round,setPeriodTo@period
  1216  007FAC  C061  F079         	movff	?_round+1,setPeriodTo@period+1
  1217  007FB0  C062  F07A         	movff	?_round+2,setPeriodTo@period+2
  1218                           
  1219                           ;MotorFunction.c: 54: OSCCON = ((clockSelectBits & 0x07) << 4) | 0x02;
  1220  007FB4  C076  F06A         	movff	setPeriodTo@clockSelectBits,??_setPeriodTo
  1221  007FB8  0E07               	movlw	7
  1222  007FBA  0100               	movlb	0	; () banked
  1223  007FBC  176A               	andwf	??_setPeriodTo& (0+255),f,b
  1224  007FBE  0100               	movlb	0	; () banked
  1225  007FC0  396A               	swapf	??_setPeriodTo& (0+255),w,b
  1226  007FC2  0BF0               	andlw	240
  1227  007FC4  0902               	iorlw	2
  1228  007FC6  6ED3               	movwf	4051,c	;volatile
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;MotorFunction.c: 55: PR2 = (int)period;
  1232  007FC8  C078  F030         	movff	setPeriodTo@period,___fttol@f1
  1233  007FCC  C079  F031         	movff	setPeriodTo@period+1,___fttol@f1+1
  1234  007FD0  C07A  F032         	movff	setPeriodTo@period+2,___fttol@f1+2
  1235  007FD4  ECF0  F03C         	call	___fttol	;wreg free
  1236  007FD8  5030               	movf	?___fttol,w,c
  1237  007FDA  6ECB               	movwf	4043,c	;volatile
  1238                           
  1239                           ;MotorFunction.c: 56: T2CON = TimerPrescaleBits;
  1240  007FDC  C06E  FFCA         	movff	setPeriodTo@TimerPrescaleBits,4042	;volatile
  1241                           
  1242                           ;MotorFunction.c: 57: TMR2 = 0;
  1243  007FE0  0E00               	movlw	0
  1244  007FE2  6ECC               	movwf	4044,c	;volatile
  1245                           
  1246                           ;MotorFunction.c: 58: T2CONbits.TMR2ON = 1;
  1247  007FE4  84CA               	bsf	4042,2,c	;volatile
  1248                           
  1249                           ;MotorFunction.c: 59: return (int)period;
  1250  007FE6  C078  F030         	movff	setPeriodTo@period,___fttol@f1
  1251  007FEA  C079  F031         	movff	setPeriodTo@period+1,___fttol@f1+1
  1252  007FEE  C07A  F032         	movff	setPeriodTo@period+2,___fttol@f1+2
  1253  007FF2  ECF0  F03C         	call	___fttol	;wreg free
  1254  007FF6  C030  F066         	movff	?___fttol,?_setPeriodTo
  1255  007FFA  C031  F067         	movff	?___fttol+1,?_setPeriodTo+1
  1256  007FFE  0012               	return	
  1257  008000                     __end_of_setPeriodTo:
  1258                           	opt stack 0
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           postdec1	equ	0xFE5
  1266                           fsr1l	equ	0xFE1
  1267                           status	equ	0xFD8
  1268                           
  1269 ;; *************** function _round *****************
  1270 ;; Defined at:
  1271 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\round.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;  x               3    0[BANK0 ] int 
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  f               3    3[BANK0 ] int 
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  3    0[BANK0 ] int 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1285 ;;      Params:         0       3       0       0       0       0       0       0       0
  1286 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1287 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1288 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1289 ;;Total ram usage:        6 bytes
  1290 ;; Hardware stack levels used:    1
  1291 ;; Hardware stack levels required when called:    3
  1292 ;; This function calls:
  1293 ;;		___ftadd
  1294 ;;		___ftneg
  1295 ;;		_trunc
  1296 ;; This function is called by:
  1297 ;;		_setPeriodTo
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text3
  1302  0075F6                     __ptext3:
  1303                           	opt stack 0
  1304  0075F6                     _round:
  1305                           	opt stack 25
  1306                           
  1307                           ;incstack = 0
  1308  0075F6  C060  F049         	movff	round@x,trunc@x
  1309  0075FA  C061  F04A         	movff	round@x+1,trunc@x+1
  1310  0075FE  C062  F04B         	movff	round@x+2,trunc@x+2
  1311  007602  ECBA  F03A         	call	_trunc	;wreg free
  1312  007606  C049  F051         	movff	?_trunc,___ftneg@f1
  1313  00760A  C04A  F052         	movff	?_trunc+1,___ftneg@f1+1
  1314  00760E  C04B  F053         	movff	?_trunc+2,___ftneg@f1+2
  1315  007612  EC72  F039         	call	___ftneg	;wreg free
  1316  007616  C051  F054         	movff	?___ftneg,___ftadd@f1
  1317  00761A  C052  F055         	movff	?___ftneg+1,___ftadd@f1+1
  1318  00761E  C053  F056         	movff	?___ftneg+2,___ftadd@f1+2
  1319  007622  C060  F057         	movff	round@x,___ftadd@f2
  1320  007626  C061  F058         	movff	round@x+1,___ftadd@f2+1
  1321  00762A  C062  F059         	movff	round@x+2,___ftadd@f2+2
  1322  00762E  EC6A  F03D         	call	___ftadd	;wreg free
  1323  007632  C054  F063         	movff	?___ftadd,round@f
  1324  007636  C055  F064         	movff	?___ftadd+1,round@f+1
  1325  00763A  C056  F065         	movff	?___ftadd+2,round@f+2
  1326  00763E  C060  F054         	movff	round@x,___ftadd@f1
  1327  007642  C061  F055         	movff	round@x+1,___ftadd@f1+1
  1328  007646  C062  F056         	movff	round@x+2,___ftadd@f1+2
  1329  00764A  C063  F057         	movff	round@f,___ftadd@f2
  1330  00764E  C064  F058         	movff	round@f+1,___ftadd@f2+1
  1331  007652  C065  F059         	movff	round@f+2,___ftadd@f2+2
  1332  007656  EC6A  F03D         	call	___ftadd	;wreg free
  1333  00765A  C054  F060         	movff	?___ftadd,round@x
  1334  00765E  C055  F061         	movff	?___ftadd+1,round@x+1
  1335  007662  C056  F062         	movff	?___ftadd+2,round@x+2
  1336  007666  C060  F049         	movff	round@x,trunc@x
  1337  00766A  C061  F04A         	movff	round@x+1,trunc@x+1
  1338  00766E  C062  F04B         	movff	round@x+2,trunc@x+2
  1339  007672  ECBA  F03A         	call	_trunc	;wreg free
  1340  007676  C049  F060         	movff	?_trunc,?_round
  1341  00767A  C04A  F061         	movff	?_trunc+1,?_round+1
  1342  00767E  C04B  F062         	movff	?_trunc+2,?_round+2
  1343  007682  0012               	return	
  1344  007684                     __end_of_round:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1l	equ	0xFE1
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _trunc *****************
  1357 ;; Defined at:
  1358 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\trunc.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  x               3   72[COMRAM] int 
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;  i               3   75[COMRAM] int 
  1363 ;;  expon           2   78[COMRAM] int 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  3   72[COMRAM] int 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1373 ;;      Params:         3       0       0       0       0       0       0       0       0
  1374 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1376 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1377 ;;Total ram usage:        8 bytes
  1378 ;; Hardware stack levels used:    1
  1379 ;; Hardware stack levels required when called:    2
  1380 ;; This function calls:
  1381 ;;		___altoft
  1382 ;;		___fttol
  1383 ;;		_frexp
  1384 ;; This function is called by:
  1385 ;;		_round
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text4
  1390  007574                     __ptext4:
  1391                           	opt stack 0
  1392  007574                     _trunc:
  1393                           	opt stack 25
  1394                           
  1395                           ;incstack = 0
  1396  007574  C049  F001         	movff	trunc@x,frexp@value
  1397  007578  C04A  F002         	movff	trunc@x+1,frexp@value+1
  1398  00757C  C04B  F003         	movff	trunc@x+2,frexp@value+2
  1399  007580  0E4F               	movlw	low trunc@expon
  1400  007582  6E04               	movwf	frexp@eptr,c
  1401  007584  0E00               	movlw	high trunc@expon
  1402  007586  6E05               	movwf	frexp@eptr+1,c
  1403  007588  EC42  F03A         	call	_frexp	;wreg free
  1404  00758C  AE50               	btfss	trunc@expon+1,7,c
  1405  00758E  D007               	goto	l1845
  1406  007590  0E00               	movlw	0
  1407  007592  6E49               	movwf	?_trunc,c
  1408  007594  0E00               	movlw	0
  1409  007596  6E4A               	movwf	?_trunc+1,c
  1410  007598  0E00               	movlw	0
  1411  00759A  6E4B               	movwf	?_trunc+2,c
  1412  00759C  0012               	return	
  1413  00759E                     l1845:
  1414  00759E  5050               	movf	trunc@expon+1,w,c
  1415  0075A0  E104               	bnz	u1370
  1416  0075A2  0E15               	movlw	21
  1417  0075A4  5C4F               	subwf	trunc@expon,w,c
  1418  0075A6  A0D8               	btfss	status,0,c
  1419  0075A8  D007               	goto	l1849
  1420  0075AA                     u1370:
  1421  0075AA  C049  F049         	movff	trunc@x,?_trunc
  1422  0075AE  C04A  F04A         	movff	trunc@x+1,?_trunc+1
  1423  0075B2  C04B  F04B         	movff	trunc@x+2,?_trunc+2
  1424  0075B6  0012               	return	
  1425  0075B8                     l1849:
  1426  0075B8  C049  F030         	movff	trunc@x,___fttol@f1
  1427  0075BC  C04A  F031         	movff	trunc@x+1,___fttol@f1+1
  1428  0075C0  C04B  F032         	movff	trunc@x+2,___fttol@f1+2
  1429  0075C4  ECF0  F03C         	call	___fttol	;wreg free
  1430  0075C8  C030  F03F         	movff	?___fttol,___altoft@c
  1431  0075CC  C031  F040         	movff	?___fttol+1,___altoft@c+1
  1432  0075D0  C032  F041         	movff	?___fttol+2,___altoft@c+2
  1433  0075D4  C033  F042         	movff	?___fttol+3,___altoft@c+3
  1434  0075D8  EC06  F03A         	call	___altoft	;wreg free
  1435  0075DC  C03F  F04C         	movff	?___altoft,trunc@i
  1436  0075E0  C040  F04D         	movff	?___altoft+1,trunc@i+1
  1437  0075E4  C041  F04E         	movff	?___altoft+2,trunc@i+2
  1438  0075E8  C04C  F049         	movff	trunc@i,?_trunc
  1439  0075EC  C04D  F04A         	movff	trunc@i+1,?_trunc+1
  1440  0075F0  C04E  F04B         	movff	trunc@i+2,?_trunc+2
  1441  0075F4  0012               	return	
  1442  0075F6                     __end_of_trunc:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           postdec1	equ	0xFE5
  1451                           fsr1l	equ	0xFE1
  1452                           status	equ	0xFD8
  1453                           
  1454 ;; *************** function _frexp *****************
  1455 ;; Defined at:
  1456 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  value           3    0[COMRAM] int 
  1459 ;;  eptr            2    3[COMRAM] PTR int 
  1460 ;;		 -> trunc@expon(2), 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  3    0[COMRAM] PTR int 
  1465 ;; Registers used:
  1466 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1472 ;;      Params:         5       0       0       0       0       0       0       0       0
  1473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1474 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1475 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1476 ;;Total ram usage:        7 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_trunc
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text5
  1486  007484                     __ptext5:
  1487                           	opt stack 0
  1488  007484                     _frexp:
  1489                           	opt stack 26
  1490                           
  1491                           ;incstack = 0
  1492  007484  5001               	movf	frexp@value,w,c
  1493  007486  1002               	iorwf	frexp@value+1,w,c
  1494  007488  1003               	iorwf	frexp@value+2,w,c
  1495  00748A  A4D8               	btfss	status,2,c
  1496  00748C  D009               	goto	l1753
  1497  00748E  C004  FFD9         	movff	frexp@eptr,fsr2l
  1498  007492  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1499  007496  0E00               	movlw	0
  1500  007498  6EDE               	movwf	postinc2,c
  1501  00749A  0E00               	movlw	0
  1502  00749C  6EDD               	movwf	postdec2,c
  1503                           
  1504                           ;	Return value of _frexp is never used
  1505  00749E  0012               	return	
  1506  0074A0                     l1753:
  1507  0074A0  5003               	movf	frexp@value+2,w,c
  1508  0074A2  0B7F               	andlw	127
  1509  0074A4  6E06               	movwf	??_frexp& (0+255),c
  1510  0074A6  6A07               	clrf	(??_frexp+1)& (0+255),c
  1511  0074A8  90D8               	bcf	status,0,c
  1512  0074AA  3606               	rlcf	??_frexp,f,c
  1513  0074AC  3607               	rlcf	??_frexp+1,f,c
  1514  0074AE  C004  FFD9         	movff	frexp@eptr,fsr2l
  1515  0074B2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1516  0074B6  C006  FFDE         	movff	??_frexp,postinc2
  1517  0074BA  C007  FFDD         	movff	??_frexp+1,postdec2
  1518  0074BE  AE02               	btfss	frexp@value+1,7,c
  1519  0074C0  D003               	goto	u1130
  1520  0074C2  6A06               	clrf	??_frexp& (0+255),c
  1521  0074C4  2A06               	incf	??_frexp& (0+255),f,c
  1522  0074C6  D001               	goto	u1138
  1523  0074C8                     u1130:
  1524  0074C8  6A06               	clrf	??_frexp& (0+255),c
  1525  0074CA                     u1138:
  1526  0074CA  5006               	movf	??_frexp,w,c
  1527  0074CC  C004  FFD9         	movff	frexp@eptr,fsr2l
  1528  0074D0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1529  0074D4  12DE               	iorwf	postinc2,f,c
  1530  0074D6  0E00               	movlw	0
  1531  0074D8  12DD               	iorwf	postdec2,f,c
  1532  0074DA  C004  FFD9         	movff	frexp@eptr,fsr2l
  1533  0074DE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1534  0074E2  0E82               	movlw	130
  1535  0074E4  26DE               	addwf	postinc2,f,c
  1536  0074E6  0EFF               	movlw	255
  1537  0074E8  22DD               	addwfc	postdec2,f,c
  1538  0074EA  8003               	bsf	frexp@value+2,0,c
  1539  0074EC  8203               	bsf	frexp@value+2,1,c
  1540  0074EE  8403               	bsf	frexp@value+2,2,c
  1541  0074F0  8603               	bsf	frexp@value+2,3,c
  1542  0074F2  8803               	bsf	frexp@value+2,4,c
  1543  0074F4  8A03               	bsf	frexp@value+2,5,c
  1544  0074F6  9C03               	bcf	frexp@value+2,6,c
  1545  0074F8  9E02               	bcf	frexp@value+1,7,c
  1546  0074FA  0012               	return	
  1547  0074FC                     __end_of_frexp:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           postinc0	equ	0xFEE
  1554                           wreg	equ	0xFE8
  1555                           postdec1	equ	0xFE5
  1556                           fsr1l	equ	0xFE1
  1557                           postinc2	equ	0xFDE
  1558                           postdec2	equ	0xFDD
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function ___altoft *****************
  1564 ;; Defined at:
  1565 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  c               4   62[COMRAM] long 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  sign            1   71[COMRAM] unsigned char 
  1570 ;;  exp             1   70[COMRAM] unsigned char 
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  3   62[COMRAM] float 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1580 ;;      Params:         4       0       0       0       0       0       0       0       0
  1581 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1582 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1583 ;;      Totals:        10       0       0       0       0       0       0       0       0
  1584 ;;Total ram usage:       10 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    1
  1587 ;; This function calls:
  1588 ;;		___ftpack
  1589 ;; This function is called by:
  1590 ;;		_trunc
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text6
  1595  00740C                     __ptext6:
  1596                           	opt stack 0
  1597  00740C                     ___altoft:
  1598                           	opt stack 25
  1599                           
  1600                           ;incstack = 0
  1601  00740C  0E00               	movlw	0
  1602  00740E  6E48               	movwf	___altoft@sign,c
  1603  007410  0E8E               	movlw	142
  1604  007412  6E47               	movwf	___altoft@exp,c
  1605  007414  AE42               	btfss	___altoft@c+3,7,c
  1606  007416  D011               	goto	l1695
  1607  007418  1E42               	comf	___altoft@c+3,f,c
  1608  00741A  1E41               	comf	___altoft@c+2,f,c
  1609  00741C  1E40               	comf	___altoft@c+1,f,c
  1610  00741E  6C3F               	negf	___altoft@c,c
  1611  007420  0E00               	movlw	0
  1612  007422  2240               	addwfc	___altoft@c+1,f,c
  1613  007424  2241               	addwfc	___altoft@c+2,f,c
  1614  007426  2242               	addwfc	___altoft@c+3,f,c
  1615  007428  0E01               	movlw	1
  1616  00742A  6E48               	movwf	___altoft@sign,c
  1617  00742C  D006               	goto	l1695
  1618  00742E                     l1693:
  1619  00742E  90D8               	bcf	status,0,c
  1620  007430  3242               	rrcf	___altoft@c+3,f,c
  1621  007432  3241               	rrcf	___altoft@c+2,f,c
  1622  007434  3240               	rrcf	___altoft@c+1,f,c
  1623  007436  323F               	rrcf	___altoft@c,f,c
  1624  007438  2A47               	incf	___altoft@exp,f,c
  1625  00743A                     l1695:
  1626  00743A  0E00               	movlw	0
  1627  00743C  143F               	andwf	___altoft@c,w,c
  1628  00743E  6E43               	movwf	??___altoft& (0+255),c
  1629  007440  0E00               	movlw	0
  1630  007442  1440               	andwf	___altoft@c+1,w,c
  1631  007444  6E44               	movwf	(??___altoft+1)& (0+255),c
  1632  007446  0E00               	movlw	0
  1633  007448  1441               	andwf	___altoft@c+2,w,c
  1634  00744A  6E45               	movwf	(??___altoft+2)& (0+255),c
  1635  00744C  0EFF               	movlw	255
  1636  00744E  1442               	andwf	___altoft@c+3,w,c
  1637  007450  6E46               	movwf	(??___altoft+3)& (0+255),c
  1638  007452  5043               	movf	??___altoft,w,c
  1639  007454  1044               	iorwf	??___altoft+1,w,c
  1640  007456  1045               	iorwf	??___altoft+2,w,c
  1641  007458  1046               	iorwf	??___altoft+3,w,c
  1642  00745A  A4D8               	btfss	status,2,c
  1643  00745C  D7E8               	goto	l1693
  1644  00745E  C03F  F001         	movff	___altoft@c,___ftpack@arg
  1645  007462  C040  F002         	movff	___altoft@c+1,___ftpack@arg+1
  1646  007466  C041  F003         	movff	___altoft@c+2,___ftpack@arg+2
  1647  00746A  C047  F004         	movff	___altoft@exp,___ftpack@exp
  1648  00746E  C048  F005         	movff	___altoft@sign,___ftpack@sign
  1649  007472  EC42  F03B         	call	___ftpack	;wreg free
  1650  007476  C001  F03F         	movff	?___ftpack,?___altoft
  1651  00747A  C002  F040         	movff	?___ftpack+1,?___altoft+1
  1652  00747E  C003  F041         	movff	?___ftpack+2,?___altoft+2
  1653  007482  0012               	return	
  1654  007484                     __end_of___altoft:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1l	equ	0xFE1
  1664                           postinc2	equ	0xFDE
  1665                           postdec2	equ	0xFDD
  1666                           fsr2h	equ	0xFDA
  1667                           fsr2l	equ	0xFD9
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function ___ftneg *****************
  1671 ;; Defined at:
  1672 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  f1              3   80[COMRAM] float 
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  3   80[COMRAM] float 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1686 ;;      Params:         3       0       0       0       0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1689 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1690 ;;Total ram usage:        3 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; This function calls:
  1693 ;;		Nothing
  1694 ;; This function is called by:
  1695 ;;		_round
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text7
  1700  0072E4                     __ptext7:
  1701                           	opt stack 0
  1702  0072E4                     ___ftneg:
  1703                           	opt stack 27
  1704                           
  1705                           ;incstack = 0
  1706  0072E4  5051               	movf	___ftneg@f1,w,c
  1707  0072E6  1052               	iorwf	___ftneg@f1+1,w,c
  1708  0072E8  1053               	iorwf	___ftneg@f1+2,w,c
  1709  0072EA  B4D8               	btfsc	status,2,c
  1710  0072EC  D006               	goto	l568
  1711  0072EE  0E00               	movlw	0
  1712  0072F0  1A51               	xorwf	___ftneg@f1,f,c
  1713  0072F2  0E00               	movlw	0
  1714  0072F4  1A52               	xorwf	___ftneg@f1+1,f,c
  1715  0072F6  0E80               	movlw	128
  1716  0072F8  1A53               	xorwf	___ftneg@f1+2,f,c
  1717  0072FA                     l568:
  1718  0072FA  C051  F051         	movff	___ftneg@f1,?___ftneg
  1719  0072FE  C052  F052         	movff	___ftneg@f1+1,?___ftneg+1
  1720  007302  C053  F053         	movff	___ftneg@f1+2,?___ftneg+2
  1721  007306  0012               	return		;funcret
  1722  007308                     __end_of___ftneg:
  1723                           	opt stack 0
  1724                           tblptru	equ	0xFF8
  1725                           tblptrh	equ	0xFF7
  1726                           tblptrl	equ	0xFF6
  1727                           tablat	equ	0xFF5
  1728                           postinc0	equ	0xFEE
  1729                           wreg	equ	0xFE8
  1730                           postdec1	equ	0xFE5
  1731                           fsr1l	equ	0xFE1
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function ___lltoft *****************
  1739 ;; Defined at:
  1740 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  c               4    8[COMRAM] unsigned long 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  exp             1   16[COMRAM] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  3    8[COMRAM] float 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1754 ;;      Params:         4       0       0       0       0       0       0       0       0
  1755 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1756 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1757 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1758 ;;Total ram usage:        9 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    1
  1761 ;; This function calls:
  1762 ;;		___ftpack
  1763 ;; This function is called by:
  1764 ;;		_setPeriodTo
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text8
  1769  0073B0                     __ptext8:
  1770                           	opt stack 0
  1771  0073B0                     ___lltoft:
  1772                           	opt stack 27
  1773                           
  1774                           ;incstack = 0
  1775  0073B0  0E8E               	movlw	142
  1776  0073B2  6E11               	movwf	___lltoft@exp,c
  1777  0073B4  D006               	goto	l1979
  1778  0073B6                     l1977:
  1779  0073B6  90D8               	bcf	status,0,c
  1780  0073B8  320C               	rrcf	___lltoft@c+3,f,c
  1781  0073BA  320B               	rrcf	___lltoft@c+2,f,c
  1782  0073BC  320A               	rrcf	___lltoft@c+1,f,c
  1783  0073BE  3209               	rrcf	___lltoft@c,f,c
  1784  0073C0  2A11               	incf	___lltoft@exp,f,c
  1785  0073C2                     l1979:
  1786  0073C2  0E00               	movlw	0
  1787  0073C4  1409               	andwf	___lltoft@c,w,c
  1788  0073C6  6E0D               	movwf	??___lltoft& (0+255),c
  1789  0073C8  0E00               	movlw	0
  1790  0073CA  140A               	andwf	___lltoft@c+1,w,c
  1791  0073CC  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  1792  0073CE  0E00               	movlw	0
  1793  0073D0  140B               	andwf	___lltoft@c+2,w,c
  1794  0073D2  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  1795  0073D4  0EFF               	movlw	255
  1796  0073D6  140C               	andwf	___lltoft@c+3,w,c
  1797  0073D8  6E10               	movwf	(??___lltoft+3)& (0+255),c
  1798  0073DA  500D               	movf	??___lltoft,w,c
  1799  0073DC  100E               	iorwf	??___lltoft+1,w,c
  1800  0073DE  100F               	iorwf	??___lltoft+2,w,c
  1801  0073E0  1010               	iorwf	??___lltoft+3,w,c
  1802  0073E2  A4D8               	btfss	status,2,c
  1803  0073E4  D7E8               	goto	l1977
  1804  0073E6  C009  F001         	movff	___lltoft@c,___ftpack@arg
  1805  0073EA  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  1806  0073EE  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  1807  0073F2  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  1808  0073F6  0E00               	movlw	0
  1809  0073F8  6E05               	movwf	___ftpack@sign,c
  1810  0073FA  EC42  F03B         	call	___ftpack	;wreg free
  1811  0073FE  C001  F009         	movff	?___ftpack,?___lltoft
  1812  007402  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  1813  007406  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  1814  00740A  0012               	return	
  1815  00740C                     __end_of___lltoft:
  1816                           	opt stack 0
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           postdec1	equ	0xFE5
  1824                           fsr1l	equ	0xFE1
  1825                           postinc2	equ	0xFDE
  1826                           postdec2	equ	0xFDD
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831 ;; *************** function _doorSetDutyCycleTo *****************
  1832 ;; Defined at:
  1833 ;;		line 71 in file "MotorFunction.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  Duty_cycle      3    0[BANK0 ] float 
  1836 ;;  Period          2    3[BANK0 ] int 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  PWM10BitValu    2   10[BANK0 ] int 
  1839 ;; Return value:  Size  Location     Type
  1840 ;;		None               void
  1841 ;; Registers used:
  1842 ;;		wreg, status,2, status,0, cstack
  1843 ;; Tracked objects:
  1844 ;;		On entry : 0/0
  1845 ;;		On exit  : 0/0
  1846 ;;		Unchanged: 0/0
  1847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1848 ;;      Params:         0       5       0       0       0       0       0       0       0
  1849 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1850 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1851 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1852 ;;Total ram usage:       12 bytes
  1853 ;; Hardware stack levels used:    1
  1854 ;; Hardware stack levels required when called:    2
  1855 ;; This function calls:
  1856 ;;		___awtoft
  1857 ;;		___ftadd
  1858 ;;		___ftdiv
  1859 ;;		___ftmul
  1860 ;;		___fttol
  1861 ;; This function is called by:
  1862 ;;		_motordoor_right
  1863 ;;		_motordoor_left
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text9
  1868  007732                     __ptext9:
  1869                           	opt stack 0
  1870  007732                     _doorSetDutyCycleTo:
  1871                           	opt stack 27
  1872                           
  1873                           ;MotorFunction.c: 73: int PWM10BitValue;
  1874                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  1875                           
  1876                           ;incstack = 0
  1877  007732  0E00               	movlw	0
  1878  007734  6E24               	movwf	___ftdiv@f2,c
  1879  007736  0EC8               	movlw	200
  1880  007738  6E25               	movwf	___ftdiv@f2+1,c
  1881  00773A  0E42               	movlw	66
  1882  00773C  6E26               	movwf	___ftdiv@f2+2,c
  1883  00773E  C060  F021         	movff	doorSetDutyCycleTo@Duty_cycle,___ftdiv@f1
  1884  007742  C061  F022         	movff	doorSetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  1885  007746  C062  F023         	movff	doorSetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  1886  00774A  EC03  F03C         	call	___ftdiv	;wreg free
  1887  00774E  C021  F015         	movff	?___ftdiv,___ftmul@f2
  1888  007752  C022  F016         	movff	?___ftdiv+1,___ftmul@f2+1
  1889  007756  C023  F017         	movff	?___ftdiv+2,___ftmul@f2+2
  1890  00775A  0E00               	movlw	0
  1891  00775C  6E57               	movwf	___ftadd@f2,c
  1892  00775E  0E80               	movlw	128
  1893  007760  6E58               	movwf	___ftadd@f2+1,c
  1894  007762  0E3F               	movlw	63
  1895  007764  6E59               	movwf	___ftadd@f2+2,c
  1896  007766  C063  F009         	movff	doorSetDutyCycleTo@Period,___awtoft@c
  1897  00776A  C064  F00A         	movff	doorSetDutyCycleTo@Period+1,___awtoft@c+1
  1898  00776E  EC9F  F039         	call	___awtoft	;wreg free
  1899  007772  C009  F054         	movff	?___awtoft,___ftadd@f1
  1900  007776  C00A  F055         	movff	?___awtoft+1,___ftadd@f1+1
  1901  00777A  C00B  F056         	movff	?___awtoft+2,___ftadd@f1+2
  1902  00777E  EC6A  F03D         	call	___ftadd	;wreg free
  1903  007782  C054  F012         	movff	?___ftadd,___ftmul@f1
  1904  007786  C055  F013         	movff	?___ftadd+1,___ftmul@f1+1
  1905  00778A  C056  F014         	movff	?___ftadd+2,___ftmul@f1+2
  1906  00778E  EC76  F03C         	call	___ftmul	;wreg free
  1907  007792  C012  F067         	movff	?___ftmul,_doorSetDutyCycleTo$1246
  1908  007796  C013  F068         	movff	?___ftmul+1,_doorSetDutyCycleTo$1246+1
  1909  00779A  C014  F069         	movff	?___ftmul+2,_doorSetDutyCycleTo$1246+2
  1910                           
  1911                           ;MotorFunction.c: 73: int PWM10BitValue;
  1912                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  1913  00779E  0E00               	movlw	0
  1914  0077A0  6E15               	movwf	___ftmul@f2,c
  1915  0077A2  0E80               	movlw	128
  1916  0077A4  6E16               	movwf	___ftmul@f2+1,c
  1917  0077A6  0E40               	movlw	64
  1918  0077A8  6E17               	movwf	___ftmul@f2+2,c
  1919  0077AA  C067  F012         	movff	_doorSetDutyCycleTo$1246,___ftmul@f1
  1920  0077AE  C068  F013         	movff	_doorSetDutyCycleTo$1246+1,___ftmul@f1+1
  1921  0077B2  C069  F014         	movff	_doorSetDutyCycleTo$1246+2,___ftmul@f1+2
  1922  0077B6  EC76  F03C         	call	___ftmul	;wreg free
  1923  0077BA  C012  F030         	movff	?___ftmul,___fttol@f1
  1924  0077BE  C013  F031         	movff	?___ftmul+1,___fttol@f1+1
  1925  0077C2  C014  F032         	movff	?___ftmul+2,___fttol@f1+2
  1926  0077C6  ECF0  F03C         	call	___fttol	;wreg free
  1927  0077CA  C030  F06A         	movff	?___fttol,doorSetDutyCycleTo@PWM10BitValue
  1928  0077CE  C031  F06B         	movff	?___fttol+1,doorSetDutyCycleTo@PWM10BitValue+1
  1929                           
  1930                           ;MotorFunction.c: 76: CCPR2L = (PWM10BitValue >> 2);
  1931  0077D2  C06A  F065         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  1932  0077D6  C06B  F066         	movff	doorSetDutyCycleTo@PWM10BitValue+1,??_doorSetDutyCycleTo+1
  1933  0077DA  0100               	movlb	0	; () banked
  1934  0077DC  3566               	rlcf	(??_doorSetDutyCycleTo+1)& (0+255),w,b
  1935  0077DE  3366               	rrcf	(??_doorSetDutyCycleTo+1)& (0+255),f,b
  1936  0077E0  3365               	rrcf	??_doorSetDutyCycleTo& (0+255),f,b
  1937  0077E2  0100               	movlb	0	; () banked
  1938  0077E4  3566               	rlcf	(??_doorSetDutyCycleTo+1)& (0+255),w,b
  1939  0077E6  3366               	rrcf	(??_doorSetDutyCycleTo+1)& (0+255),f,b
  1940  0077E8  3365               	rrcf	??_doorSetDutyCycleTo& (0+255),f,b
  1941  0077EA  0100               	movlb	0	; () banked
  1942  0077EC  5165               	movf	??_doorSetDutyCycleTo& (0+255),w,b
  1943  0077EE  6EBB               	movwf	4027,c	;volatile
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;MotorFunction.c: 77: CCP2CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  1947  0077F0  C06A  F065         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  1948  0077F4  0E03               	movlw	3
  1949  0077F6  0100               	movlb	0	; () banked
  1950  0077F8  1765               	andwf	??_doorSetDutyCycleTo& (0+255),f,b
  1951  0077FA  0100               	movlb	0	; () banked
  1952  0077FC  3965               	swapf	??_doorSetDutyCycleTo& (0+255),w,b
  1953  0077FE  0BF0               	andlw	240
  1954  007800  090C               	iorlw	12
  1955  007802  6EBA               	movwf	4026,c	;volatile
  1956                           
  1957                           ; BSR set to: 0
  1958  007804  0012               	return		;funcret
  1959  007806                     __end_of_doorSetDutyCycleTo:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1l	equ	0xFE1
  1969                           postinc2	equ	0xFDE
  1970                           postdec2	equ	0xFDD
  1971                           fsr2h	equ	0xFDA
  1972                           fsr2l	equ	0xFD9
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function ___fttol *****************
  1976 ;; Defined at:
  1977 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;  f1              3   47[COMRAM] float 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  lval            4   57[COMRAM] unsigned long 
  1982 ;;  exp1            1   61[COMRAM] unsigned char 
  1983 ;;  sign1           1   56[COMRAM] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  4   47[COMRAM] long 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1993 ;;      Params:         4       0       0       0       0       0       0       0       0
  1994 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1995 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1996 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1997 ;;Total ram usage:       15 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_setPeriodTo
  2003 ;;		_doorSetDutyCycleTo
  2004 ;;		_trunc
  2005 ;;		_SetDutyCycleTo
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text10
  2010  0079E0                     __ptext10:
  2011                           	opt stack 0
  2012  0079E0                     ___fttol:
  2013                           	opt stack 26
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;incstack = 0
  2017  0079E0  C032  F034         	movff	___fttol@f1+2,??___fttol
  2018  0079E4  6A35               	clrf	(??___fttol+1)& (0+255),c
  2019  0079E6  6A36               	clrf	(??___fttol+2)& (0+255),c
  2020  0079E8  3431               	rlcf	___fttol@f1+1,w,c
  2021  0079EA  3634               	rlcf	??___fttol& (0+255),f,c
  2022  0079EC  E301               	bnc	u1041
  2023  0079EE  8035               	bsf	(??___fttol+1)& (0+255),0,c
  2024  0079F0                     u1041:
  2025  0079F0  5034               	movf	??___fttol,w,c
  2026  0079F2  6E3E               	movwf	___fttol@exp1,c
  2027  0079F4  503E               	movf	___fttol@exp1,w,c
  2028  0079F6  A4D8               	btfss	status,2,c
  2029  0079F8  D009               	goto	l1707
  2030  0079FA  0E00               	movlw	0
  2031  0079FC  6E30               	movwf	?___fttol,c
  2032  0079FE  0E00               	movlw	0
  2033  007A00  6E31               	movwf	?___fttol+1,c
  2034  007A02  0E00               	movlw	0
  2035  007A04  6E32               	movwf	?___fttol+2,c
  2036  007A06  0E00               	movlw	0
  2037  007A08  6E33               	movwf	?___fttol+3,c
  2038  007A0A  0012               	return	
  2039  007A0C                     l1707:
  2040  007A0C  0E17               	movlw	23
  2041  007A0E  6E34               	movwf	??___fttol& (0+255),c
  2042  007A10  C030  F035         	movff	___fttol@f1,??___fttol+1
  2043  007A14  C031  F036         	movff	___fttol@f1+1,??___fttol+2
  2044  007A18  C032  F037         	movff	___fttol@f1+2,??___fttol+3
  2045  007A1C  2834               	incf	??___fttol,w,c
  2046  007A1E  6E38               	movwf	(??___fttol+4)& (0+255),c
  2047  007A20  D004               	goto	u1060
  2048  007A22                     u1065:
  2049  007A22  90D8               	bcf	status,0,c
  2050  007A24  3237               	rrcf	??___fttol+3,f,c
  2051  007A26  3236               	rrcf	??___fttol+2,f,c
  2052  007A28  3235               	rrcf	??___fttol+1,f,c
  2053  007A2A                     u1060:
  2054  007A2A  2E38               	decfsz	(??___fttol+4)& (0+255),f,c
  2055  007A2C  D7FA               	goto	u1065
  2056  007A2E  5035               	movf	??___fttol+1,w,c
  2057  007A30  6E39               	movwf	___fttol@sign1,c
  2058  007A32  8E31               	bsf	___fttol@f1+1,7,c
  2059  007A34  0EFF               	movlw	255
  2060  007A36  1630               	andwf	___fttol@f1,f,c
  2061  007A38  0EFF               	movlw	255
  2062  007A3A  1631               	andwf	___fttol@f1+1,f,c
  2063  007A3C  0E00               	movlw	0
  2064  007A3E  1632               	andwf	___fttol@f1+2,f,c
  2065  007A40  5030               	movf	___fttol@f1,w,c
  2066  007A42  6E3A               	movwf	___fttol@lval,c
  2067  007A44  5031               	movf	___fttol@f1+1,w,c
  2068  007A46  6E3B               	movwf	___fttol@lval+1,c
  2069  007A48  5032               	movf	___fttol@f1+2,w,c
  2070  007A4A  6E3C               	movwf	___fttol@lval+2,c
  2071  007A4C  6A3D               	clrf	___fttol@lval+3,c
  2072  007A4E  0E8E               	movlw	142
  2073  007A50  5E3E               	subwf	___fttol@exp1,f,c
  2074  007A52  AE3E               	btfss	___fttol@exp1,7,c
  2075  007A54  D016               	goto	l1729
  2076  007A56  503E               	movf	___fttol@exp1,w,c
  2077  007A58  0A80               	xorlw	128
  2078  007A5A  0F8F               	addlw	143
  2079  007A5C  B0D8               	btfsc	status,0,c
  2080  007A5E  D009               	goto	l1725
  2081  007A60  0E00               	movlw	0
  2082  007A62  6E30               	movwf	?___fttol,c
  2083  007A64  0E00               	movlw	0
  2084  007A66  6E31               	movwf	?___fttol+1,c
  2085  007A68  0E00               	movlw	0
  2086  007A6A  6E32               	movwf	?___fttol+2,c
  2087  007A6C  0E00               	movlw	0
  2088  007A6E  6E33               	movwf	?___fttol+3,c
  2089  007A70  0012               	return	
  2090  007A72                     l1725:
  2091  007A72  90D8               	bcf	status,0,c
  2092  007A74  323D               	rrcf	___fttol@lval+3,f,c
  2093  007A76  323C               	rrcf	___fttol@lval+2,f,c
  2094  007A78  323B               	rrcf	___fttol@lval+1,f,c
  2095  007A7A  323A               	rrcf	___fttol@lval,f,c
  2096  007A7C  3E3E               	incfsz	___fttol@exp1,f,c
  2097  007A7E  D7F9               	goto	l1725
  2098  007A80  D015               	goto	l1739
  2099  007A82                     l1729:
  2100  007A82  0E17               	movlw	23
  2101  007A84  643E               	cpfsgt	___fttol@exp1,c
  2102  007A86  D00F               	goto	l1737
  2103  007A88  0E00               	movlw	0
  2104  007A8A  6E30               	movwf	?___fttol,c
  2105  007A8C  0E00               	movlw	0
  2106  007A8E  6E31               	movwf	?___fttol+1,c
  2107  007A90  0E00               	movlw	0
  2108  007A92  6E32               	movwf	?___fttol+2,c
  2109  007A94  0E00               	movlw	0
  2110  007A96  6E33               	movwf	?___fttol+3,c
  2111  007A98  0012               	return	
  2112  007A9A                     l1735:
  2113  007A9A  90D8               	bcf	status,0,c
  2114  007A9C  363A               	rlcf	___fttol@lval,f,c
  2115  007A9E  363B               	rlcf	___fttol@lval+1,f,c
  2116  007AA0  363C               	rlcf	___fttol@lval+2,f,c
  2117  007AA2  363D               	rlcf	___fttol@lval+3,f,c
  2118  007AA4  063E               	decf	___fttol@exp1,f,c
  2119  007AA6                     l1737:
  2120  007AA6  503E               	movf	___fttol@exp1,w,c
  2121  007AA8  A4D8               	btfss	status,2,c
  2122  007AAA  D7F7               	goto	l1735
  2123  007AAC                     l1739:
  2124  007AAC  5039               	movf	___fttol@sign1,w,c
  2125  007AAE  B4D8               	btfsc	status,2,c
  2126  007AB0  D008               	goto	l1743
  2127  007AB2  1E3D               	comf	___fttol@lval+3,f,c
  2128  007AB4  1E3C               	comf	___fttol@lval+2,f,c
  2129  007AB6  1E3B               	comf	___fttol@lval+1,f,c
  2130  007AB8  6C3A               	negf	___fttol@lval,c
  2131  007ABA  0E00               	movlw	0
  2132  007ABC  223B               	addwfc	___fttol@lval+1,f,c
  2133  007ABE  223C               	addwfc	___fttol@lval+2,f,c
  2134  007AC0  223D               	addwfc	___fttol@lval+3,f,c
  2135  007AC2                     l1743:
  2136  007AC2  C03A  F030         	movff	___fttol@lval,?___fttol
  2137  007AC6  C03B  F031         	movff	___fttol@lval+1,?___fttol+1
  2138  007ACA  C03C  F032         	movff	___fttol@lval+2,?___fttol+2
  2139  007ACE  C03D  F033         	movff	___fttol@lval+3,?___fttol+3
  2140  007AD2  0012               	return	
  2141  007AD4                     __end_of___fttol:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           fsr1l	equ	0xFE1
  2151                           postinc2	equ	0xFDE
  2152                           postdec2	equ	0xFDD
  2153                           fsr2h	equ	0xFDA
  2154                           fsr2l	equ	0xFD9
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function ___ftmul *****************
  2158 ;; Defined at:
  2159 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  f1              3   17[COMRAM] float 
  2162 ;;  f2              3   20[COMRAM] float 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  f3_as_produc    3   27[COMRAM] unsigned um
  2165 ;;  sign            1   31[COMRAM] unsigned char 
  2166 ;;  cntr            1   30[COMRAM] unsigned char 
  2167 ;;  exp             1   26[COMRAM] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  3   17[COMRAM] float 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0, cstack
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         6       0       0       0       0       0       0       0       0
  2178 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2179 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2180 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2181 ;;Total ram usage:       15 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    1
  2184 ;; This function calls:
  2185 ;;		___ftpack
  2186 ;; This function is called by:
  2187 ;;		_setPeriodTo
  2188 ;;		_doorSetDutyCycleTo
  2189 ;;		_SetDutyCycleTo
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           	psect	text11
  2194  0078EC                     __ptext11:
  2195                           	opt stack 0
  2196  0078EC                     ___ftmul:
  2197                           	opt stack 27
  2198                           
  2199                           ;incstack = 0
  2200  0078EC  C014  F018         	movff	___ftmul@f1+2,??___ftmul
  2201  0078F0  6A19               	clrf	(??___ftmul+1)& (0+255),c
  2202  0078F2  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  2203  0078F4  3413               	rlcf	___ftmul@f1+1,w,c
  2204  0078F6  3618               	rlcf	??___ftmul& (0+255),f,c
  2205  0078F8  E301               	bnc	u1431
  2206  0078FA  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  2207  0078FC                     u1431:
  2208  0078FC  5018               	movf	??___ftmul,w,c
  2209  0078FE  6E1B               	movwf	___ftmul@exp,c
  2210  007900  501B               	movf	___ftmul@exp,w,c
  2211  007902  A4D8               	btfss	status,2,c
  2212  007904  D007               	goto	l1921
  2213  007906  0E00               	movlw	0
  2214  007908  6E12               	movwf	?___ftmul,c
  2215  00790A  0E00               	movlw	0
  2216  00790C  6E13               	movwf	?___ftmul+1,c
  2217  00790E  0E00               	movlw	0
  2218  007910  6E14               	movwf	?___ftmul+2,c
  2219  007912  0012               	return	
  2220  007914                     l1921:
  2221  007914  C017  F018         	movff	___ftmul@f2+2,??___ftmul
  2222  007918  6A19               	clrf	(??___ftmul+1)& (0+255),c
  2223  00791A  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  2224  00791C  3416               	rlcf	___ftmul@f2+1,w,c
  2225  00791E  3618               	rlcf	??___ftmul& (0+255),f,c
  2226  007920  E301               	bnc	u1451
  2227  007922  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  2228  007924                     u1451:
  2229  007924  5018               	movf	??___ftmul,w,c
  2230  007926  6E20               	movwf	___ftmul@sign,c
  2231  007928  5020               	movf	___ftmul@sign,w,c
  2232  00792A  A4D8               	btfss	status,2,c
  2233  00792C  D007               	goto	l1927
  2234  00792E  0E00               	movlw	0
  2235  007930  6E12               	movwf	?___ftmul,c
  2236  007932  0E00               	movlw	0
  2237  007934  6E13               	movwf	?___ftmul+1,c
  2238  007936  0E00               	movlw	0
  2239  007938  6E14               	movwf	?___ftmul+2,c
  2240  00793A  0012               	return	
  2241  00793C                     l1927:
  2242  00793C  5020               	movf	___ftmul@sign,w,c
  2243  00793E  0F7B               	addlw	123
  2244  007940  261B               	addwf	___ftmul@exp,f,c
  2245  007942  C014  F020         	movff	___ftmul@f1+2,___ftmul@sign
  2246  007946  5017               	movf	___ftmul@f2+2,w,c
  2247  007948  1A20               	xorwf	___ftmul@sign,f,c
  2248  00794A  0E80               	movlw	128
  2249  00794C  1620               	andwf	___ftmul@sign,f,c
  2250  00794E  8E13               	bsf	___ftmul@f1+1,7,c
  2251  007950  8E16               	bsf	___ftmul@f2+1,7,c
  2252  007952  0EFF               	movlw	255
  2253  007954  1615               	andwf	___ftmul@f2,f,c
  2254  007956  0EFF               	movlw	255
  2255  007958  1616               	andwf	___ftmul@f2+1,f,c
  2256  00795A  0E00               	movlw	0
  2257  00795C  1617               	andwf	___ftmul@f2+2,f,c
  2258  00795E  0E00               	movlw	0
  2259  007960  6E1C               	movwf	___ftmul@f3_as_product,c
  2260  007962  0E00               	movlw	0
  2261  007964  6E1D               	movwf	___ftmul@f3_as_product+1,c
  2262  007966  0E00               	movlw	0
  2263  007968  6E1E               	movwf	___ftmul@f3_as_product+2,c
  2264  00796A  0E07               	movlw	7
  2265  00796C  6E1F               	movwf	___ftmul@cntr,c
  2266  00796E                     l1941:
  2267  00796E  A012               	btfss	___ftmul@f1,0,c
  2268  007970  D006               	goto	l1945
  2269  007972  5015               	movf	___ftmul@f2,w,c
  2270  007974  261C               	addwf	___ftmul@f3_as_product,f,c
  2271  007976  5016               	movf	___ftmul@f2+1,w,c
  2272  007978  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  2273  00797A  5017               	movf	___ftmul@f2+2,w,c
  2274  00797C  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  2275  00797E                     l1945:
  2276  00797E  90D8               	bcf	status,0,c
  2277  007980  3214               	rrcf	___ftmul@f1+2,f,c
  2278  007982  3213               	rrcf	___ftmul@f1+1,f,c
  2279  007984  3212               	rrcf	___ftmul@f1,f,c
  2280  007986  90D8               	bcf	status,0,c
  2281  007988  3615               	rlcf	___ftmul@f2,f,c
  2282  00798A  3616               	rlcf	___ftmul@f2+1,f,c
  2283  00798C  3617               	rlcf	___ftmul@f2+2,f,c
  2284  00798E  2E1F               	decfsz	___ftmul@cntr,f,c
  2285  007990  D7EE               	goto	l1941
  2286  007992  0E09               	movlw	9
  2287  007994  6E1F               	movwf	___ftmul@cntr,c
  2288  007996                     l1951:
  2289  007996  A012               	btfss	___ftmul@f1,0,c
  2290  007998  D006               	goto	l1955
  2291  00799A  5015               	movf	___ftmul@f2,w,c
  2292  00799C  261C               	addwf	___ftmul@f3_as_product,f,c
  2293  00799E  5016               	movf	___ftmul@f2+1,w,c
  2294  0079A0  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  2295  0079A2  5017               	movf	___ftmul@f2+2,w,c
  2296  0079A4  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  2297  0079A6                     l1955:
  2298  0079A6  90D8               	bcf	status,0,c
  2299  0079A8  3214               	rrcf	___ftmul@f1+2,f,c
  2300  0079AA  3213               	rrcf	___ftmul@f1+1,f,c
  2301  0079AC  3212               	rrcf	___ftmul@f1,f,c
  2302  0079AE  90D8               	bcf	status,0,c
  2303  0079B0  321E               	rrcf	___ftmul@f3_as_product+2,f,c
  2304  0079B2  321D               	rrcf	___ftmul@f3_as_product+1,f,c
  2305  0079B4  321C               	rrcf	___ftmul@f3_as_product,f,c
  2306  0079B6  2E1F               	decfsz	___ftmul@cntr,f,c
  2307  0079B8  D7EE               	goto	l1951
  2308  0079BA  C01C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  2309  0079BE  C01D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2310  0079C2  C01E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2311  0079C6  C01B  F004         	movff	___ftmul@exp,___ftpack@exp
  2312  0079CA  C020  F005         	movff	___ftmul@sign,___ftpack@sign
  2313  0079CE  EC42  F03B         	call	___ftpack	;wreg free
  2314  0079D2  C001  F012         	movff	?___ftpack,?___ftmul
  2315  0079D6  C002  F013         	movff	?___ftpack+1,?___ftmul+1
  2316  0079DA  C003  F014         	movff	?___ftpack+2,?___ftmul+2
  2317  0079DE  0012               	return	
  2318  0079E0                     __end_of___ftmul:
  2319                           	opt stack 0
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           postinc0	equ	0xFEE
  2325                           wreg	equ	0xFE8
  2326                           postdec1	equ	0xFE5
  2327                           fsr1l	equ	0xFE1
  2328                           postinc2	equ	0xFDE
  2329                           postdec2	equ	0xFDD
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function ___ftdiv *****************
  2335 ;; Defined at:
  2336 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  f1              3   32[COMRAM] float 
  2339 ;;  f2              3   35[COMRAM] float 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  f3              3   42[COMRAM] float 
  2342 ;;  sign            1   46[COMRAM] unsigned char 
  2343 ;;  exp             1   45[COMRAM] unsigned char 
  2344 ;;  cntr            1   41[COMRAM] unsigned char 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  3   32[COMRAM] float 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2354 ;;      Params:         6       0       0       0       0       0       0       0       0
  2355 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2356 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2357 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2358 ;;Total ram usage:       15 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    1
  2361 ;; This function calls:
  2362 ;;		___ftpack
  2363 ;; This function is called by:
  2364 ;;		_setPeriodTo
  2365 ;;		_doorSetDutyCycleTo
  2366 ;;		_SetDutyCycleTo
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text12
  2371  007806                     __ptext12:
  2372                           	opt stack 0
  2373  007806                     ___ftdiv:
  2374                           	opt stack 27
  2375                           
  2376                           ;incstack = 0
  2377  007806  C023  F027         	movff	___ftdiv@f1+2,??___ftdiv
  2378  00780A  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2379  00780C  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2380  00780E  3422               	rlcf	___ftdiv@f1+1,w,c
  2381  007810  3627               	rlcf	??___ftdiv& (0+255),f,c
  2382  007812  E301               	bnc	u1381
  2383  007814  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2384  007816                     u1381:
  2385  007816  5027               	movf	??___ftdiv,w,c
  2386  007818  6E2E               	movwf	___ftdiv@exp,c
  2387  00781A  502E               	movf	___ftdiv@exp,w,c
  2388  00781C  A4D8               	btfss	status,2,c
  2389  00781E  D007               	goto	l1875
  2390  007820  0E00               	movlw	0
  2391  007822  6E21               	movwf	?___ftdiv,c
  2392  007824  0E00               	movlw	0
  2393  007826  6E22               	movwf	?___ftdiv+1,c
  2394  007828  0E00               	movlw	0
  2395  00782A  6E23               	movwf	?___ftdiv+2,c
  2396  00782C  0012               	return	
  2397  00782E                     l1875:
  2398  00782E  C026  F027         	movff	___ftdiv@f2+2,??___ftdiv
  2399  007832  6A28               	clrf	(??___ftdiv+1)& (0+255),c
  2400  007834  6A29               	clrf	(??___ftdiv+2)& (0+255),c
  2401  007836  3425               	rlcf	___ftdiv@f2+1,w,c
  2402  007838  3627               	rlcf	??___ftdiv& (0+255),f,c
  2403  00783A  E301               	bnc	u1401
  2404  00783C  8028               	bsf	(??___ftdiv+1)& (0+255),0,c
  2405  00783E                     u1401:
  2406  00783E  5027               	movf	??___ftdiv,w,c
  2407  007840  6E2F               	movwf	___ftdiv@sign,c
  2408  007842  502F               	movf	___ftdiv@sign,w,c
  2409  007844  A4D8               	btfss	status,2,c
  2410  007846  D007               	goto	l1881
  2411  007848  0E00               	movlw	0
  2412  00784A  6E21               	movwf	?___ftdiv,c
  2413  00784C  0E00               	movlw	0
  2414  00784E  6E22               	movwf	?___ftdiv+1,c
  2415  007850  0E00               	movlw	0
  2416  007852  6E23               	movwf	?___ftdiv+2,c
  2417  007854  0012               	return	
  2418  007856                     l1881:
  2419  007856  0E00               	movlw	0
  2420  007858  6E2B               	movwf	___ftdiv@f3,c
  2421  00785A  0E00               	movlw	0
  2422  00785C  6E2C               	movwf	___ftdiv@f3+1,c
  2423  00785E  0E00               	movlw	0
  2424  007860  6E2D               	movwf	___ftdiv@f3+2,c
  2425  007862  502F               	movf	___ftdiv@sign,w,c
  2426  007864  0F89               	addlw	137
  2427  007866  5E2E               	subwf	___ftdiv@exp,f,c
  2428  007868  C023  F02F         	movff	___ftdiv@f1+2,___ftdiv@sign
  2429  00786C  5026               	movf	___ftdiv@f2+2,w,c
  2430  00786E  1A2F               	xorwf	___ftdiv@sign,f,c
  2431  007870  0E80               	movlw	128
  2432  007872  162F               	andwf	___ftdiv@sign,f,c
  2433  007874  8E22               	bsf	___ftdiv@f1+1,7,c
  2434  007876  0EFF               	movlw	255
  2435  007878  1621               	andwf	___ftdiv@f1,f,c
  2436  00787A  0EFF               	movlw	255
  2437  00787C  1622               	andwf	___ftdiv@f1+1,f,c
  2438  00787E  0E00               	movlw	0
  2439  007880  1623               	andwf	___ftdiv@f1+2,f,c
  2440  007882  8E25               	bsf	___ftdiv@f2+1,7,c
  2441  007884  0EFF               	movlw	255
  2442  007886  1624               	andwf	___ftdiv@f2,f,c
  2443  007888  0EFF               	movlw	255
  2444  00788A  1625               	andwf	___ftdiv@f2+1,f,c
  2445  00788C  0E00               	movlw	0
  2446  00788E  1626               	andwf	___ftdiv@f2+2,f,c
  2447  007890  0E18               	movlw	24
  2448  007892  6E2A               	movwf	___ftdiv@cntr,c
  2449  007894                     l1901:
  2450  007894  90D8               	bcf	status,0,c
  2451  007896  362B               	rlcf	___ftdiv@f3,f,c
  2452  007898  362C               	rlcf	___ftdiv@f3+1,f,c
  2453  00789A  362D               	rlcf	___ftdiv@f3+2,f,c
  2454  00789C  5024               	movf	___ftdiv@f2,w,c
  2455  00789E  5C21               	subwf	___ftdiv@f1,w,c
  2456  0078A0  5025               	movf	___ftdiv@f2+1,w,c
  2457  0078A2  5822               	subwfb	___ftdiv@f1+1,w,c
  2458  0078A4  5026               	movf	___ftdiv@f2+2,w,c
  2459  0078A6  5823               	subwfb	___ftdiv@f1+2,w,c
  2460  0078A8  A0D8               	btfss	status,0,c
  2461  0078AA  D007               	goto	l546
  2462  0078AC  5024               	movf	___ftdiv@f2,w,c
  2463  0078AE  5E21               	subwf	___ftdiv@f1,f,c
  2464  0078B0  5025               	movf	___ftdiv@f2+1,w,c
  2465  0078B2  5A22               	subwfb	___ftdiv@f1+1,f,c
  2466  0078B4  5026               	movf	___ftdiv@f2+2,w,c
  2467  0078B6  5A23               	subwfb	___ftdiv@f1+2,f,c
  2468  0078B8  802B               	bsf	___ftdiv@f3,0,c
  2469  0078BA                     l546:
  2470  0078BA  90D8               	bcf	status,0,c
  2471  0078BC  3621               	rlcf	___ftdiv@f1,f,c
  2472  0078BE  3622               	rlcf	___ftdiv@f1+1,f,c
  2473  0078C0  3623               	rlcf	___ftdiv@f1+2,f,c
  2474  0078C2  2E2A               	decfsz	___ftdiv@cntr,f,c
  2475  0078C4  D7E7               	goto	l1901
  2476  0078C6  C02B  F001         	movff	___ftdiv@f3,___ftpack@arg
  2477  0078CA  C02C  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2478  0078CE  C02D  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2479  0078D2  C02E  F004         	movff	___ftdiv@exp,___ftpack@exp
  2480  0078D6  C02F  F005         	movff	___ftdiv@sign,___ftpack@sign
  2481  0078DA  EC42  F03B         	call	___ftpack	;wreg free
  2482  0078DE  C001  F021         	movff	?___ftpack,?___ftdiv
  2483  0078E2  C002  F022         	movff	?___ftpack+1,?___ftdiv+1
  2484  0078E6  C003  F023         	movff	?___ftpack+2,?___ftdiv+2
  2485  0078EA  0012               	return	
  2486  0078EC                     __end_of___ftdiv:
  2487                           	opt stack 0
  2488                           tblptru	equ	0xFF8
  2489                           tblptrh	equ	0xFF7
  2490                           tblptrl	equ	0xFF6
  2491                           tablat	equ	0xFF5
  2492                           postinc0	equ	0xFEE
  2493                           wreg	equ	0xFE8
  2494                           postdec1	equ	0xFE5
  2495                           fsr1l	equ	0xFE1
  2496                           postinc2	equ	0xFDE
  2497                           postdec2	equ	0xFDD
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function ___ftadd *****************
  2503 ;; Defined at:
  2504 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  f1              3   83[COMRAM] float 
  2507 ;;  f2              3   86[COMRAM] float 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  exp1            1   94[COMRAM] unsigned char 
  2510 ;;  exp2            1   93[COMRAM] unsigned char 
  2511 ;;  sign            1   92[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  3   83[COMRAM] float 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2521 ;;      Params:         6       0       0       0       0       0       0       0       0
  2522 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2523 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2524 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2525 ;;Total ram usage:       12 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    1
  2528 ;; This function calls:
  2529 ;;		___ftpack
  2530 ;; This function is called by:
  2531 ;;		_setPeriodTo
  2532 ;;		_doorSetDutyCycleTo
  2533 ;;		_round
  2534 ;;		_SetDutyCycleTo
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text13
  2539  007AD4                     __ptext13:
  2540                           	opt stack 0
  2541  007AD4                     ___ftadd:
  2542                           	opt stack 26
  2543                           
  2544                           ;incstack = 0
  2545  007AD4  C056  F05A         	movff	___ftadd@f1+2,??___ftadd
  2546  007AD8  6A5B               	clrf	(??___ftadd+1)& (0+255),c
  2547  007ADA  6A5C               	clrf	(??___ftadd+2)& (0+255),c
  2548  007ADC  3455               	rlcf	___ftadd@f1+1,w,c
  2549  007ADE  365A               	rlcf	??___ftadd& (0+255),f,c
  2550  007AE0  E301               	bnc	u1141
  2551  007AE2  805B               	bsf	(??___ftadd+1)& (0+255),0,c
  2552  007AE4                     u1141:
  2553  007AE4  505A               	movf	??___ftadd,w,c
  2554  007AE6  6E5F               	movwf	___ftadd@exp1,c
  2555  007AE8  C059  F05A         	movff	___ftadd@f2+2,??___ftadd
  2556  007AEC  6A5B               	clrf	(??___ftadd+1)& (0+255),c
  2557  007AEE  6A5C               	clrf	(??___ftadd+2)& (0+255),c
  2558  007AF0  3458               	rlcf	___ftadd@f2+1,w,c
  2559  007AF2  365A               	rlcf	??___ftadd& (0+255),f,c
  2560  007AF4  E301               	bnc	u1151
  2561  007AF6  805B               	bsf	(??___ftadd+1)& (0+255),0,c
  2562  007AF8                     u1151:
  2563  007AF8  505A               	movf	??___ftadd,w,c
  2564  007AFA  6E5E               	movwf	___ftadd@exp2,c
  2565  007AFC  505F               	movf	___ftadd@exp1,w,c
  2566  007AFE  B4D8               	btfsc	status,2,c
  2567  007B00  D00B               	goto	l511
  2568  007B02  505E               	movf	___ftadd@exp2,w,c
  2569  007B04  5C5F               	subwf	___ftadd@exp1,w,c
  2570  007B06  B0D8               	btfsc	status,0,c
  2571  007B08  D00E               	goto	l1771
  2572  007B0A  505F               	movf	___ftadd@exp1,w,c
  2573  007B0C  0800               	sublw	0
  2574  007B0E  245E               	addwf	___ftadd@exp2,w,c
  2575  007B10  6E5A               	movwf	??___ftadd& (0+255),c
  2576  007B12  0E18               	movlw	24
  2577  007B14  645A               	cpfsgt	??___ftadd,c
  2578  007B16  D007               	goto	l1771
  2579  007B18                     l511:
  2580  007B18  C057  F054         	movff	___ftadd@f2,?___ftadd
  2581  007B1C  C058  F055         	movff	___ftadd@f2+1,?___ftadd+1
  2582  007B20  C059  F056         	movff	___ftadd@f2+2,?___ftadd+2
  2583  007B24  0012               	return	
  2584  007B26                     l1771:
  2585  007B26  505E               	movf	___ftadd@exp2,w,c
  2586  007B28  B4D8               	btfsc	status,2,c
  2587  007B2A  D00B               	goto	l515
  2588  007B2C  505F               	movf	___ftadd@exp1,w,c
  2589  007B2E  5C5E               	subwf	___ftadd@exp2,w,c
  2590  007B30  B0D8               	btfsc	status,0,c
  2591  007B32  D00E               	goto	l1777
  2592  007B34  505E               	movf	___ftadd@exp2,w,c
  2593  007B36  0800               	sublw	0
  2594  007B38  245F               	addwf	___ftadd@exp1,w,c
  2595  007B3A  6E5A               	movwf	??___ftadd& (0+255),c
  2596  007B3C  0E18               	movlw	24
  2597  007B3E  645A               	cpfsgt	??___ftadd,c
  2598  007B40  D007               	goto	l1777
  2599  007B42                     l515:
  2600  007B42  C054  F054         	movff	___ftadd@f1,?___ftadd
  2601  007B46  C055  F055         	movff	___ftadd@f1+1,?___ftadd+1
  2602  007B4A  C056  F056         	movff	___ftadd@f1+2,?___ftadd+2
  2603  007B4E  0012               	return	
  2604  007B50                     l1777:
  2605  007B50  0E06               	movlw	6
  2606  007B52  6E5D               	movwf	___ftadd@sign,c
  2607  007B54  BE56               	btfsc	___ftadd@f1+2,7,c
  2608  007B56  8E5D               	bsf	___ftadd@sign,7,c
  2609  007B58  BE59               	btfsc	___ftadd@f2+2,7,c
  2610  007B5A  8C5D               	bsf	___ftadd@sign,6,c
  2611  007B5C  8E55               	bsf	___ftadd@f1+1,7,c
  2612  007B5E  0EFF               	movlw	255
  2613  007B60  1654               	andwf	___ftadd@f1,f,c
  2614  007B62  0EFF               	movlw	255
  2615  007B64  1655               	andwf	___ftadd@f1+1,f,c
  2616  007B66  0E00               	movlw	0
  2617  007B68  1656               	andwf	___ftadd@f1+2,f,c
  2618  007B6A  8E58               	bsf	___ftadd@f2+1,7,c
  2619  007B6C  0EFF               	movlw	255
  2620  007B6E  1657               	andwf	___ftadd@f2,f,c
  2621  007B70  0EFF               	movlw	255
  2622  007B72  1658               	andwf	___ftadd@f2+1,f,c
  2623  007B74  0E00               	movlw	0
  2624  007B76  1659               	andwf	___ftadd@f2+2,f,c
  2625  007B78  505E               	movf	___ftadd@exp2,w,c
  2626  007B7A  5C5F               	subwf	___ftadd@exp1,w,c
  2627  007B7C  B0D8               	btfsc	status,0,c
  2628  007B7E  D01B               	goto	l1803
  2629  007B80                     l1793:
  2630  007B80  90D8               	bcf	status,0,c
  2631  007B82  3657               	rlcf	___ftadd@f2,f,c
  2632  007B84  3658               	rlcf	___ftadd@f2+1,f,c
  2633  007B86  3659               	rlcf	___ftadd@f2+2,f,c
  2634  007B88  065E               	decf	___ftadd@exp2,f,c
  2635  007B8A  505F               	movf	___ftadd@exp1,w,c
  2636  007B8C  185E               	xorwf	___ftadd@exp2,w,c
  2637  007B8E  B4D8               	btfsc	status,2,c
  2638  007B90  D00D               	goto	l1801
  2639  007B92  065D               	decf	___ftadd@sign,f,c
  2640  007B94  C05D  F05A         	movff	___ftadd@sign,??___ftadd
  2641  007B98  0E07               	movlw	7
  2642  007B9A  165A               	andwf	??___ftadd,f,c
  2643  007B9C  B4D8               	btfsc	status,2,c
  2644  007B9E  D006               	goto	l1801
  2645  007BA0  D7EF               	goto	l1793
  2646  007BA2                     l1799:
  2647  007BA2  90D8               	bcf	status,0,c
  2648  007BA4  3256               	rrcf	___ftadd@f1+2,f,c
  2649  007BA6  3255               	rrcf	___ftadd@f1+1,f,c
  2650  007BA8  3254               	rrcf	___ftadd@f1,f,c
  2651  007BAA  2A5F               	incf	___ftadd@exp1,f,c
  2652  007BAC                     l1801:
  2653  007BAC  505E               	movf	___ftadd@exp2,w,c
  2654  007BAE  185F               	xorwf	___ftadd@exp1,w,c
  2655  007BB0  B4D8               	btfsc	status,2,c
  2656  007BB2  D01F               	goto	l526
  2657  007BB4  D7F6               	goto	l1799
  2658  007BB6                     l1803:
  2659  007BB6  505F               	movf	___ftadd@exp1,w,c
  2660  007BB8  5C5E               	subwf	___ftadd@exp2,w,c
  2661  007BBA  B0D8               	btfsc	status,0,c
  2662  007BBC  D01A               	goto	l526
  2663  007BBE                     l1805:
  2664  007BBE  90D8               	bcf	status,0,c
  2665  007BC0  3654               	rlcf	___ftadd@f1,f,c
  2666  007BC2  3655               	rlcf	___ftadd@f1+1,f,c
  2667  007BC4  3656               	rlcf	___ftadd@f1+2,f,c
  2668  007BC6  065F               	decf	___ftadd@exp1,f,c
  2669  007BC8  505F               	movf	___ftadd@exp1,w,c
  2670  007BCA  185E               	xorwf	___ftadd@exp2,w,c
  2671  007BCC  B4D8               	btfsc	status,2,c
  2672  007BCE  D00D               	goto	l1813
  2673  007BD0  065D               	decf	___ftadd@sign,f,c
  2674  007BD2  C05D  F05A         	movff	___ftadd@sign,??___ftadd
  2675  007BD6  0E07               	movlw	7
  2676  007BD8  165A               	andwf	??___ftadd,f,c
  2677  007BDA  B4D8               	btfsc	status,2,c
  2678  007BDC  D006               	goto	l1813
  2679  007BDE  D7EF               	goto	l1805
  2680  007BE0                     l1811:
  2681  007BE0  90D8               	bcf	status,0,c
  2682  007BE2  3259               	rrcf	___ftadd@f2+2,f,c
  2683  007BE4  3258               	rrcf	___ftadd@f2+1,f,c
  2684  007BE6  3257               	rrcf	___ftadd@f2,f,c
  2685  007BE8  2A5E               	incf	___ftadd@exp2,f,c
  2686  007BEA                     l1813:
  2687  007BEA  505E               	movf	___ftadd@exp2,w,c
  2688  007BEC  185F               	xorwf	___ftadd@exp1,w,c
  2689  007BEE  A4D8               	btfss	status,2,c
  2690  007BF0  D7F7               	goto	l1811
  2691  007BF2                     l526:
  2692  007BF2  AE5D               	btfss	___ftadd@sign,7,c
  2693  007BF4  D00C               	goto	l535
  2694  007BF6  0EFF               	movlw	255
  2695  007BF8  1A54               	xorwf	___ftadd@f1,f,c
  2696  007BFA  0EFF               	movlw	255
  2697  007BFC  1A55               	xorwf	___ftadd@f1+1,f,c
  2698  007BFE  0EFF               	movlw	255
  2699  007C00  1A56               	xorwf	___ftadd@f1+2,f,c
  2700  007C02  0E01               	movlw	1
  2701  007C04  2654               	addwf	___ftadd@f1,f,c
  2702  007C06  0E00               	movlw	0
  2703  007C08  2255               	addwfc	___ftadd@f1+1,f,c
  2704  007C0A  0E00               	movlw	0
  2705  007C0C  2256               	addwfc	___ftadd@f1+2,f,c
  2706  007C0E                     l535:
  2707  007C0E  AC5D               	btfss	___ftadd@sign,6,c
  2708  007C10  D00C               	goto	l1819
  2709  007C12  0EFF               	movlw	255
  2710  007C14  1A57               	xorwf	___ftadd@f2,f,c
  2711  007C16  0EFF               	movlw	255
  2712  007C18  1A58               	xorwf	___ftadd@f2+1,f,c
  2713  007C1A  0EFF               	movlw	255
  2714  007C1C  1A59               	xorwf	___ftadd@f2+2,f,c
  2715  007C1E  0E01               	movlw	1
  2716  007C20  2657               	addwf	___ftadd@f2,f,c
  2717  007C22  0E00               	movlw	0
  2718  007C24  2258               	addwfc	___ftadd@f2+1,f,c
  2719  007C26  0E00               	movlw	0
  2720  007C28  2259               	addwfc	___ftadd@f2+2,f,c
  2721  007C2A                     l1819:
  2722  007C2A  0E00               	movlw	0
  2723  007C2C  6E5D               	movwf	___ftadd@sign,c
  2724  007C2E  5054               	movf	___ftadd@f1,w,c
  2725  007C30  2657               	addwf	___ftadd@f2,f,c
  2726  007C32  5055               	movf	___ftadd@f1+1,w,c
  2727  007C34  2258               	addwfc	___ftadd@f2+1,f,c
  2728  007C36  5056               	movf	___ftadd@f1+2,w,c
  2729  007C38  2259               	addwfc	___ftadd@f2+2,f,c
  2730  007C3A  AE59               	btfss	___ftadd@f2+2,7,c
  2731  007C3C  D00E               	goto	l1829
  2732  007C3E  0EFF               	movlw	255
  2733  007C40  1A57               	xorwf	___ftadd@f2,f,c
  2734  007C42  0EFF               	movlw	255
  2735  007C44  1A58               	xorwf	___ftadd@f2+1,f,c
  2736  007C46  0EFF               	movlw	255
  2737  007C48  1A59               	xorwf	___ftadd@f2+2,f,c
  2738  007C4A  0E01               	movlw	1
  2739  007C4C  2657               	addwf	___ftadd@f2,f,c
  2740  007C4E  0E00               	movlw	0
  2741  007C50  2258               	addwfc	___ftadd@f2+1,f,c
  2742  007C52  0E00               	movlw	0
  2743  007C54  2259               	addwfc	___ftadd@f2+2,f,c
  2744  007C56  0E01               	movlw	1
  2745  007C58  6E5D               	movwf	___ftadd@sign,c
  2746  007C5A                     l1829:
  2747  007C5A  C057  F001         	movff	___ftadd@f2,___ftpack@arg
  2748  007C5E  C058  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  2749  007C62  C059  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  2750  007C66  C05F  F004         	movff	___ftadd@exp1,___ftpack@exp
  2751  007C6A  C05D  F005         	movff	___ftadd@sign,___ftpack@sign
  2752  007C6E  EC42  F03B         	call	___ftpack	;wreg free
  2753  007C72  C001  F054         	movff	?___ftpack,?___ftadd
  2754  007C76  C002  F055         	movff	?___ftpack+1,?___ftadd+1
  2755  007C7A  C003  F056         	movff	?___ftpack+2,?___ftadd+2
  2756  007C7E  0012               	return	
  2757  007C80                     __end_of___ftadd:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           postinc0	equ	0xFEE
  2764                           wreg	equ	0xFE8
  2765                           postdec1	equ	0xFE5
  2766                           fsr1l	equ	0xFE1
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function ___awtoft *****************
  2774 ;; Defined at:
  2775 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  c               2    8[COMRAM] int 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  sign            1   11[COMRAM] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  3    8[COMRAM] float 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2789 ;;      Params:         3       0       0       0       0       0       0       0       0
  2790 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2792 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2793 ;;Total ram usage:        4 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    1
  2796 ;; This function calls:
  2797 ;;		___ftpack
  2798 ;; This function is called by:
  2799 ;;		_setPeriodTo
  2800 ;;		_doorSetDutyCycleTo
  2801 ;;		_SetDutyCycleTo
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text14
  2806  00733E                     __ptext14:
  2807                           	opt stack 0
  2808  00733E                     ___awtoft:
  2809                           	opt stack 27
  2810                           
  2811                           ;incstack = 0
  2812  00733E  0E00               	movlw	0
  2813  007340  6E0C               	movwf	___awtoft@sign,c
  2814  007342  AE0A               	btfss	___awtoft@c+1,7,c
  2815  007344  D006               	goto	l1971
  2816  007346  6C09               	negf	___awtoft@c,c
  2817  007348  1E0A               	comf	___awtoft@c+1,f,c
  2818  00734A  B0D8               	btfsc	status,0,c
  2819  00734C  2A0A               	incf	___awtoft@c+1,f,c
  2820  00734E  0E01               	movlw	1
  2821  007350  6E0C               	movwf	___awtoft@sign,c
  2822  007352                     l1971:
  2823  007352  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2824  007356  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2825  00735A  6A03               	clrf	___ftpack@arg+2,c
  2826  00735C  0E8E               	movlw	142
  2827  00735E  6E04               	movwf	___ftpack@exp,c
  2828  007360  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  2829  007364  EC42  F03B         	call	___ftpack	;wreg free
  2830  007368  C001  F009         	movff	?___ftpack,?___awtoft
  2831  00736C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2832  007370  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2833  007374  0012               	return	
  2834  007376                     __end_of___awtoft:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           tblptrh	equ	0xFF7
  2838                           tblptrl	equ	0xFF6
  2839                           tablat	equ	0xFF5
  2840                           postinc0	equ	0xFEE
  2841                           wreg	equ	0xFE8
  2842                           postdec1	equ	0xFE5
  2843                           fsr1l	equ	0xFE1
  2844                           postinc2	equ	0xFDE
  2845                           postdec2	equ	0xFDD
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function ___ftpack *****************
  2851 ;; Defined at:
  2852 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  arg             3    0[COMRAM] unsigned um
  2855 ;;  exp             1    3[COMRAM] unsigned char 
  2856 ;;  sign            1    4[COMRAM] unsigned char 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;		None
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  3    0[COMRAM] float 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 0/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2868 ;;      Params:         5       0       0       0       0       0       0       0       0
  2869 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2870 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2871 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2872 ;;Total ram usage:        8 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		___altoft
  2878 ;;		___awtoft
  2879 ;;		___ftadd
  2880 ;;		___ftdiv
  2881 ;;		___ftmul
  2882 ;;		___lltoft
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text15
  2887  007684                     __ptext15:
  2888                           	opt stack 0
  2889  007684                     ___ftpack:
  2890                           	opt stack 25
  2891                           
  2892                           ;incstack = 0
  2893  007684  5004               	movf	___ftpack@exp,w,c
  2894  007686  B4D8               	btfsc	status,2,c
  2895  007688  D005               	goto	l1653
  2896  00768A  5001               	movf	___ftpack@arg,w,c
  2897  00768C  1002               	iorwf	___ftpack@arg+1,w,c
  2898  00768E  1003               	iorwf	___ftpack@arg+2,w,c
  2899  007690  A4D8               	btfss	status,2,c
  2900  007692  D00C               	goto	l1659
  2901  007694                     l1653:
  2902  007694  0E00               	movlw	0
  2903  007696  6E01               	movwf	?___ftpack,c
  2904  007698  0E00               	movlw	0
  2905  00769A  6E02               	movwf	?___ftpack+1,c
  2906  00769C  0E00               	movlw	0
  2907  00769E  6E03               	movwf	?___ftpack+2,c
  2908  0076A0  0012               	return	
  2909  0076A2                     l1657:
  2910  0076A2  2A04               	incf	___ftpack@exp,f,c
  2911  0076A4  90D8               	bcf	status,0,c
  2912  0076A6  3203               	rrcf	___ftpack@arg+2,f,c
  2913  0076A8  3202               	rrcf	___ftpack@arg+1,f,c
  2914  0076AA  3201               	rrcf	___ftpack@arg,f,c
  2915  0076AC                     l1659:
  2916  0076AC  0E00               	movlw	0
  2917  0076AE  1401               	andwf	___ftpack@arg,w,c
  2918  0076B0  6E06               	movwf	??___ftpack& (0+255),c
  2919  0076B2  0E00               	movlw	0
  2920  0076B4  1402               	andwf	___ftpack@arg+1,w,c
  2921  0076B6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2922  0076B8  0EFE               	movlw	254
  2923  0076BA  1403               	andwf	___ftpack@arg+2,w,c
  2924  0076BC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2925  0076BE  5006               	movf	??___ftpack,w,c
  2926  0076C0  1007               	iorwf	??___ftpack+1,w,c
  2927  0076C2  1008               	iorwf	??___ftpack+2,w,c
  2928  0076C4  B4D8               	btfsc	status,2,c
  2929  0076C6  D00C               	goto	l1665
  2930  0076C8  D7EC               	goto	l1657
  2931  0076CA                     l1661:
  2932  0076CA  2A04               	incf	___ftpack@exp,f,c
  2933  0076CC  0E01               	movlw	1
  2934  0076CE  2601               	addwf	___ftpack@arg,f,c
  2935  0076D0  0E00               	movlw	0
  2936  0076D2  2202               	addwfc	___ftpack@arg+1,f,c
  2937  0076D4  0E00               	movlw	0
  2938  0076D6  2203               	addwfc	___ftpack@arg+2,f,c
  2939  0076D8  90D8               	bcf	status,0,c
  2940  0076DA  3203               	rrcf	___ftpack@arg+2,f,c
  2941  0076DC  3202               	rrcf	___ftpack@arg+1,f,c
  2942  0076DE  3201               	rrcf	___ftpack@arg,f,c
  2943  0076E0                     l1665:
  2944  0076E0  0E00               	movlw	0
  2945  0076E2  1401               	andwf	___ftpack@arg,w,c
  2946  0076E4  6E06               	movwf	??___ftpack& (0+255),c
  2947  0076E6  0E00               	movlw	0
  2948  0076E8  1402               	andwf	___ftpack@arg+1,w,c
  2949  0076EA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  2950  0076EC  0EFF               	movlw	255
  2951  0076EE  1403               	andwf	___ftpack@arg+2,w,c
  2952  0076F0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  2953  0076F2  5006               	movf	??___ftpack,w,c
  2954  0076F4  1007               	iorwf	??___ftpack+1,w,c
  2955  0076F6  1008               	iorwf	??___ftpack+2,w,c
  2956  0076F8  B4D8               	btfsc	status,2,c
  2957  0076FA  D006               	goto	l1669
  2958  0076FC  D7E6               	goto	l1661
  2959  0076FE                     l1667:
  2960  0076FE  0604               	decf	___ftpack@exp,f,c
  2961  007700  90D8               	bcf	status,0,c
  2962  007702  3601               	rlcf	___ftpack@arg,f,c
  2963  007704  3602               	rlcf	___ftpack@arg+1,f,c
  2964  007706  3603               	rlcf	___ftpack@arg+2,f,c
  2965  007708                     l1669:
  2966  007708  BE02               	btfsc	___ftpack@arg+1,7,c
  2967  00770A  D003               	goto	l488
  2968  00770C  0E02               	movlw	2
  2969  00770E  6004               	cpfslt	___ftpack@exp,c
  2970  007710  D7F6               	goto	l1667
  2971  007712                     l488:
  2972  007712  A004               	btfss	___ftpack@exp,0,c
  2973  007714  9E02               	bcf	___ftpack@arg+1,7,c
  2974  007716  90D8               	bcf	status,0,c
  2975  007718  3204               	rrcf	___ftpack@exp,f,c
  2976  00771A  5004               	movf	___ftpack@exp,w,c
  2977  00771C  1203               	iorwf	___ftpack@arg+2,f,c
  2978  00771E  5005               	movf	___ftpack@sign,w,c
  2979  007720  A4D8               	btfss	status,2,c
  2980  007722  8E03               	bsf	___ftpack@arg+2,7,c
  2981  007724  C001  F001         	movff	___ftpack@arg,?___ftpack
  2982  007728  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  2983  00772C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  2984  007730  0012               	return	
  2985  007732                     __end_of___ftpack:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           postinc0	equ	0xFEE
  2992                           wreg	equ	0xFE8
  2993                           postdec1	equ	0xFE5
  2994                           fsr1l	equ	0xFE1
  2995                           postinc2	equ	0xFDE
  2996                           postdec2	equ	0xFDD
  2997                           fsr2h	equ	0xFDA
  2998                           fsr2l	equ	0xFD9
  2999                           status	equ	0xFD8
  3000                           
  3001 ;; *************** function _delay *****************
  3002 ;; Defined at:
  3003 ;;		line 81 in file "MotorFunction.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;  val             2    0[COMRAM] unsigned int 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  j               2    4[COMRAM] unsigned int 
  3008 ;;  i               2    2[COMRAM] unsigned int 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;		None               void
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3018 ;;      Params:         2       0       0       0       0       0       0       0       0
  3019 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3021 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3022 ;;Total ram usage:        6 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_motordoor_right
  3028 ;;		_motorlock_right
  3029 ;;		_motorlock_left
  3030 ;;		_motordoor_left
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text16
  3035  007308                     __ptext16:
  3036                           	opt stack 0
  3037  007308                     _delay:
  3038                           	opt stack 29
  3039                           
  3040                           ;MotorFunction.c: 83: unsigned int i,j;
  3041                           ;MotorFunction.c: 84: for(i=0;i<val;i++)
  3042                           
  3043                           ;incstack = 0
  3044  007308  0E00               	movlw	0
  3045  00730A  6E04               	movwf	delay@i+1,c
  3046  00730C  0E00               	movlw	0
  3047  00730E  6E03               	movwf	delay@i,c
  3048  007310  D00F               	goto	l2127
  3049  007312                     l2115:
  3050                           
  3051                           ;MotorFunction.c: 85: for(j=0;j<10;j++);
  3052  007312  0E00               	movlw	0
  3053  007314  6E06               	movwf	delay@j+1,c
  3054  007316  0E00               	movlw	0
  3055  007318  6E05               	movwf	delay@j,c
  3056  00731A                     l2117:
  3057  00731A  5006               	movf	delay@j+1,w,c
  3058  00731C  E107               	bnz	l2125
  3059  00731E  0E0A               	movlw	10
  3060  007320  5C05               	subwf	delay@j,w,c
  3061  007322  B0D8               	btfsc	status,0,c
  3062  007324  D003               	goto	l2125
  3063  007326  4A05               	infsnz	delay@j,f,c
  3064  007328  2A06               	incf	delay@j+1,f,c
  3065  00732A  D7F7               	goto	l2117
  3066  00732C                     l2125:
  3067  00732C  4A03               	infsnz	delay@i,f,c
  3068  00732E  2A04               	incf	delay@i+1,f,c
  3069  007330                     l2127:
  3070  007330  5001               	movf	delay@val,w,c
  3071  007332  5C03               	subwf	delay@i,w,c
  3072  007334  5002               	movf	delay@val+1,w,c
  3073  007336  5804               	subwfb	delay@i+1,w,c
  3074  007338  B0D8               	btfsc	status,0,c
  3075  00733A  0012               	return	
  3076  00733C  D7EA               	goto	l2115
  3077  00733E                     __end_of_delay:
  3078                           	opt stack 0
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           postdec1	equ	0xFE5
  3086                           fsr1l	equ	0xFE1
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _PWMdoor_Init *****************
  3094 ;; Defined at:
  3095 ;;		line 26 in file "MotorFunction.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;		None
  3098 ;; Auto vars:     Size  Location     Type
  3099 ;;		None
  3100 ;; Return value:  Size  Location     Type
  3101 ;;		None               void
  3102 ;; Registers used:
  3103 ;;		wreg, status,2
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3109 ;;      Params:         0       0       0       0       0       0       0       0       0
  3110 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3112 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3113 ;;Total ram usage:        0 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; This function calls:
  3116 ;;		Nothing
  3117 ;; This function is called by:
  3118 ;;		_motordoor_right
  3119 ;;		_motordoor_left
  3120 ;; This function uses a non-reentrant model
  3121 ;;
  3122                           
  3123                           	psect	text17
  3124  0072BC                     __ptext17:
  3125                           	opt stack 0
  3126  0072BC                     _PWMdoor_Init:
  3127                           	opt stack 29
  3128                           
  3129                           ;MotorFunction.c: 27: TRISCbits.TRISC1 = 0;
  3130                           
  3131                           ;incstack = 0
  3132  0072BC  9294               	bcf	3988,1,c	;volatile
  3133                           
  3134                           ;MotorFunction.c: 28: CCP1CON = 0x0C;
  3135  0072BE  0E0C               	movlw	12
  3136  0072C0  6EBD               	movwf	4029,c	;volatile
  3137  0072C2  0012               	return		;funcret
  3138  0072C4                     __end_of_PWMdoor_Init:
  3139                           	opt stack 0
  3140                           tblptru	equ	0xFF8
  3141                           tblptrh	equ	0xFF7
  3142                           tblptrl	equ	0xFF6
  3143                           tablat	equ	0xFF5
  3144                           postinc0	equ	0xFEE
  3145                           wreg	equ	0xFE8
  3146                           postdec1	equ	0xFE5
  3147                           fsr1l	equ	0xFE1
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           postinc0	equ	0xFEE
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1l	equ	0xFE1
  3161                           postinc2	equ	0xFDE
  3162                           postdec2	equ	0xFDD
  3163                           fsr2h	equ	0xFDA
  3164                           fsr2l	equ	0xFD9
  3165                           status	equ	0xFD8
  3166                           
  3167                           	psect	rparam
  3168  0000                     tblptru	equ	0xFF8
  3169                           tblptrh	equ	0xFF7
  3170                           tblptrl	equ	0xFF6
  3171                           tablat	equ	0xFF5
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1l	equ	0xFE1
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        21
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     33      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _setPeriodTo->___ftadd
    _round->___ftadd
    _trunc->___altoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___lltoft->___ftpack
    _doorSetDutyCycleTo->___ftadd
    ___fttol->___ftdiv
    ___ftmul->___lltoft
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_motordoor_right
    _motordoor_right->_setPeriodTo
    _setPeriodTo->_round

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38342
                    _motordoor_right
 ---------------------------------------------------------------------------------
 (1) _motordoor_right                                      2     2      0   38342
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (2) _setPeriodTo                                         25    21      4   23976
                                              6 BANK0     25    21      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                              _round
 ---------------------------------------------------------------------------------
 (3) _round                                                6     3      3    7666
                                              0 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (4) _trunc                                                8     5      3    3549
                                             72 COMRAM     8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2350
                                             62 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                             80 COMRAM     3     0      3
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2345
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _doorSetDutyCycleTo                                  12     7      5   13717
                                              0 BANK0     12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     572
                                             47 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3344
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2914
                                             32 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3832
                                             83 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2431
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _delay                                                6     4      2     604
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _PWMdoor_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _motordoor_right
     _PWMdoor_Init
     _delay
     _doorSetDutyCycleTo
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           _frexp
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
     _setPeriodTo
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         ___ftpack (ARG)
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           _frexp
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
       ___lltoft
         ___ftpack
       _round
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp
           ___ftpack (ARG)
           ___fttol (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         ___ftneg
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp
         _trunc
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
           _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      3F       5       39.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9E      20        0.0%
DATA                 0      0      9E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 06 14:59:08 2024

                   ___altoft@exp 0047                                _c 0098  
                  ___altoft@sign 0048                               _p1 009B  
                             _p2 009C                               _p3 009D  
                             _p4 009E                     ___ftadd@exp1 005F  
                   ___ftadd@exp2 005E                     ___ftadd@sign 005D  
                            l511 7B18                              l515 7B42  
                            l526 7BF2                              l535 7C0E  
                            l546 78BA                              l488 7712  
                            l568 72FA                              _PR2 000FCB  
                            _key 0099                              wreg 000FE8  
                    getkey@F4444 1005                     ___ftdiv@cntr 002A  
                   ___ftdiv@sign 002F                             l2201 72C8  
                           l2115 7312                             l2125 732C  
                           l2117 731A                             l2061 7D10  
                           l2127 7330                             l2055 7CC0  
                           l2081 7E78                             l2073 7DE8  
                           l2065 7D58                             l2085 7EC0  
                           l2077 7E30                             l2069 7DA0  
                           l1801 7BAC                             l1811 7BE0  
                           l1803 7BB6                             l1707 7A0C  
                           l1661 76CA                             l1653 7694  
                           l1813 7BEA                             l1805 7BBE  
                           l1901 7894                             l1725 7A72  
                           l1743 7AC2                             l1735 7A9A  
                           l1665 76E0                             l1657 76A2  
                           l1921 7914                             l1737 7AA6  
                           l1729 7A82                             l1753 74A0  
                           l1667 76FE                             l1659 76AC  
                           l1819 7C2A                             l1771 7B26  
                           l1739 7AAC                             l1669 7708  
                           l1829 7C5A                             l1941 796E  
                           l1693 742E                             l1845 759E  
                           l1951 7996                             l1927 793C  
                           l1695 743A                             l1793 7B80  
                           l1777 7B50                             l1881 7856  
                           l1945 797E                             l1849 75B8  
                           l1971 7352                             l1875 782E  
                           l1955 79A6                             l1799 7BA2  
                           l1977 73B6                             l1979 73C2  
                           u1041 79F0                             u1130 74C8  
                           u1060 7A2A                             u1141 7AE4  
                           u1151 7AF8                             u1401 783E  
                           u1065 7A22                             u1138 74CA  
                           u1431 78FC                             u1370 75AA  
                           u1451 7924                             u1381 7816  
                           _TMR2 000FCC                             _main 72C4  
                   ___ftpack@arg 0001                     ___ftpack@exp 0004  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           fsr2l 000FD9                             start 1000  
        _doorSetDutyCycleTo$1246 0067                     ___ftmul@cntr 001F  
                   ___param_bank 000010                     ___ftmul@sign 0020  
    __size_of_doorSetDutyCycleTo 00D4                     ___fttol@exp1 003E  
                   ___fttol@lval 003A                            ?_main 0001  
                __end_of___ftadd 7C80                  __end_of___ftdiv 78EC  
                __end_of___ftneg 7308                  __end_of___ftmul 79E0  
                __end_of___fttol 7AD4                            _T2CON 000FCA  
              ??_motordoor_right 0060                            _PORTB 000F81  
                          _PORTD 000F83                            _TRISC 000F94  
                          _TRISD 000F95                     ___lltoft@exp 0011  
          __size_of_PWMdoor_Init 0008       setPeriodTo@clockSelectBits 0076  
                  ___awtoft@sign 000C                            _delay 7308  
                          _frexp 7484                            _errno 0096  
                  ___ftpack@sign 0005                            _round 75F6  
                          _trunc 7574                            tablat 000FF5  
                          status 000FD8                  __initialization 7376  
                   __end_of_main 72CE                     _PWMdoor_Init 72BC  
                         ??_main 0060                    ___fttol@sign1 0039  
                  __activetblptr 000001                     ?_setPeriodTo 0066  
                         ?_delay 0001                           _ADCON1 000FC1  
                         ?_frexp 0001                 __end_of___altoft 7484  
                         _CCPR1L 000FBE                           _CCPR2L 000FBB  
               __end_of___awtoft 7376                 __end_of___ftpack 7732  
                         ?_round 0060                           ?_trunc 0049  
               __end_of___lltoft 740C                           _OSCCON 000FD3  
                         _TRISA0 007C90                        ??___ftadd 005A  
                      ??___ftdiv 0027                        ??___ftneg 0054  
                      ??___ftmul 0018                        ??___fttol 0034  
                         delay@i 0003                           delay@j 0005  
                         clear_0 737C            ___ftmul@f3_as_product 001C  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         round@f 0063                           round@x 0060  
                         trunc@i 004C                           trunc@x 0049  
                     __accesstop 0060          __end_of__initialization 73A2  
                     ___altoft@c 003F                       ___ftadd@f1 0054  
                     ___ftadd@f2 0057                    ___rparam_used 000001  
                     ___ftdiv@f1 0021                       ___ftdiv@f2 0024  
                     ___ftdiv@f3 002B                       ___ftneg@f1 0051  
                     ___awtoft@c 0009                       ___ftmul@f1 0012  
                     ___ftmul@f2 0015                       ___fttol@f1 0030  
                 __pcstackCOMRAM 0001           setPeriodTo@_resolution 007B  
                   __pidataBANK0 72CF                    __end_of_delay 733E  
                     ___lltoft@c 0009                    __end_of_frexp 74FC  
                  __end_of_round 7684                    __end_of_trunc 75F6  
                        ??_delay 0003                          ??_frexp 0006  
                        ??_round 0060                          ??_trunc 004C  
                     __pbssBANK0 0096                  _motordoor_right 74FC  
                        _CCP1CON 000FBD                          _CCP2CON 000FBA  
                      ?___altoft 003F                        ?___awtoft 0009  
                      ?___ftpack 0001                        ?___lltoft 0009  
           __size_of_setPeriodTo 0380                          __Hparam 0000  
     __end_of_doorSetDutyCycleTo 7806                          __Lparam 0000  
                        ___ftadd 7AD4                          ___ftdiv 7806  
                        ___ftneg 72E4                          ___ftmul 78EC  
                        ___fttol 79E0                     __psmallconst 1004  
                     ??___altoft 0043                          __pcinit 7376  
                     ??___awtoft 000C                       ??___ftpack 0006  
                        __ramtop 0800                       ??___lltoft 000D  
                        __ptext0 72C4                          __ptext1 74FC  
                        __ptext2 7C80                          __ptext3 75F6  
                        __ptext4 7574                          __ptext5 7484  
                        __ptext6 740C                          __ptext7 72E4  
                        __ptext8 73B0                          __ptext9 7732  
                      _T2CONbits 000FCA                          _outchar 009A  
   setPeriodTo@TimerPrescaleBits 006E         doorSetDutyCycleTo@Period 0063  
           end_of_initialization 73A2          __end_of_motordoor_right 7574  
                        postdec1 000FE5                          postdec2 000FDD  
  setPeriodTo@TimerPrescaleValue 0070                          postinc0 000FEE  
                        postinc2 000FDE                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                      _PORTDbits 000F83                        _TRISCbits 000F94  
                    ___ftdiv@exp 002E                      ___ftmul@exp 001B  
              setPeriodTo@period 0078              start_initialization 7376  
                     frexp@value 0001                 ?_motordoor_right 0001  
                    __pdataBANK0 0081                __size_of___altoft 0078  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                    __pcstackBANK0 0060  
                       ?___ftadd 0054                         ?___ftdiv 0021  
                       ?___ftneg 0051                         ?___ftmul 0012  
                       ?___fttol 0030                    ?_PWMdoor_Init 0001  
   doorSetDutyCycleTo@Duty_cycle 0060               _doorSetDutyCycleTo 7732  
                    __smallconst 1004                    ??_setPeriodTo 006A  
                 __size_of_delay 0036              ?_doorSetDutyCycleTo 0060  
                 __size_of_frexp 0078                   __size_of_round 008E  
                 __size_of_trunc 0082             ??_doorSetDutyCycleTo 0065  
doorSetDutyCycleTo@PWM10BitValue 006A                   ??_PWMdoor_Init 0001  
                      copy_data0 7396              __end_of_setPeriodTo 8000  
               _setPeriodTo$1244 006B                         _Message1 0081  
                      frexp@eptr 0004                         __Hrparam 0000  
                       __Lrparam 0000                     __Lsmallconst 1004  
               __size_of___ftadd 01AC                 __size_of___ftdiv 00E6  
               __size_of___ftneg 0024                         ___altoft 740C  
               __size_of___ftmul 00F4                 __size_of___fttol 00F4  
                       ___awtoft 733E                         ___ftpack 7684  
                       ___lltoft 73B0                         __ptext10 79E0  
                       __ptext11 78EC                         __ptext12 7806  
                       __ptext13 7AD4                         __ptext14 733E  
                       __ptext15 7684                         __ptext16 7308  
                       __ptext17 72BC                       trunc@expon 004F  
                  __size_of_main 000A                         delay@val 0001  
                setPeriodTo@FOSC 0072                  setPeriodTo@FPWM 0066  
                    _setPeriodTo 7C80             __end_of_PWMdoor_Init 72C4  
            __end_ofgetkey@F4444 1017         __size_of_motordoor_right 0078  
          motordoor_right@Period 007F  
