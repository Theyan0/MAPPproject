

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Feb 08 22:53:14 2024

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           	psect	idataBANK0
    55  006BF4                     __pidataBANK0:
    56                           	opt stack 0
    57                           
    58                           ;initializer for LockMotor@F4628
    59  006BF4  45                 	db	69
    60  006BF5  6E                 	db	110
    61  006BF6  74                 	db	116
    62  006BF7  65                 	db	101
    63  006BF8  72                 	db	114
    64  006BF9  20                 	db	32
    65  006BFA  50                 	db	80
    66  006BFB  49                 	db	73
    67  006BFC  4E                 	db	78
    68  006BFD  20                 	db	32
    69  006BFE  6E                 	db	110
    70  006BFF  75                 	db	117
    71  006C00  6D                 	db	109
    72  006C01  62                 	db	98
    73  006C02  65                 	db	101
    74  006C03  72                 	db	114
    75  006C04  20                 	db	32
    76  006C05  3A                 	db	58
    77  006C06  20                 	db	32
    78  006C07  20                 	db	32
    79  006C08  00                 	db	0
    80                           
    81                           ;initializer for LockMotor@F4631
    82  006C09  4F                 	db	79
    83  006C0A  50                 	db	80
    84  006C0B  45                 	db	69
    85  006C0C  4E                 	db	78
    86  006C0D  49                 	db	73
    87  006C0E  4E                 	db	78
    88  006C0F  47                 	db	71
    89  006C10  20                 	db	32
    90  006C11  4C                 	db	76
    91  006C12  4F                 	db	79
    92  006C13  43                 	db	67
    93  006C14  4B                 	db	75
    94  006C15  00                 	db	0
    95                           
    96                           ;initializer for LockMotor@F4638
    97  006C16  57                 	db	87
    98  006C17  52                 	db	82
    99  006C18  4F                 	db	79
   100  006C19  4E                 	db	78
   101  006C1A  47                 	db	71
   102  006C1B  20                 	db	32
   103  006C1C  50                 	db	80
   104  006C1D  49                 	db	73
   105  006C1E  4E                 	db	78
   106  006C1F  00                 	db	0
   107                           
   108                           	psect	idataBANK1
   109  006B7D                     __pidataBANK1:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _Message1
   113  006B7D  45                 	db	69
   114  006B7E  6E                 	db	110
   115  006B7F  74                 	db	116
   116  006B80  65                 	db	101
   117  006B81  72                 	db	114
   118  006B82  20                 	db	32
   119  006B83  50                 	db	80
   120  006B84  49                 	db	73
   121  006B85  4E                 	db	78
   122  006B86  20                 	db	32
   123  006B87  6E                 	db	110
   124  006B88  75                 	db	117
   125  006B89  6D                 	db	109
   126  006B8A  62                 	db	98
   127  006B8B  65                 	db	101
   128  006B8C  72                 	db	114
   129  006B8D  20                 	db	32
   130  006B8E  3A                 	db	58
   131  006B8F  20                 	db	32
   132  006B90  20                 	db	32
   133  006B91  00                 	db	0
   134                           
   135                           	psect	smallconst
   136  001004                     __psmallconst:
   137                           	opt stack 0
   138  001004  00                 	db	0
   139  001005                     getkey@F4444:
   140                           	opt stack 0
   141  001005  31                 	db	49
   142  001006  32                 	db	50
   143  001007  33                 	db	51
   144  001008  46                 	db	70
   145  001009  34                 	db	52
   146  00100A  35                 	db	53
   147  00100B  36                 	db	54
   148  00100C  45                 	db	69
   149  00100D  37                 	db	55
   150  00100E  38                 	db	56
   151  00100F  39                 	db	57
   152  001010  44                 	db	68
   153  001011  41                 	db	65
   154  001012  30                 	db	48
   155  001013  42                 	db	66
   156  001014  43                 	db	67
   157  001015  20                 	db	32
   158  001016  00                 	db	0
   159  001017                     __end_ofgetkey@F4444:
   160                           	opt stack 0
   161  0000                     _ADCON1	set	4033
   162  0000                     _BAUDCON	set	4024
   163  0000                     _CCP1CON	set	4029
   164  0000                     _CCP2CON	set	4026
   165  0000                     _CCPR1L	set	4030
   166  0000                     _CCPR2L	set	4027
   167  0000                     _OSCCON	set	4051
   168  0000                     _PIR1bits	set	3998
   169  0000                     _PORTAbits	set	3968
   170  0000                     _PORTB	set	3969
   171  0000                     _PORTBbits	set	3969
   172  0000                     _PORTCbits	set	3970
   173  0000                     _PORTD	set	3971
   174  0000                     _PORTDbits	set	3971
   175  0000                     _PR2	set	4043
   176  0000                     _RCSTA	set	4011
   177  0000                     _SPBRG	set	4015
   178  0000                     _SPBRGH	set	4016
   179  0000                     _T2CON	set	4042
   180  0000                     _T2CONbits	set	4042
   181  0000                     _TMR2	set	4044
   182  0000                     _TRISAbits	set	3986
   183  0000                     _TRISCbits	set	3988
   184  0000                     _TRISD	set	3989
   185  0000                     _TXREG	set	4013
   186  0000                     _TXSTA	set	4012
   187  0000                     _TRMT	set	32097
   188                           
   189                           ; #config settings
   190  001017  00                 	db	0	; dummy byte at the end
   191  0000                     
   192                           	psect	cinit
   193  006E6A                     __pcinit:
   194                           	opt stack 0
   195  006E6A                     start_initialization:
   196                           	opt stack 0
   197  006E6A                     __initialization:
   198                           	opt stack 0
   199                           
   200                           ; Clear objects allocated to BANK0 (10 bytes)
   201  006E6A  EE00  F0E3         	lfsr	0,__pbssBANK0
   202  006E6E  0E0A               	movlw	10
   203  006E70                     clear_0:
   204  006E70  6AEE               	clrf	postinc0,c
   205  006E72  06E8               	decf	wreg,f,c
   206  006E74  E1FD               	bnz	clear_0
   207                           
   208                           ; Initialize objects allocated to BANK1 (21 bytes)
   209                           ; load TBLPTR registers with __pidataBANK1
   210  006E76  0E7D               	movlw	low __pidataBANK1
   211  006E78  6EF6               	movwf	tblptrl,c
   212  006E7A  0E6B               	movlw	high __pidataBANK1
   213  006E7C  6EF7               	movwf	tblptrh,c
   214  006E7E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   215  006E80  6EF8               	movwf	tblptru,c
   216  006E82  EE01  F000         	lfsr	0,__pdataBANK1
   217  006E86  EE10 F015          	lfsr	1,21
   218  006E8A                     copy_data0:
   219  006E8A  0009               	tblrd		*+
   220  006E8C  CFF5 FFEE          	movff	tablat,postinc0
   221  006E90  50E5               	movf	postdec1,w,c
   222  006E92  50E1               	movf	fsr1l,w,c
   223  006E94  E1FA               	bnz	copy_data0
   224                           
   225                           ; Initialize objects allocated to BANK0 (44 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  006E96  0EF4               	movlw	low __pidataBANK0
   228  006E98  6EF6               	movwf	tblptrl,c
   229  006E9A  0E6B               	movlw	high __pidataBANK0
   230  006E9C  6EF7               	movwf	tblptrh,c
   231  006E9E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  006EA0  6EF8               	movwf	tblptru,c
   233  006EA2  EE00  F0B7         	lfsr	0,__pdataBANK0
   234  006EA6  EE10 F02C          	lfsr	1,44
   235  006EAA                     copy_data1:
   236  006EAA  0009               	tblrd		*+
   237  006EAC  CFF5 FFEE          	movff	tablat,postinc0
   238  006EB0  50E5               	movf	postdec1,w,c
   239  006EB2  50E1               	movf	fsr1l,w,c
   240  006EB4  E1FA               	bnz	copy_data1
   241  006EB6                     end_of_initialization:
   242                           	opt stack 0
   243  006EB6                     __end_of__initialization:
   244                           	opt stack 0
   245  006EB6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   246  006EB8  6EF8               	movwf	tblptru,c
   247  006EBA  0E10               	movlw	high __Lsmallconst
   248  006EBC  6EF7               	movwf	tblptrh,c
   249  006EBE  0100               	movlb	0
   250  006EC0  EFB5  F035         	goto	_main	;jump to C main() function
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           tblptrl	equ	0xFF6
   254                           tablat	equ	0xFF5
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           postdec1	equ	0xFE5
   258                           fsr1l	equ	0xFE1
   259                           
   260                           	psect	bssBANK0
   261  0000E3                     __pbssBANK0:
   262                           	opt stack 0
   263  0000E3                     _errno:
   264                           	opt stack 0
   265  0000E3                     	ds	2
   266  0000E5                     _wrong:
   267                           	opt stack 0
   268  0000E5                     	ds	2
   269  0000E7                     _key:
   270                           	opt stack 0
   271  0000E7                     	ds	1
   272  0000E8                     _outchar:
   273                           	opt stack 0
   274  0000E8                     	ds	1
   275  0000E9                     _p1:
   276                           	opt stack 0
   277  0000E9                     	ds	1
   278  0000EA                     _p2:
   279                           	opt stack 0
   280  0000EA                     	ds	1
   281  0000EB                     _p3:
   282                           	opt stack 0
   283  0000EB                     	ds	1
   284  0000EC                     _p4:
   285                           	opt stack 0
   286  0000EC                     	ds	1
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	dataBANK0
   297  0000B7                     __pdataBANK0:
   298                           	opt stack 0
   299  0000B7                     LockMotor@F4628:
   300                           	opt stack 0
   301  0000B7                     	ds	21
   302  0000CC                     LockMotor@F4631:
   303                           	opt stack 0
   304  0000CC                     	ds	13
   305  0000D9                     LockMotor@F4638:
   306                           	opt stack 0
   307  0000D9                     	ds	10
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1l	equ	0xFE1
   316                           
   317                           	psect	dataBANK1
   318  000100                     __pdataBANK1:
   319                           	opt stack 0
   320  000100                     _Message1:
   321                           	opt stack 0
   322  000100                     	ds	21
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	cstackBANK0
   333  000060                     __pcstackBANK0:
   334                           	opt stack 0
   335  000060                     ?_round:
   336                           	opt stack 0
   337  000060                     round@x:
   338                           	opt stack 0
   339                           
   340                           ; 3 bytes @ 0x0
   341  000060                     	ds	3
   342  000063                     round@f:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0x3
   346  000063                     	ds	3
   347  000066                     ?_setPeriodTo:
   348                           	opt stack 0
   349  000066                     setPeriodTo@FPWM:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x6
   353  000066                     	ds	4
   354  00006A                     ??_setPeriodTo:
   355                           
   356                           ; 0 bytes @ 0xA
   357  00006A                     	ds	1
   358  00006B                     _setPeriodTo$1529:
   359                           	opt stack 0
   360                           
   361                           ; 3 bytes @ 0xB
   362  00006B                     	ds	3
   363  00006E                     setPeriodTo@TimerPrescaleBits:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0xE
   367  00006E                     	ds	2
   368  000070                     setPeriodTo@TimerPrescaleValue:
   369                           	opt stack 0
   370                           
   371                           ; 2 bytes @ 0x10
   372  000070                     	ds	2
   373  000072                     setPeriodTo@FOSC:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0x12
   377  000072                     	ds	4
   378  000076                     setPeriodTo@clockSelectBits:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x16
   382  000076                     	ds	2
   383  000078                     setPeriodTo@period:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0x18
   387  000078                     	ds	3
   388  00007B                     setPeriodTo@_resolution:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x1B
   392  00007B                     	ds	4
   393  00007F                     motorlock_unlock@Period:
   394                           	opt stack 0
   395  00007F                     motorlock_lock@Period:
   396                           	opt stack 0
   397  00007F                     motordoor_open@Period:
   398                           	opt stack 0
   399  00007F                     motordoor_close@Period:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x1F
   403  00007F                     	ds	2
   404  000081                     LockMotor@Message1:
   405                           	opt stack 0
   406                           
   407                           ; 21 bytes @ 0x21
   408  000081                     	ds	21
   409  000096                     LockMotor@openMsg:
   410                           	opt stack 0
   411                           
   412                           ; 13 bytes @ 0x36
   413  000096                     	ds	13
   414  0000A3                     LockMotor@errorMsg:
   415                           	opt stack 0
   416                           
   417                           ; 10 bytes @ 0x43
   418  0000A3                     	ds	10
   419  0000AD                     LockMotor@p1:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x4D
   423  0000AD                     	ds	1
   424  0000AE                     LockMotor@p2:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x4E
   428  0000AE                     	ds	1
   429  0000AF                     LockMotor@p3:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x4F
   433  0000AF                     	ds	1
   434  0000B0                     LockMotor@p4:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x50
   438  0000B0                     	ds	1
   439  0000B1                     LockMotor@i:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x51
   443  0000B1                     	ds	2
   444  0000B3                     LockMotor@i_594:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x53
   448  0000B3                     	ds	2
   449  0000B5                     LockMotor@i_597:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x55
   453  0000B5                     	ds	2
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1l	equ	0xFE1
   462                           
   463                           	psect	cstackCOMRAM
   464  000001                     __pcstackCOMRAM:
   465                           	opt stack 0
   466  000001                     ??_lcd_strobe:
   467  000001                     ?___lwdiv:
   468                           	opt stack 0
   469  000001                     ?___ftpack:
   470                           	opt stack 0
   471  000001                     UART_Write@data:
   472                           	opt stack 0
   473  000001                     delay_ms@i:
   474                           	opt stack 0
   475  000001                     delay@val:
   476                           	opt stack 0
   477  000001                     ___lwdiv@dividend:
   478                           	opt stack 0
   479  000001                     ___ftpack@arg:
   480                           	opt stack 0
   481  000001                     frexp@value:
   482                           	opt stack 0
   483  000001                     getkey@lookup:
   484                           	opt stack 0
   485                           
   486                           ; 18 bytes @ 0x0
   487  000001                     	ds	1
   488  000002                     ??_lcd_write_cmd:
   489  000002                     ??_lcd_write_data:
   490                           
   491                           ; 0 bytes @ 0x1
   492  000002                     	ds	1
   493  000003                     ??_delay_ms:
   494  000003                     lcd_write_cmd@cmd:
   495                           	opt stack 0
   496  000003                     lcd_write_data@data:
   497                           	opt stack 0
   498  000003                     delay@i:
   499                           	opt stack 0
   500  000003                     ___lwdiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x2
   504  000003                     	ds	1
   505  000004                     lcd_write_cmd@temp2:
   506                           	opt stack 0
   507  000004                     lcd_write_data@temp1:
   508                           	opt stack 0
   509  000004                     ___ftpack@exp:
   510                           	opt stack 0
   511  000004                     delay_ms@j:
   512                           	opt stack 0
   513  000004                     frexp@eptr:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x3
   517  000004                     	ds	1
   518  000005                     ??_lcd_init:
   519  000005                     ___ftpack@sign:
   520                           	opt stack 0
   521  000005                     delay@j:
   522                           	opt stack 0
   523  000005                     ___lwdiv@quotient:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x4
   527  000005                     	ds	1
   528  000006                     ??___ftpack:
   529  000006                     ??_frexp:
   530  000006                     lcd_init@i:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x5
   534  000006                     	ds	1
   535  000007                     ___lwdiv@counter:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x6
   539  000007                     	ds	1
   540  000008                     delay_us@i:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0x7
   544  000008                     	ds	1
   545  000009                     ?___awtoft:
   546                           	opt stack 0
   547  000009                     ?___lltoft:
   548                           	opt stack 0
   549  000009                     ___awtoft@c:
   550                           	opt stack 0
   551  000009                     ___lltoft@c:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x8
   555  000009                     	ds	1
   556  00000A                     delay_us@j:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x9
   560  00000A                     	ds	2
   561  00000C                     ___awtoft@sign:
   562                           	opt stack 0
   563  00000C                     delay_us@lower:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xB
   567  00000C                     	ds	1
   568  00000D                     ??___lltoft:
   569                           
   570                           ; 0 bytes @ 0xC
   571  00000D                     	ds	1
   572  00000E                     ultra@Count:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0xD
   576  00000E                     	ds	3
   577  000011                     ___lltoft@exp:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x10
   581  000011                     	ds	1
   582  000012                     ?___ftdiv:
   583                           	opt stack 0
   584  000012                     ___ftdiv@f1:
   585                           	opt stack 0
   586                           
   587                           ; 3 bytes @ 0x11
   588  000012                     	ds	1
   589  000013                     getkey@keycode:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x12
   593  000013                     	ds	2
   594  000015                     ___ftdiv@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x14
   598  000015                     	ds	3
   599  000018                     ??___ftdiv:
   600                           
   601                           ; 0 bytes @ 0x17
   602  000018                     	ds	3
   603  00001B                     ___ftdiv@cntr:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x1A
   607  00001B                     	ds	1
   608  00001C                     ___ftdiv@f3:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x1B
   612  00001C                     	ds	3
   613  00001F                     ___ftdiv@exp:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1E
   617  00001F                     	ds	1
   618  000020                     ___ftdiv@sign:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x1F
   622  000020                     	ds	1
   623  000021                     ?___ftadd:
   624                           	opt stack 0
   625  000021                     ___ftadd@f1:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x20
   629  000021                     	ds	3
   630  000024                     ___ftadd@f2:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x23
   634  000024                     	ds	3
   635  000027                     ??___ftadd:
   636                           
   637                           ; 0 bytes @ 0x26
   638  000027                     	ds	3
   639  00002A                     ___ftadd@sign:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x29
   643  00002A                     	ds	1
   644  00002B                     ___ftadd@exp2:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x2A
   648  00002B                     	ds	1
   649  00002C                     ___ftadd@exp1:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x2B
   653  00002C                     	ds	1
   654  00002D                     ?___ftmul:
   655                           	opt stack 0
   656  00002D                     ___ftmul@f1:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x2C
   660  00002D                     	ds	3
   661  000030                     ___ftmul@f2:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x2F
   665  000030                     	ds	3
   666  000033                     ??___ftmul:
   667                           
   668                           ; 0 bytes @ 0x32
   669  000033                     	ds	3
   670  000036                     ___ftmul@exp:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x35
   674  000036                     	ds	1
   675  000037                     ___ftmul@f3_as_product:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x36
   679  000037                     	ds	3
   680  00003A                     ___ftmul@cntr:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x39
   684  00003A                     	ds	1
   685  00003B                     ___ftmul@sign:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x3A
   689  00003B                     	ds	1
   690  00003C                     ?___fttol:
   691                           	opt stack 0
   692  00003C                     ___fttol@f1:
   693                           	opt stack 0
   694                           
   695                           ; 3 bytes @ 0x3B
   696  00003C                     	ds	4
   697  000040                     ??___fttol:
   698                           
   699                           ; 0 bytes @ 0x3F
   700  000040                     	ds	5
   701  000045                     ___fttol@sign1:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x44
   705  000045                     	ds	1
   706  000046                     ___fttol@lval:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x45
   710  000046                     	ds	4
   711  00004A                     ___fttol@exp1:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x49
   715  00004A                     	ds	1
   716  00004B                     ?___altoft:
   717                           	opt stack 0
   718  00004B                     SetDutyCycleTo@Duty_cycle:
   719                           	opt stack 0
   720  00004B                     doorSetDutyCycleTo@Duty_cycle:
   721                           	opt stack 0
   722  00004B                     ___altoft@c:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x4A
   726  00004B                     	ds	3
   727  00004E                     SetDutyCycleTo@Period:
   728                           	opt stack 0
   729  00004E                     doorSetDutyCycleTo@Period:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x4D
   733  00004E                     	ds	1
   734  00004F                     ??___altoft:
   735                           
   736                           ; 0 bytes @ 0x4E
   737  00004F                     	ds	1
   738  000050                     ??_SetDutyCycleTo:
   739  000050                     ??_doorSetDutyCycleTo:
   740                           
   741                           ; 0 bytes @ 0x4F
   742  000050                     	ds	2
   743  000052                     _SetDutyCycleTo$1530:
   744                           	opt stack 0
   745  000052                     _doorSetDutyCycleTo$1531:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x51
   749  000052                     	ds	1
   750  000053                     ___altoft@exp:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x52
   754  000053                     	ds	1
   755  000054                     ___altoft@sign:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x53
   759  000054                     	ds	1
   760  000055                     ?_trunc:
   761                           	opt stack 0
   762  000055                     SetDutyCycleTo@PWM10BitValue:
   763                           	opt stack 0
   764  000055                     doorSetDutyCycleTo@PWM10BitValue:
   765                           	opt stack 0
   766  000055                     trunc@x:
   767                           	opt stack 0
   768                           
   769                           ; 3 bytes @ 0x54
   770  000055                     	ds	3
   771  000058                     trunc@i:
   772                           	opt stack 0
   773                           
   774                           ; 3 bytes @ 0x57
   775  000058                     	ds	3
   776  00005B                     trunc@expon:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x5A
   780  00005B                     	ds	2
   781  00005D                     ?___ftneg:
   782                           	opt stack 0
   783  00005D                     ___ftneg@f1:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x5C
   787  00005D                     	ds	3
   788  000060                     tblptru	equ	0xFF8
   789                           tblptrh	equ	0xFF7
   790                           tblptrl	equ	0xFF6
   791                           tablat	equ	0xFF5
   792                           postinc0	equ	0xFEE
   793                           wreg	equ	0xFE8
   794                           postdec1	equ	0xFE5
   795                           fsr1l	equ	0xFE1
   796                           
   797                           ; 0 bytes @ 0x5F
   798 ;;
   799 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   800 ;;
   801 ;; *************** function _main *****************
   802 ;; Defined at:
   803 ;;		line 5 in file "newmain.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;		None               void
   810 ;; Registers used:
   811 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels required when called:    7
   823 ;; This function calls:
   824 ;;		_LockMotor
   825 ;;		_ultra
   826 ;; This function is called by:
   827 ;;		Startup code after reset
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text0
   832  006B6A                     __ptext0:
   833                           	opt stack 0
   834  006B6A                     _main:
   835                           	opt stack 24
   836                           
   837                           ;newmain.c: 6: TRISAbits.TRISA0 = 1;
   838                           
   839                           ;incstack = 0
   840  006B6A  8092               	bsf	3986,0,c	;volatile
   841                           
   842                           ;newmain.c: 7: ADCON1 = 0b00001111;
   843  006B6C  0E0F               	movlw	15
   844  006B6E  6EC1               	movwf	4033,c	;volatile
   845                           
   846                           ;newmain.c: 9: ultra();
   847                           
   848                           ;newmain.c: 8: while(1){
   849  006B70  EC88  F039         	call	_ultra	;wreg free
   850                           
   851                           ;newmain.c: 10: LockMotor();
   852  006B74  EC35  F03D         	call	_LockMotor	;wreg free
   853                           
   854                           ;newmain.c: 11: return;
   855  006B78  EF00  F008         	goto	start
   856  006B7C                     __end_of_main:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           postdec1	equ	0xFE5
   865                           fsr1l	equ	0xFE1
   866                           
   867 ;; *************** function _ultra *****************
   868 ;; Defined at:
   869 ;;		line 5 in file "UltraSound.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  Count           2   13[COMRAM] unsigned int 
   874 ;; Return value:  Size  Location     Type
   875 ;;		None               void
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0, cstack
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   883 ;;      Params:         0       0       0       0       0       0       0       0       0
   884 ;;      Locals:         2       0       0       0       0       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0       0       0       0       0
   886 ;;      Totals:         2       0       0       0       0       0       0       0       0
   887 ;;Total ram usage:        2 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; Hardware stack levels required when called:    3
   890 ;; This function calls:
   891 ;;		_delay_ms
   892 ;;		_delay_us
   893 ;;		_lcd_backlight_off
   894 ;;		_lcd_backlight_on
   895 ;;		_lcd_init
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text1
   902  007310                     __ptext1:
   903                           	opt stack 0
   904  007310                     _ultra:
   905                           	opt stack 27
   906                           
   907                           ;UltraSound.c: 6: TRISAbits.TRISA1 = 1;
   908                           
   909                           ;incstack = 0
   910  007310  8292               	bsf	3986,1,c	;volatile
   911                           
   912                           ;UltraSound.c: 7: TRISAbits.TRISA2 = 0;
   913  007312  9492               	bcf	3986,2,c	;volatile
   914                           
   915                           ;UltraSound.c: 8: TRISAbits.TRISA4 = 1;
   916  007314  8892               	bsf	3986,4,c	;volatile
   917                           
   918                           ;UltraSound.c: 9: TRISAbits.TRISA3 = 0;
   919  007316  9692               	bcf	3986,3,c	;volatile
   920                           
   921                           ;UltraSound.c: 10: ADCON1 = 0b00001111;
   922  007318  0E0F               	movlw	15
   923  00731A  6EC1               	movwf	4033,c	;volatile
   924                           
   925                           ;UltraSound.c: 12: PORTAbits.RA4 = 0;
   926  00731C  9880               	bcf	3968,4,c	;volatile
   927                           
   928                           ;UltraSound.c: 14: lcd_init();
   929  00731E  ECC8  F037         	call	_lcd_init	;wreg free
   930  007322                     l2422:
   931                           
   932                           ;UltraSound.c: 17: unsigned int Count = 0;
   933  007322  0E00               	movlw	0
   934  007324  6E0F               	movwf	ultra@Count+1,c
   935  007326  0E00               	movlw	0
   936  007328  6E0E               	movwf	ultra@Count,c
   937                           
   938                           ;UltraSound.c: 20: PORTAbits.RA2 = 1;
   939  00732A  8480               	bsf	3968,2,c	;volatile
   940                           
   941                           ;UltraSound.c: 21: delay_us(10);
   942  00732C  0E00               	movlw	0
   943  00732E  6E09               	movwf	delay_us@i+1,c
   944  007330  0E0A               	movlw	10
   945  007332  6E08               	movwf	delay_us@i,c
   946  007334  EC79  F038         	call	_delay_us	;wreg free
   947                           
   948                           ;UltraSound.c: 22: PORTAbits.RA2 = 0;
   949  007338  9480               	bcf	3968,2,c	;volatile
   950                           
   951                           ;UltraSound.c: 23: delay_ms(1);
   952  00733A  0E00               	movlw	0
   953  00733C  6E02               	movwf	delay_ms@i+1,c
   954  00733E  0E01               	movlw	1
   955  007340  6E01               	movwf	delay_ms@i,c
   956  007342  EC10  F036         	call	_delay_ms	;wreg free
   957  007346                     l95:
   958  007346  A280               	btfss	3968,1,c	;volatile
   959  007348  D7FE               	goto	l95
   960                           
   961                           ;UltraSound.c: 27: Count = 0;
   962  00734A  0E00               	movlw	0
   963  00734C  6E0F               	movwf	ultra@Count+1,c
   964  00734E  0E00               	movlw	0
   965  007350  6E0E               	movwf	ultra@Count,c
   966                           
   967                           ;UltraSound.c: 29: while ((PORTAbits.RA1 == 1) && (Count < 200)) {
   968  007352  D008               	goto	l2434
   969  007354                     l2430:
   970                           
   971                           ;UltraSound.c: 30: delay_us(58);
   972  007354  0E00               	movlw	0
   973  007356  6E09               	movwf	delay_us@i+1,c
   974  007358  0E3A               	movlw	58
   975  00735A  6E08               	movwf	delay_us@i,c
   976  00735C  EC79  F038         	call	_delay_us	;wreg free
   977                           
   978                           ;UltraSound.c: 31: Count++;
   979  007360  4A0E               	infsnz	ultra@Count,f,c
   980  007362  2A0F               	incf	ultra@Count+1,f,c
   981  007364                     l2434:
   982  007364  A280               	btfss	3968,1,c	;volatile
   983  007366  D006               	goto	l102
   984  007368  500F               	movf	ultra@Count+1,w,c
   985  00736A  E104               	bnz	l102
   986  00736C  0EC8               	movlw	200
   987  00736E  5C0E               	subwf	ultra@Count,w,c
   988  007370  A0D8               	btfss	status,0,c
   989  007372  D7F0               	goto	l2430
   990  007374                     l102:
   991                           
   992                           ;UltraSound.c: 32: }
   993                           ;UltraSound.c: 34: PORTAbits.RA3 = 0;
   994  007374  9680               	bcf	3968,3,c	;volatile
   995                           
   996                           ;UltraSound.c: 35: while (PORTAbits.RA4 == 1 ) {
   997  007376  D007               	goto	l2440
   998  007378                     l104:
   999                           
  1000                           ;UltraSound.c: 36: PORTAbits.RA3 = 1;
  1001  007378  8680               	bsf	3968,3,c	;volatile
  1002                           
  1003                           ;UltraSound.c: 37: delay_ms(100);
  1004  00737A  0E00               	movlw	0
  1005  00737C  6E02               	movwf	delay_ms@i+1,c
  1006  00737E  0E64               	movlw	100
  1007  007380  6E01               	movwf	delay_ms@i,c
  1008  007382  EC10  F036         	call	_delay_ms	;wreg free
  1009  007386                     l2440:
  1010  007386  B880               	btfsc	3968,4,c	;volatile
  1011  007388  D7F7               	goto	l104
  1012                           
  1013                           ;UltraSound.c: 38: }
  1014                           ;UltraSound.c: 40: if (Count <= 5) {
  1015  00738A  500F               	movf	ultra@Count+1,w,c
  1016  00738C  E107               	bnz	l2448
  1017  00738E  0E06               	movlw	6
  1018  007390  5C0E               	subwf	ultra@Count,w,c
  1019  007392  B0D8               	btfsc	status,0,c
  1020  007394  D003               	goto	l2448
  1021                           
  1022                           ;UltraSound.c: 42: lcd_backlight_on();
  1023  007396  ECA3  F035         	call	_lcd_backlight_on	;wreg free
  1024                           
  1025                           ;UltraSound.c: 43: break;
  1026  00739A  0012               	return	
  1027  00739C                     l2448:
  1028                           
  1029                           ;UltraSound.c: 45: lcd_backlight_off();
  1030  00739C  ECA5  F035         	call	_lcd_backlight_off	;wreg free
  1031                           
  1032                           ;UltraSound.c: 46: }
  1033                           ;UltraSound.c: 47: delay_ms(100);
  1034  0073A0  0E00               	movlw	0
  1035  0073A2  6E02               	movwf	delay_ms@i+1,c
  1036  0073A4  0E64               	movlw	100
  1037  0073A6  6E01               	movwf	delay_ms@i,c
  1038  0073A8  EC10  F036         	call	_delay_ms	;wreg free
  1039  0073AC  D7BA               	goto	l2422
  1040  0073AE                     __end_of_ultra:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec1	equ	0xFE5
  1049                           fsr1l	equ	0xFE1
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _lcd_backlight_off *****************
  1053 ;; Defined at:
  1054 ;;		line 23 in file "lcd_utilities.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		None
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_ultra
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text2
  1082  006B4A                     __ptext2:
  1083                           	opt stack 0
  1084  006B4A                     _lcd_backlight_off:
  1085                           	opt stack 29
  1086                           
  1087                           ;lcd_utilities.c: 24: PORTDbits.RD7 = 0;
  1088                           
  1089                           ;incstack = 0
  1090  006B4A  9E83               	bcf	3971,7,c	;volatile
  1091  006B4C  0012               	return		;funcret
  1092  006B4E                     __end_of_lcd_backlight_off:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1l	equ	0xFE1
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _delay_us *****************
  1105 ;; Defined at:
  1106 ;;		line 17 in file "delays_utilities.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;  i               2    7[COMRAM] unsigned int 
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  lower           2   11[COMRAM] unsigned int 
  1111 ;;  j               2    9[COMRAM] unsigned int 
  1112 ;; Return value:  Size  Location     Type
  1113 ;;		None               void
  1114 ;; Registers used:
  1115 ;;		wreg, status,2, status,0, cstack
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1121 ;;      Params:         2       0       0       0       0       0       0       0       0
  1122 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1124 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1125 ;;Total ram usage:        6 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; Hardware stack levels required when called:    1
  1128 ;; This function calls:
  1129 ;;		___lwdiv
  1130 ;; This function is called by:
  1131 ;;		_ultra
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text3
  1136  0070F2                     __ptext3:
  1137                           	opt stack 0
  1138  0070F2                     _delay_us:
  1139                           	opt stack 28
  1140                           
  1141                           ;delays_utilities.c: 19: unsigned int j,lower;
  1142                           ;delays_utilities.c: 22: lower = i;
  1143                           
  1144                           ;incstack = 0
  1145  0070F2  C008  F00C         	movff	delay_us@i,delay_us@lower
  1146  0070F6  C009  F00D         	movff	delay_us@i+1,delay_us@lower+1
  1147                           
  1148                           ;delays_utilities.c: 23: lower = lower/20;
  1149  0070FA  C00C  F001         	movff	delay_us@lower,___lwdiv@dividend
  1150  0070FE  C00D  F002         	movff	delay_us@lower+1,___lwdiv@dividend+1
  1151  007102  0E00               	movlw	0
  1152  007104  6E04               	movwf	___lwdiv@divisor+1,c
  1153  007106  0E14               	movlw	20
  1154  007108  6E03               	movwf	___lwdiv@divisor,c
  1155  00710A  EC0C  F037         	call	___lwdiv	;wreg free
  1156  00710E  C001  F00C         	movff	?___lwdiv,delay_us@lower
  1157  007112  C002  F00D         	movff	?___lwdiv+1,delay_us@lower+1
  1158                           
  1159                           ;delays_utilities.c: 25: if (i< 5)
  1160  007116  5009               	movf	delay_us@i+1,w,c
  1161  007118  E104               	bnz	l2362
  1162  00711A  0E05               	movlw	5
  1163  00711C  5C08               	subwf	delay_us@i,w,c
  1164  00711E  A0D8               	btfss	status,0,c
  1165  007120  0012               	return	
  1166  007122                     l2362:
  1167                           
  1168                           ;delays_utilities.c: 29: else
  1169                           ;delays_utilities.c: 30: if(i<10)
  1170  007122  5009               	movf	delay_us@i+1,w,c
  1171  007124  E108               	bnz	l2366
  1172  007126  0E0A               	movlw	10
  1173  007128  5C08               	subwf	delay_us@i,w,c
  1174  00712A  B0D8               	btfsc	status,0,c
  1175  00712C  D004               	goto	l2366
  1176                           
  1177                           ;delays_utilities.c: 31: {
  1178                           ;delays_utilities.c: 32: _delay((unsigned long)((7)*(48000000/4000000.0)));
  1179  00712E  0E1C               	movlw	28
  1180  007130                     u2077:
  1181  007130  2EE8               	decfsz	wreg,f,c
  1182  007132  D7FE               	goto	u2077
  1183                           
  1184                           ;delays_utilities.c: 33: }
  1185  007134  0012               	return	
  1186  007136                     l2366:
  1187                           
  1188                           ;delays_utilities.c: 34: else if(i< 20)
  1189  007136  5009               	movf	delay_us@i+1,w,c
  1190  007138  E108               	bnz	l2370
  1191  00713A  0E14               	movlw	20
  1192  00713C  5C08               	subwf	delay_us@i,w,c
  1193  00713E  B0D8               	btfsc	status,0,c
  1194  007140  D004               	goto	l2370
  1195                           
  1196                           ;delays_utilities.c: 35: {
  1197                           ;delays_utilities.c: 36: _delay((unsigned long)((15)*(48000000/4000000.0)));
  1198  007142  0E3C               	movlw	60
  1199  007144                     u2087:
  1200  007144  2EE8               	decfsz	wreg,f,c
  1201  007146  D7FE               	goto	u2087
  1202                           
  1203                           ;delays_utilities.c: 37: }
  1204  007148  0012               	return	
  1205  00714A                     l2370:
  1206                           
  1207                           ;delays_utilities.c: 38: else
  1208                           ;delays_utilities.c: 39: for(j=0;j<lower;j++)_delay((unsigned long)((20)*(48000000/40000
      +                          00.0)));
  1209  00714A  0E00               	movlw	0
  1210  00714C  6E0B               	movwf	delay_us@j+1,c
  1211  00714E  0E00               	movlw	0
  1212  007150  6E0A               	movwf	delay_us@j,c
  1213  007152  D005               	goto	l73
  1214  007154                     l2372:
  1215  007154  0E50               	movlw	80
  1216  007156                     u2097:
  1217  007156  2EE8               	decfsz	wreg,f,c
  1218  007158  D7FE               	goto	u2097
  1219  00715A  4A0A               	infsnz	delay_us@j,f,c
  1220  00715C  2A0B               	incf	delay_us@j+1,f,c
  1221  00715E                     l73:
  1222  00715E  500C               	movf	delay_us@lower,w,c
  1223  007160  5C0A               	subwf	delay_us@j,w,c
  1224  007162  500D               	movf	delay_us@lower+1,w,c
  1225  007164  580B               	subwfb	delay_us@j+1,w,c
  1226  007166  B0D8               	btfsc	status,0,c
  1227  007168  0012               	return	
  1228  00716A  D7F4               	goto	l2372
  1229  00716C                     __end_of_delay_us:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           postdec1	equ	0xFE5
  1238                           fsr1l	equ	0xFE1
  1239                           status	equ	0xFD8
  1240                           
  1241 ;; *************** function ___lwdiv *****************
  1242 ;; Defined at:
  1243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  dividend        2    0[COMRAM] unsigned int 
  1246 ;;  divisor         2    2[COMRAM] unsigned int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  quotient        2    4[COMRAM] unsigned int 
  1249 ;;  counter         1    6[COMRAM] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  2    0[COMRAM] unsigned int 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1259 ;;      Params:         4       0       0       0       0       0       0       0       0
  1260 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1262 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1263 ;;Total ram usage:        7 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_delay_us
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text4
  1273  006E18                     __ptext4:
  1274                           	opt stack 0
  1275  006E18                     ___lwdiv:
  1276                           	opt stack 28
  1277                           
  1278                           ;incstack = 0
  1279  006E18  0E00               	movlw	0
  1280  006E1A  6E06               	movwf	___lwdiv@quotient+1,c
  1281  006E1C  0E00               	movlw	0
  1282  006E1E  6E05               	movwf	___lwdiv@quotient,c
  1283  006E20  5003               	movf	___lwdiv@divisor,w,c
  1284  006E22  1004               	iorwf	___lwdiv@divisor+1,w,c
  1285  006E24  B4D8               	btfsc	status,2,c
  1286  006E26  D01C               	goto	l743
  1287  006E28  0E01               	movlw	1
  1288  006E2A  6E07               	movwf	___lwdiv@counter,c
  1289  006E2C  D004               	goto	l2254
  1290  006E2E                     l2252:
  1291  006E2E  90D8               	bcf	status,0,c
  1292  006E30  3603               	rlcf	___lwdiv@divisor,f,c
  1293  006E32  3604               	rlcf	___lwdiv@divisor+1,f,c
  1294  006E34  2A07               	incf	___lwdiv@counter,f,c
  1295  006E36                     l2254:
  1296  006E36  AE04               	btfss	___lwdiv@divisor+1,7,c
  1297  006E38  D7FA               	goto	l2252
  1298  006E3A                     l2256:
  1299  006E3A  90D8               	bcf	status,0,c
  1300  006E3C  3605               	rlcf	___lwdiv@quotient,f,c
  1301  006E3E  3606               	rlcf	___lwdiv@quotient+1,f,c
  1302  006E40  5003               	movf	___lwdiv@divisor,w,c
  1303  006E42  5C01               	subwf	___lwdiv@dividend,w,c
  1304  006E44  5004               	movf	___lwdiv@divisor+1,w,c
  1305  006E46  5802               	subwfb	___lwdiv@dividend+1,w,c
  1306  006E48  A0D8               	btfss	status,0,c
  1307  006E4A  D005               	goto	l2264
  1308  006E4C  5003               	movf	___lwdiv@divisor,w,c
  1309  006E4E  5E01               	subwf	___lwdiv@dividend,f,c
  1310  006E50  5004               	movf	___lwdiv@divisor+1,w,c
  1311  006E52  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1312  006E54  8005               	bsf	___lwdiv@quotient,0,c
  1313  006E56                     l2264:
  1314  006E56  90D8               	bcf	status,0,c
  1315  006E58  3204               	rrcf	___lwdiv@divisor+1,f,c
  1316  006E5A  3203               	rrcf	___lwdiv@divisor,f,c
  1317  006E5C  2E07               	decfsz	___lwdiv@counter,f,c
  1318  006E5E  D7ED               	goto	l2256
  1319  006E60                     l743:
  1320  006E60  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1321  006E64  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1322  006E68  0012               	return		;funcret
  1323  006E6A                     __end_of___lwdiv:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           fsr1l	equ	0xFE1
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function _LockMotor *****************
  1336 ;; Defined at:
  1337 ;;		line 43 in file "LockMotor.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  i               2   85[BANK0 ] int 
  1342 ;;  i               2   83[BANK0 ] int 
  1343 ;;  errorMsg       10   67[BANK0 ] unsigned char [10]
  1344 ;;  openMsg        13   54[BANK0 ] unsigned char [13]
  1345 ;;  i               2   81[BANK0 ] int 
  1346 ;;  Message1       21   33[BANK0 ] unsigned char [21]
  1347 ;;  p4              1   80[BANK0 ] unsigned char 
  1348 ;;  p3              1   79[BANK0 ] unsigned char 
  1349 ;;  p2              1   78[BANK0 ] unsigned char 
  1350 ;;  p1              1   77[BANK0 ] unsigned char 
  1351 ;;  key             1    0        unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;		None               void
  1354 ;; Registers used:
  1355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         0      54       0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1364 ;;      Totals:         0      54       0       0       0       0       0       0       0
  1365 ;;Total ram usage:       54 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    6
  1368 ;; This function calls:
  1369 ;;		_UART_Init
  1370 ;;		_UART_Write
  1371 ;;		_delay_ms
  1372 ;;		_getkey
  1373 ;;		_lcd_backlight_on
  1374 ;;		_lcd_init
  1375 ;;		_lcd_write_cmd
  1376 ;;		_lcd_write_data
  1377 ;;		_motordoor_close
  1378 ;;		_motordoor_open
  1379 ;;		_motorlock_lock
  1380 ;;		_motorlock_unlock
  1381 ;; This function is called by:
  1382 ;;		_main
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text5
  1387  007A6A                     __ptext5:
  1388                           	opt stack 0
  1389  007A6A                     _LockMotor:
  1390                           	opt stack 24
  1391                           
  1392                           ;LockMotor.c: 44: TRISAbits.TRISA0 = 1;
  1393                           
  1394                           ;incstack = 0
  1395  007A6A  8092               	bsf	3986,0,c	;volatile
  1396                           
  1397                           ;LockMotor.c: 45: ADCON1 = 0b00001111;
  1398  007A6C  0E0F               	movlw	15
  1399  007A6E  6EC1               	movwf	4033,c	;volatile
  1400                           
  1401                           ;LockMotor.c: 46: unsigned char key, p1, p2, p3, p4;
  1402                           ;LockMotor.c: 49: lcd_init();
  1403  007A70  ECC8  F037         	call	_lcd_init	;wreg free
  1404                           
  1405                           ;LockMotor.c: 50: UART_Init();
  1406  007A74  ECC9  F035         	call	_UART_Init	;wreg free
  1407                           
  1408                           ;LockMotor.c: 53: lcd_backlight_on();
  1409  007A78  ECA3  F035         	call	_lcd_backlight_on	;wreg free
  1410  007A7C                     l197:
  1411                           
  1412                           ;LockMotor.c: 57: lcd_write_cmd(0x01);
  1413  007A7C  0E01               	movlw	1
  1414  007A7E  EC90  F037         	call	_lcd_write_cmd
  1415                           
  1416                           ;LockMotor.c: 60: lcd_write_cmd(0x80);
  1417  007A82  0E80               	movlw	128
  1418  007A84  EC90  F037         	call	_lcd_write_cmd
  1419                           
  1420                           ;LockMotor.c: 61: char Message1[] = "Enter PIN number :  ";
  1421  007A88  EE20  F0B7         	lfsr	2,LockMotor@F4628
  1422  007A8C  EE10  F081         	lfsr	1,LockMotor@Message1
  1423  007A90  0E14               	movlw	20
  1424  007A92                     u1921:
  1425  007A92  CFDB FFE3          	movff	plusw2,plusw1
  1426  007A96  06E8               	decf	wreg,f,c
  1427  007A98  E2FC               	bc	u1921
  1428                           
  1429                           ;LockMotor.c: 62: for (int i = 0; Message1[i] != '\0'; i++) {
  1430  007A9A  0E00               	movlw	0
  1431  007A9C  0100               	movlb	0	; () banked
  1432  007A9E  6FB2               	movwf	(LockMotor@i+1)& (0+255),b
  1433  007AA0  0E00               	movlw	0
  1434  007AA2  6FB1               	movwf	LockMotor@i& (0+255),b
  1435  007AA4  D00E               	goto	l2470
  1436  007AA6                     l2466:
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;LockMotor.c: 63: lcd_write_data(Message1[i]);
  1440  007AA6  0E81               	movlw	low LockMotor@Message1
  1441  007AA8  0100               	movlb	0	; () banked
  1442  007AAA  25B1               	addwf	LockMotor@i& (0+255),w,b
  1443  007AAC  6ED9               	movwf	fsr2l,c
  1444  007AAE  0E00               	movlw	high LockMotor@Message1
  1445  007AB0  0100               	movlb	0	; () banked
  1446  007AB2  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
  1447  007AB4  6EDA               	movwf	fsr2h,c
  1448  007AB6  50DF               	movf	indf2,w,c
  1449  007AB8  EC3E  F039         	call	_lcd_write_data
  1450  007ABC  0100               	movlb	0	; () banked
  1451  007ABE  4BB1               	infsnz	LockMotor@i& (0+255),f,b
  1452  007AC0  2BB2               	incf	(LockMotor@i+1)& (0+255),f,b
  1453  007AC2                     l2470:
  1454                           
  1455                           ; BSR set to: 0
  1456  007AC2  0E81               	movlw	low LockMotor@Message1
  1457  007AC4  0100               	movlb	0	; () banked
  1458  007AC6  25B1               	addwf	LockMotor@i& (0+255),w,b
  1459  007AC8  6ED9               	movwf	fsr2l,c
  1460  007ACA  0E00               	movlw	high LockMotor@Message1
  1461  007ACC  0100               	movlb	0	; () banked
  1462  007ACE  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
  1463  007AD0  6EDA               	movwf	fsr2h,c
  1464  007AD2  50DF               	movf	indf2,w,c
  1465  007AD4  A4D8               	btfss	status,2,c
  1466  007AD6  D7E7               	goto	l2466
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;LockMotor.c: 64: }
  1470                           ;LockMotor.c: 67: lcd_write_cmd(0xC0);
  1471                           
  1472                           ; BSR set to: 0
  1473  007AD8  0EC0               	movlw	192
  1474  007ADA  EC90  F037         	call	_lcd_write_cmd
  1475                           
  1476                           ;LockMotor.c: 68: p1 = getkey(); lcd_write_data('*');
  1477  007ADE  EC2A  F036         	call	_getkey	;wreg free
  1478  007AE2  0100               	movlb	0	; () banked
  1479  007AE4  6FAD               	movwf	LockMotor@p1& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482  007AE6  0E2A               	movlw	42
  1483  007AE8  EC3E  F039         	call	_lcd_write_data
  1484                           
  1485                           ;LockMotor.c: 69: p2 = getkey(); lcd_write_data('*');
  1486  007AEC  EC2A  F036         	call	_getkey	;wreg free
  1487  007AF0  0100               	movlb	0	; () banked
  1488  007AF2  6FAE               	movwf	LockMotor@p2& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491  007AF4  0E2A               	movlw	42
  1492  007AF6  EC3E  F039         	call	_lcd_write_data
  1493                           
  1494                           ;LockMotor.c: 70: p3 = getkey(); lcd_write_data('*');
  1495  007AFA  EC2A  F036         	call	_getkey	;wreg free
  1496  007AFE  0100               	movlb	0	; () banked
  1497  007B00  6FAF               	movwf	LockMotor@p3& (0+255),b
  1498  007B02  0E2A               	movlw	42
  1499  007B04  EC3E  F039         	call	_lcd_write_data
  1500                           
  1501                           ;LockMotor.c: 71: p4 = getkey(); lcd_write_data('*');
  1502  007B08  EC2A  F036         	call	_getkey	;wreg free
  1503  007B0C  0100               	movlb	0	; () banked
  1504  007B0E  6FB0               	movwf	LockMotor@p4& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507  007B10  0E2A               	movlw	42
  1508  007B12  EC3E  F039         	call	_lcd_write_data
  1509                           
  1510                           ;LockMotor.c: 74: if (p1 == '4' && p2 == '5' && p3 == '5' && p4 == '0') {
  1511  007B16  0E34               	movlw	52
  1512  007B18  0100               	movlb	0	; () banked
  1513  007B1A  19AD               	xorwf	LockMotor@p1& (0+255),w,b
  1514  007B1C  A4D8               	btfss	status,2,c
  1515  007B1E  D066               	goto	l2524
  1516                           
  1517                           ; BSR set to: 0
  1518  007B20  0E35               	movlw	53
  1519  007B22  0100               	movlb	0	; () banked
  1520  007B24  19AE               	xorwf	LockMotor@p2& (0+255),w,b
  1521  007B26  A4D8               	btfss	status,2,c
  1522  007B28  D061               	goto	l2524
  1523                           
  1524                           ; BSR set to: 0
  1525  007B2A  0E35               	movlw	53
  1526  007B2C  0100               	movlb	0	; () banked
  1527  007B2E  19AF               	xorwf	LockMotor@p3& (0+255),w,b
  1528  007B30  A4D8               	btfss	status,2,c
  1529  007B32  D05C               	goto	l2524
  1530                           
  1531                           ; BSR set to: 0
  1532  007B34  0E30               	movlw	48
  1533  007B36  0100               	movlb	0	; () banked
  1534  007B38  19B0               	xorwf	LockMotor@p4& (0+255),w,b
  1535  007B3A  A4D8               	btfss	status,2,c
  1536  007B3C  D057               	goto	l2524
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;LockMotor.c: 76: lcd_write_cmd(0x01);
  1540  007B3E  0E01               	movlw	1
  1541  007B40  EC90  F037         	call	_lcd_write_cmd
  1542                           
  1543                           ;LockMotor.c: 77: lcd_write_cmd(0x80);
  1544  007B44  0E80               	movlw	128
  1545  007B46  EC90  F037         	call	_lcd_write_cmd
  1546                           
  1547                           ;LockMotor.c: 78: char openMsg[] = "OPENING LOCK";
  1548  007B4A  EE20  F0CC         	lfsr	2,LockMotor@F4631
  1549  007B4E  EE10  F096         	lfsr	1,LockMotor@openMsg
  1550  007B52  0E0C               	movlw	12
  1551  007B54                     u1981:
  1552  007B54  CFDB FFE3          	movff	plusw2,plusw1
  1553  007B58  06E8               	decf	wreg,f,c
  1554  007B5A  E2FC               	bc	u1981
  1555                           
  1556                           ;LockMotor.c: 79: for (int i = 0; openMsg[i] != '\0'; i++) {
  1557  007B5C  0E00               	movlw	0
  1558  007B5E  0100               	movlb	0	; () banked
  1559  007B60  6FB4               	movwf	(LockMotor@i_594+1)& (0+255),b
  1560  007B62  0E00               	movlw	0
  1561  007B64  6FB3               	movwf	LockMotor@i_594& (0+255),b
  1562  007B66  D00E               	goto	l2504
  1563  007B68                     l2500:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;LockMotor.c: 80: lcd_write_data(openMsg[i]);
  1567  007B68  0E96               	movlw	low LockMotor@openMsg
  1568  007B6A  0100               	movlb	0	; () banked
  1569  007B6C  25B3               	addwf	LockMotor@i_594& (0+255),w,b
  1570  007B6E  6ED9               	movwf	fsr2l,c
  1571  007B70  0E00               	movlw	high LockMotor@openMsg
  1572  007B72  0100               	movlb	0	; () banked
  1573  007B74  21B4               	addwfc	(LockMotor@i_594+1)& (0+255),w,b
  1574  007B76  6EDA               	movwf	fsr2h,c
  1575  007B78  50DF               	movf	indf2,w,c
  1576  007B7A  EC3E  F039         	call	_lcd_write_data
  1577  007B7E  0100               	movlb	0	; () banked
  1578  007B80  4BB3               	infsnz	LockMotor@i_594& (0+255),f,b
  1579  007B82  2BB4               	incf	(LockMotor@i_594+1)& (0+255),f,b
  1580  007B84                     l2504:
  1581                           
  1582                           ; BSR set to: 0
  1583  007B84  0E96               	movlw	low LockMotor@openMsg
  1584  007B86  0100               	movlb	0	; () banked
  1585  007B88  25B3               	addwf	LockMotor@i_594& (0+255),w,b
  1586  007B8A  6ED9               	movwf	fsr2l,c
  1587  007B8C  0E00               	movlw	high LockMotor@openMsg
  1588  007B8E  0100               	movlb	0	; () banked
  1589  007B90  21B4               	addwfc	(LockMotor@i_594+1)& (0+255),w,b
  1590  007B92  6EDA               	movwf	fsr2h,c
  1591  007B94  50DF               	movf	indf2,w,c
  1592  007B96  A4D8               	btfss	status,2,c
  1593  007B98  D7E7               	goto	l2500
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;LockMotor.c: 81: }
  1597                           ;LockMotor.c: 82: delay_ms(1000);
  1598                           
  1599                           ; BSR set to: 0
  1600  007B9A  0E03               	movlw	3
  1601  007B9C  6E02               	movwf	delay_ms@i+1,c
  1602  007B9E  0EE8               	movlw	232
  1603  007BA0  6E01               	movwf	delay_ms@i,c
  1604  007BA2  EC10  F036         	call	_delay_ms	;wreg free
  1605                           
  1606                           ;LockMotor.c: 83: motorlock_unlock();
  1607  007BA6  ECE8  F036         	call	_motorlock_unlock	;wreg free
  1608                           
  1609                           ;LockMotor.c: 84: motordoor_open();
  1610  007BAA  ECA0  F036         	call	_motordoor_open	;wreg free
  1611                           
  1612                           ;LockMotor.c: 85: lcd_write_cmd(0x01);
  1613  007BAE  0E01               	movlw	1
  1614  007BB0  EC90  F037         	call	_lcd_write_cmd
  1615                           
  1616                           ;LockMotor.c: 86: while (PORTAbits.RA0 == 0) {
  1617  007BB4  D006               	goto	l2514
  1618  007BB6                     l2512:
  1619                           
  1620                           ;LockMotor.c: 88: delay_ms(50);
  1621  007BB6  0E00               	movlw	0
  1622  007BB8  6E02               	movwf	delay_ms@i+1,c
  1623  007BBA  0E32               	movlw	50
  1624  007BBC  6E01               	movwf	delay_ms@i,c
  1625  007BBE  EC10  F036         	call	_delay_ms	;wreg free
  1626  007BC2                     l2514:
  1627  007BC2  A080               	btfss	3968,0,c	;volatile
  1628  007BC4  D7F8               	goto	l2512
  1629                           
  1630                           ;LockMotor.c: 89: }
  1631                           ;LockMotor.c: 90: lcd_write_cmd(0x01);
  1632  007BC6  0E01               	movlw	1
  1633  007BC8  EC90  F037         	call	_lcd_write_cmd
  1634                           
  1635                           ;LockMotor.c: 92: motordoor_close();
  1636  007BCC  EC7C  F036         	call	_motordoor_close	;wreg free
  1637                           
  1638                           ;LockMotor.c: 94: motorlock_lock();
  1639  007BD0  ECC4  F036         	call	_motorlock_lock	;wreg free
  1640                           
  1641                           ;LockMotor.c: 95: delay_ms(1000);
  1642  007BD4  0E03               	movlw	3
  1643  007BD6  6E02               	movwf	delay_ms@i+1,c
  1644  007BD8  0EE8               	movlw	232
  1645  007BDA  6E01               	movwf	delay_ms@i,c
  1646  007BDC  EC10  F036         	call	_delay_ms	;wreg free
  1647                           
  1648                           ;LockMotor.c: 98: wrong=0;
  1649  007BE0  0E00               	movlw	0
  1650  007BE2  0100               	movlb	0	; () banked
  1651  007BE4  6FE6               	movwf	(_wrong+1)& (0+255),b
  1652  007BE6  0E00               	movlw	0
  1653  007BE8  6FE5               	movwf	_wrong& (0+255),b
  1654                           
  1655                           ;LockMotor.c: 101: } else {
  1656  007BEA  D03B               	goto	l2542
  1657  007BEC                     l2524:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;LockMotor.c: 103: wrong++;
  1661  007BEC  0100               	movlb	0	; () banked
  1662  007BEE  4BE5               	infsnz	_wrong& (0+255),f,b
  1663  007BF0  2BE6               	incf	(_wrong+1)& (0+255),f,b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;LockMotor.c: 104: lcd_write_cmd(0x01);
  1667  007BF2  0E01               	movlw	1
  1668  007BF4  EC90  F037         	call	_lcd_write_cmd
  1669                           
  1670                           ;LockMotor.c: 105: lcd_write_cmd(0x80);
  1671  007BF8  0E80               	movlw	128
  1672  007BFA  EC90  F037         	call	_lcd_write_cmd
  1673                           
  1674                           ;LockMotor.c: 106: char errorMsg[] = "WRONG PIN";
  1675  007BFE  EE20  F0D9         	lfsr	2,LockMotor@F4638
  1676  007C02  EE10  F0A3         	lfsr	1,LockMotor@errorMsg
  1677  007C06  0E09               	movlw	9
  1678  007C08                     u2011:
  1679  007C08  CFDB FFE3          	movff	plusw2,plusw1
  1680  007C0C  06E8               	decf	wreg,f,c
  1681  007C0E  E2FC               	bc	u2011
  1682                           
  1683                           ;LockMotor.c: 107: for (int i = 0; errorMsg[i] != '\0'; i++) {
  1684  007C10  0E00               	movlw	0
  1685  007C12  0100               	movlb	0	; () banked
  1686  007C14  6FB6               	movwf	(LockMotor@i_597+1)& (0+255),b
  1687  007C16  0E00               	movlw	0
  1688  007C18  6FB5               	movwf	LockMotor@i_597& (0+255),b
  1689  007C1A  D00E               	goto	l2538
  1690  007C1C                     l2534:
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;LockMotor.c: 108: lcd_write_data(errorMsg[i]);
  1694  007C1C  0EA3               	movlw	low LockMotor@errorMsg
  1695  007C1E  0100               	movlb	0	; () banked
  1696  007C20  25B5               	addwf	LockMotor@i_597& (0+255),w,b
  1697  007C22  6ED9               	movwf	fsr2l,c
  1698  007C24  0E00               	movlw	high LockMotor@errorMsg
  1699  007C26  0100               	movlb	0	; () banked
  1700  007C28  21B6               	addwfc	(LockMotor@i_597+1)& (0+255),w,b
  1701  007C2A  6EDA               	movwf	fsr2h,c
  1702  007C2C  50DF               	movf	indf2,w,c
  1703  007C2E  EC3E  F039         	call	_lcd_write_data
  1704  007C32  0100               	movlb	0	; () banked
  1705  007C34  4BB5               	infsnz	LockMotor@i_597& (0+255),f,b
  1706  007C36  2BB6               	incf	(LockMotor@i_597+1)& (0+255),f,b
  1707  007C38                     l2538:
  1708                           
  1709                           ; BSR set to: 0
  1710  007C38  0EA3               	movlw	low LockMotor@errorMsg
  1711  007C3A  0100               	movlb	0	; () banked
  1712  007C3C  25B5               	addwf	LockMotor@i_597& (0+255),w,b
  1713  007C3E  6ED9               	movwf	fsr2l,c
  1714  007C40  0E00               	movlw	high LockMotor@errorMsg
  1715  007C42  0100               	movlb	0	; () banked
  1716  007C44  21B6               	addwfc	(LockMotor@i_597+1)& (0+255),w,b
  1717  007C46  6EDA               	movwf	fsr2h,c
  1718  007C48  50DF               	movf	indf2,w,c
  1719  007C4A  A4D8               	btfss	status,2,c
  1720  007C4C  D7E7               	goto	l2534
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;LockMotor.c: 109: }
  1724                           ;LockMotor.c: 110: lcd_write_data(wrong);
  1725                           
  1726                           ; BSR set to: 0
  1727  007C4E  0100               	movlb	0	; () banked
  1728  007C50  51E5               	movf	_wrong& (0+255),w,b
  1729  007C52  EC3E  F039         	call	_lcd_write_data
  1730                           
  1731                           ;LockMotor.c: 112: delay_ms(2000);
  1732  007C56  0E07               	movlw	7
  1733  007C58  6E02               	movwf	delay_ms@i+1,c
  1734  007C5A  0ED0               	movlw	208
  1735  007C5C  6E01               	movwf	delay_ms@i,c
  1736  007C5E  EC10  F036         	call	_delay_ms	;wreg free
  1737  007C62                     l2542:
  1738                           
  1739                           ;LockMotor.c: 115: }
  1740                           ;LockMotor.c: 117: if (wrong >= 3) {
  1741  007C62  0100               	movlb	0	; () banked
  1742  007C64  BFE6               	btfsc	(_wrong+1)& (0+255),7,b
  1743  007C66  D70A               	goto	l197
  1744  007C68  0100               	movlb	0	; () banked
  1745  007C6A  51E6               	movf	(_wrong+1)& (0+255),w,b
  1746  007C6C  E105               	bnz	u2030
  1747  007C6E  0E03               	movlw	3
  1748  007C70  0100               	movlb	0	; () banked
  1749  007C72  5DE5               	subwf	_wrong& (0+255),w,b
  1750  007C74  A0D8               	btfss	status,0,c
  1751  007C76  D702               	goto	l197
  1752  007C78                     u2030:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;LockMotor.c: 119: UART_Write('1');
  1756  007C78  0E31               	movlw	49
  1757  007C7A  ECAF  F035         	call	_UART_Write
  1758  007C7E  D6FE               	goto	l197
  1759  007C80                     __end_of_LockMotor:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           plusw1	equ	0xFE3
  1769                           fsr1l	equ	0xFE1
  1770                           indf2	equ	0xFDF
  1771                           plusw2	equ	0xFDB
  1772                           fsr2h	equ	0xFDA
  1773                           fsr2l	equ	0xFD9
  1774                           status	equ	0xFD8
  1775                           
  1776 ;; *************** function _motorlock_unlock *****************
  1777 ;; Defined at:
  1778 ;;		line 94 in file "MotorFunction.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  Period          2   31[BANK0 ] int 
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  2  161[None  ] int 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1792 ;;      Params:         0       0       0       0       0       0       0       0       0
  1793 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1795 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1796 ;;Total ram usage:        2 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    5
  1799 ;; This function calls:
  1800 ;;		_PWM_Init
  1801 ;;		_SetDutyCycleTo
  1802 ;;		_delay
  1803 ;;		_setPeriodTo
  1804 ;; This function is called by:
  1805 ;;		_LockMotor
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text6
  1810  006DD0                     __ptext6:
  1811                           	opt stack 0
  1812  006DD0                     _motorlock_unlock:
  1813                           	opt stack 24
  1814                           
  1815                           ;MotorFunction.c: 95: int Period;
  1816                           ;MotorFunction.c: 96: PWM_Init();
  1817                           
  1818                           ;incstack = 0
  1819  006DD0  ECAB  F035         	call	_PWM_Init	;wreg free
  1820                           
  1821                           ;MotorFunction.c: 97: Period = setPeriodTo(50);
  1822  006DD4  0E32               	movlw	50
  1823  006DD6  0100               	movlb	0	; () banked
  1824  006DD8  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1825  006DDA  0E00               	movlw	0
  1826  006DDC  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1827  006DDE  0E00               	movlw	0
  1828  006DE0  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1829  006DE2  0E00               	movlw	0
  1830  006DE4  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  1831  006DE6  EC40  F03E         	call	_setPeriodTo	;wreg free
  1832  006DEA  C066  F07F         	movff	?_setPeriodTo,motorlock_unlock@Period
  1833  006DEE  C067  F080         	movff	?_setPeriodTo+1,motorlock_unlock@Period+1
  1834                           
  1835                           ;MotorFunction.c: 98: SetDutyCycleTo(12.0, Period);
  1836  006DF2  0E00               	movlw	0
  1837  006DF4  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  1838  006DF6  0E40               	movlw	64
  1839  006DF8  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  1840  006DFA  0E41               	movlw	65
  1841  006DFC  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  1842  006DFE  C07F  F04E         	movff	motorlock_unlock@Period,SetDutyCycleTo@Period
  1843  006E02  C080  F04F         	movff	motorlock_unlock@Period+1,SetDutyCycleTo@Period+1
  1844  006E06  EC93  F03A         	call	_SetDutyCycleTo	;wreg free
  1845                           
  1846                           ;MotorFunction.c: 99: delay(7000);
  1847  006E0A  0E1B               	movlw	27
  1848  006E0C  6E02               	movwf	delay@val+1,c
  1849  006E0E  0E58               	movlw	88
  1850  006E10  6E01               	movwf	delay@val,c
  1851  006E12  EC45  F036         	call	_delay	;wreg free
  1852  006E16  0012               	return	
  1853  006E18                     __end_of_motorlock_unlock:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           plusw1	equ	0xFE3
  1863                           fsr1l	equ	0xFE1
  1864                           indf2	equ	0xFDF
  1865                           plusw2	equ	0xFDB
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _motorlock_lock *****************
  1871 ;; Defined at:
  1872 ;;		line 103 in file "MotorFunction.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  Period          2   31[BANK0 ] int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  2   14[None  ] int 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    5
  1893 ;; This function calls:
  1894 ;;		_PWM_Init
  1895 ;;		_SetDutyCycleTo
  1896 ;;		_delay
  1897 ;;		_setPeriodTo
  1898 ;; This function is called by:
  1899 ;;		_LockMotor
  1900 ;;		_pir
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text7
  1905  006D88                     __ptext7:
  1906                           	opt stack 0
  1907  006D88                     _motorlock_lock:
  1908                           	opt stack 24
  1909                           
  1910                           ;MotorFunction.c: 104: int Period;
  1911                           ;MotorFunction.c: 105: PWM_Init();
  1912                           
  1913                           ;incstack = 0
  1914  006D88  ECAB  F035         	call	_PWM_Init	;wreg free
  1915                           
  1916                           ;MotorFunction.c: 106: Period = setPeriodTo(50);
  1917  006D8C  0E32               	movlw	50
  1918  006D8E  0100               	movlb	0	; () banked
  1919  006D90  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1920  006D92  0E00               	movlw	0
  1921  006D94  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1922  006D96  0E00               	movlw	0
  1923  006D98  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1924  006D9A  0E00               	movlw	0
  1925  006D9C  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  1926  006D9E  EC40  F03E         	call	_setPeriodTo	;wreg free
  1927  006DA2  C066  F07F         	movff	?_setPeriodTo,motorlock_lock@Period
  1928  006DA6  C067  F080         	movff	?_setPeriodTo+1,motorlock_lock@Period+1
  1929                           
  1930                           ;MotorFunction.c: 107: SetDutyCycleTo(7.0, Period);
  1931  006DAA  0E00               	movlw	0
  1932  006DAC  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  1933  006DAE  0EE0               	movlw	224
  1934  006DB0  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  1935  006DB2  0E40               	movlw	64
  1936  006DB4  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  1937  006DB6  C07F  F04E         	movff	motorlock_lock@Period,SetDutyCycleTo@Period
  1938  006DBA  C080  F04F         	movff	motorlock_lock@Period+1,SetDutyCycleTo@Period+1
  1939  006DBE  EC93  F03A         	call	_SetDutyCycleTo	;wreg free
  1940                           
  1941                           ;MotorFunction.c: 108: delay(7000);
  1942  006DC2  0E1B               	movlw	27
  1943  006DC4  6E02               	movwf	delay@val+1,c
  1944  006DC6  0E58               	movlw	88
  1945  006DC8  6E01               	movwf	delay@val,c
  1946  006DCA  EC45  F036         	call	_delay	;wreg free
  1947  006DCE  0012               	return	
  1948  006DD0                     __end_of_motorlock_lock:
  1949                           	opt stack 0
  1950                           tblptru	equ	0xFF8
  1951                           tblptrh	equ	0xFF7
  1952                           tblptrl	equ	0xFF6
  1953                           tablat	equ	0xFF5
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           plusw1	equ	0xFE3
  1958                           fsr1l	equ	0xFE1
  1959                           indf2	equ	0xFDF
  1960                           plusw2	equ	0xFDB
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _SetDutyCycleTo *****************
  1966 ;; Defined at:
  1967 ;;		line 62 in file "MotorFunction.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  Duty_cycle      3   74[COMRAM] float 
  1970 ;;  Period          2   77[COMRAM] int 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  PWM10BitValu    2   84[COMRAM] int 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;		None               void
  1975 ;; Registers used:
  1976 ;;		wreg, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1982 ;;      Params:         5       0       0       0       0       0       0       0       0
  1983 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1984 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1985 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1986 ;;Total ram usage:       12 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    2
  1989 ;; This function calls:
  1990 ;;		___awtoft
  1991 ;;		___ftadd
  1992 ;;		___ftdiv
  1993 ;;		___ftmul
  1994 ;;		___fttol
  1995 ;; This function is called by:
  1996 ;;		_motorlock_unlock
  1997 ;;		_motorlock_lock
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text8
  2002  007526                     __ptext8:
  2003                           	opt stack 0
  2004  007526                     _SetDutyCycleTo:
  2005                           	opt stack 26
  2006                           
  2007                           ;MotorFunction.c: 64: int PWM10BitValue;
  2008                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2009                           
  2010                           ;incstack = 0
  2011  007526  0E00               	movlw	0
  2012  007528  6E15               	movwf	___ftdiv@f2,c
  2013  00752A  0EC8               	movlw	200
  2014  00752C  6E16               	movwf	___ftdiv@f2+1,c
  2015  00752E  0E42               	movlw	66
  2016  007530  6E17               	movwf	___ftdiv@f2+2,c
  2017  007532  C04B  F012         	movff	SetDutyCycleTo@Duty_cycle,___ftdiv@f1
  2018  007536  C04C  F013         	movff	SetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  2019  00753A  C04D  F014         	movff	SetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  2020  00753E  ECF8  F03A         	call	___ftdiv	;wreg free
  2021  007542  C012  F030         	movff	?___ftdiv,___ftmul@f2
  2022  007546  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  2023  00754A  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  2024  00754E  0E00               	movlw	0
  2025  007550  6E24               	movwf	___ftadd@f2,c
  2026  007552  0E80               	movlw	128
  2027  007554  6E25               	movwf	___ftadd@f2+1,c
  2028  007556  0E3F               	movlw	63
  2029  007558  6E26               	movwf	___ftadd@f2+2,c
  2030  00755A  C04E  F009         	movff	SetDutyCycleTo@Period,___awtoft@c
  2031  00755E  C04F  F00A         	movff	SetDutyCycleTo@Period+1,___awtoft@c+1
  2032  007562  EC60  F036         	call	___awtoft	;wreg free
  2033  007566  C009  F021         	movff	?___awtoft,___ftadd@f1
  2034  00756A  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  2035  00756E  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  2036  007572  EC5F  F03C         	call	___ftadd	;wreg free
  2037  007576  C021  F02D         	movff	?___ftadd,___ftmul@f1
  2038  00757A  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  2039  00757E  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  2040  007582  EC6B  F03B         	call	___ftmul	;wreg free
  2041  007586  C02D  F052         	movff	?___ftmul,_SetDutyCycleTo$1530
  2042  00758A  C02E  F053         	movff	?___ftmul+1,_SetDutyCycleTo$1530+1
  2043  00758E  C02F  F054         	movff	?___ftmul+2,_SetDutyCycleTo$1530+2
  2044                           
  2045                           ;MotorFunction.c: 64: int PWM10BitValue;
  2046                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2047  007592  0E00               	movlw	0
  2048  007594  6E30               	movwf	___ftmul@f2,c
  2049  007596  0E80               	movlw	128
  2050  007598  6E31               	movwf	___ftmul@f2+1,c
  2051  00759A  0E40               	movlw	64
  2052  00759C  6E32               	movwf	___ftmul@f2+2,c
  2053  00759E  C052  F02D         	movff	_SetDutyCycleTo$1530,___ftmul@f1
  2054  0075A2  C053  F02E         	movff	_SetDutyCycleTo$1530+1,___ftmul@f1+1
  2055  0075A6  C054  F02F         	movff	_SetDutyCycleTo$1530+2,___ftmul@f1+2
  2056  0075AA  EC6B  F03B         	call	___ftmul	;wreg free
  2057  0075AE  C02D  F03C         	movff	?___ftmul,___fttol@f1
  2058  0075B2  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  2059  0075B6  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  2060  0075BA  ECE5  F03B         	call	___fttol	;wreg free
  2061  0075BE  C03C  F055         	movff	?___fttol,SetDutyCycleTo@PWM10BitValue
  2062  0075C2  C03D  F056         	movff	?___fttol+1,SetDutyCycleTo@PWM10BitValue+1
  2063                           
  2064                           ;MotorFunction.c: 67: CCPR1L = (PWM10BitValue >> 2);
  2065  0075C6  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2066  0075CA  C056  F051         	movff	SetDutyCycleTo@PWM10BitValue+1,??_SetDutyCycleTo+1
  2067  0075CE  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  2068  0075D0  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  2069  0075D2  3250               	rrcf	??_SetDutyCycleTo,f,c
  2070  0075D4  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  2071  0075D6  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  2072  0075D8  3250               	rrcf	??_SetDutyCycleTo,f,c
  2073  0075DA  5050               	movf	??_SetDutyCycleTo,w,c
  2074  0075DC  6EBE               	movwf	4030,c	;volatile
  2075                           
  2076                           ;MotorFunction.c: 68: CCP1CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  2077  0075DE  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2078  0075E2  0E03               	movlw	3
  2079  0075E4  1650               	andwf	??_SetDutyCycleTo,f,c
  2080  0075E6  3850               	swapf	??_SetDutyCycleTo,w,c
  2081  0075E8  0BF0               	andlw	240
  2082  0075EA  090C               	iorlw	12
  2083  0075EC  6EBD               	movwf	4029,c	;volatile
  2084  0075EE  0012               	return		;funcret
  2085  0075F0                     __end_of_SetDutyCycleTo:
  2086                           	opt stack 0
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           plusw1	equ	0xFE3
  2095                           fsr1l	equ	0xFE1
  2096                           indf2	equ	0xFDF
  2097                           plusw2	equ	0xFDB
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _PWM_Init *****************
  2103 ;; Defined at:
  2104 ;;		line 20 in file "MotorFunction.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;		None
  2109 ;; Return value:  Size  Location     Type
  2110 ;;		None               void
  2111 ;; Registers used:
  2112 ;;		wreg, status,2
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0
  2119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2121 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2122 ;;Total ram usage:        0 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_motorlock_unlock
  2128 ;;		_motorlock_lock
  2129 ;;		_motor_init
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text9
  2134  006B56                     __ptext9:
  2135                           	opt stack 0
  2136  006B56                     _PWM_Init:
  2137                           	opt stack 28
  2138                           
  2139                           ;MotorFunction.c: 22: TRISCbits.TRISC2 = 0;
  2140                           
  2141                           ;incstack = 0
  2142  006B56  9494               	bcf	3988,2,c	;volatile
  2143                           
  2144                           ;MotorFunction.c: 23: CCP1CON = 0x0C;
  2145  006B58  0E0C               	movlw	12
  2146  006B5A  6EBD               	movwf	4029,c	;volatile
  2147  006B5C  0012               	return		;funcret
  2148  006B5E                     __end_of_PWM_Init:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           postinc0	equ	0xFEE
  2155                           wreg	equ	0xFE8
  2156                           postdec1	equ	0xFE5
  2157                           plusw1	equ	0xFE3
  2158                           fsr1l	equ	0xFE1
  2159                           indf2	equ	0xFDF
  2160                           plusw2	equ	0xFDB
  2161                           fsr2h	equ	0xFDA
  2162                           fsr2l	equ	0xFD9
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _motordoor_open *****************
  2166 ;; Defined at:
  2167 ;;		line 112 in file "MotorFunction.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;  Period          2   31[BANK0 ] int 
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  2  163[None  ] int 
  2174 ;; Registers used:
  2175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2181 ;;      Params:         0       0       0       0       0       0       0       0       0
  2182 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2184 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2185 ;;Total ram usage:        2 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    5
  2188 ;; This function calls:
  2189 ;;		_PWMdoor_Init
  2190 ;;		_delay
  2191 ;;		_doorSetDutyCycleTo
  2192 ;;		_setPeriodTo
  2193 ;; This function is called by:
  2194 ;;		_LockMotor
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198                           	psect	text10
  2199  006D40                     __ptext10:
  2200                           	opt stack 0
  2201  006D40                     _motordoor_open:
  2202                           	opt stack 24
  2203                           
  2204                           ;MotorFunction.c: 113: int Period;
  2205                           ;MotorFunction.c: 114: PWMdoor_Init();
  2206                           
  2207                           ;incstack = 0
  2208  006D40  ECA7  F035         	call	_PWMdoor_Init	;wreg free
  2209                           
  2210                           ;MotorFunction.c: 115: Period = setPeriodTo(50);
  2211  006D44  0E32               	movlw	50
  2212  006D46  0100               	movlb	0	; () banked
  2213  006D48  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  2214  006D4A  0E00               	movlw	0
  2215  006D4C  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  2216  006D4E  0E00               	movlw	0
  2217  006D50  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  2218  006D52  0E00               	movlw	0
  2219  006D54  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  2220  006D56  EC40  F03E         	call	_setPeriodTo	;wreg free
  2221  006D5A  C066  F07F         	movff	?_setPeriodTo,motordoor_open@Period
  2222  006D5E  C067  F080         	movff	?_setPeriodTo+1,motordoor_open@Period+1
  2223                           
  2224                           ;MotorFunction.c: 116: doorSetDutyCycleTo(12.0, Period);
  2225  006D62  0E00               	movlw	0
  2226  006D64  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  2227  006D66  0E40               	movlw	64
  2228  006D68  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  2229  006D6A  0E41               	movlw	65
  2230  006D6C  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  2231  006D6E  C07F  F04E         	movff	motordoor_open@Period,doorSetDutyCycleTo@Period
  2232  006D72  C080  F04F         	movff	motordoor_open@Period+1,doorSetDutyCycleTo@Period+1
  2233  006D76  EC2E  F03A         	call	_doorSetDutyCycleTo	;wreg free
  2234                           
  2235                           ;MotorFunction.c: 117: delay(7000);
  2236  006D7A  0E1B               	movlw	27
  2237  006D7C  6E02               	movwf	delay@val+1,c
  2238  006D7E  0E58               	movlw	88
  2239  006D80  6E01               	movwf	delay@val,c
  2240  006D82  EC45  F036         	call	_delay	;wreg free
  2241  006D86  0012               	return	
  2242  006D88                     __end_of_motordoor_open:
  2243                           	opt stack 0
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           postdec1	equ	0xFE5
  2251                           plusw1	equ	0xFE3
  2252                           fsr1l	equ	0xFE1
  2253                           indf2	equ	0xFDF
  2254                           plusw2	equ	0xFDB
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _motordoor_close *****************
  2260 ;; Defined at:
  2261 ;;		line 121 in file "MotorFunction.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;  Period          2   31[BANK0 ] int 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2   12[None  ] int 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0
  2276 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2278 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2279 ;;Total ram usage:        2 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    5
  2282 ;; This function calls:
  2283 ;;		_PWMdoor_Init
  2284 ;;		_delay
  2285 ;;		_doorSetDutyCycleTo
  2286 ;;		_setPeriodTo
  2287 ;; This function is called by:
  2288 ;;		_LockMotor
  2289 ;;		_pir
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text11
  2294  006CF8                     __ptext11:
  2295                           	opt stack 0
  2296  006CF8                     _motordoor_close:
  2297                           	opt stack 24
  2298                           
  2299                           ;MotorFunction.c: 122: int Period;
  2300                           ;MotorFunction.c: 123: PWMdoor_Init();
  2301                           
  2302                           ;incstack = 0
  2303  006CF8  ECA7  F035         	call	_PWMdoor_Init	;wreg free
  2304                           
  2305                           ;MotorFunction.c: 124: Period = setPeriodTo(50);
  2306  006CFC  0E32               	movlw	50
  2307  006CFE  0100               	movlb	0	; () banked
  2308  006D00  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  2309  006D02  0E00               	movlw	0
  2310  006D04  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  2311  006D06  0E00               	movlw	0
  2312  006D08  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  2313  006D0A  0E00               	movlw	0
  2314  006D0C  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  2315  006D0E  EC40  F03E         	call	_setPeriodTo	;wreg free
  2316  006D12  C066  F07F         	movff	?_setPeriodTo,motordoor_close@Period
  2317  006D16  C067  F080         	movff	?_setPeriodTo+1,motordoor_close@Period+1
  2318                           
  2319                           ;MotorFunction.c: 126: doorSetDutyCycleTo(3.0, Period);
  2320  006D1A  0E00               	movlw	0
  2321  006D1C  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  2322  006D1E  0E40               	movlw	64
  2323  006D20  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  2324  006D22  0E40               	movlw	64
  2325  006D24  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  2326  006D26  C07F  F04E         	movff	motordoor_close@Period,doorSetDutyCycleTo@Period
  2327  006D2A  C080  F04F         	movff	motordoor_close@Period+1,doorSetDutyCycleTo@Period+1
  2328  006D2E  EC2E  F03A         	call	_doorSetDutyCycleTo	;wreg free
  2329                           
  2330                           ;MotorFunction.c: 127: delay(7000);
  2331  006D32  0E1B               	movlw	27
  2332  006D34  6E02               	movwf	delay@val+1,c
  2333  006D36  0E58               	movlw	88
  2334  006D38  6E01               	movwf	delay@val,c
  2335  006D3A  EC45  F036         	call	_delay	;wreg free
  2336  006D3E  0012               	return	
  2337  006D40                     __end_of_motordoor_close:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           postinc0	equ	0xFEE
  2344                           wreg	equ	0xFE8
  2345                           postdec1	equ	0xFE5
  2346                           plusw1	equ	0xFE3
  2347                           fsr1l	equ	0xFE1
  2348                           indf2	equ	0xFDF
  2349                           plusw2	equ	0xFDB
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _setPeriodTo *****************
  2355 ;; Defined at:
  2356 ;;		line 32 in file "MotorFunction.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  FPWM            4    6[BANK0 ] unsigned long 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  _resolution     4   27[BANK0 ] unsigned long 
  2361 ;;  FOSC            4   18[BANK0 ] unsigned long 
  2362 ;;  period          3   24[BANK0 ] float 
  2363 ;;  clockSelectB    2   22[BANK0 ] int 
  2364 ;;  TimerPrescal    2   16[BANK0 ] int 
  2365 ;;  TimerPrescal    2   14[BANK0 ] int 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  2    6[BANK0 ] int 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2375 ;;      Params:         0       4       0       0       0       0       0       0       0
  2376 ;;      Locals:         0      20       0       0       0       0       0       0       0
  2377 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2378 ;;      Totals:         0      25       0       0       0       0       0       0       0
  2379 ;;Total ram usage:       25 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    4
  2382 ;; This function calls:
  2383 ;;		___awtoft
  2384 ;;		___ftadd
  2385 ;;		___ftdiv
  2386 ;;		___ftmul
  2387 ;;		___fttol
  2388 ;;		___lltoft
  2389 ;;		_round
  2390 ;; This function is called by:
  2391 ;;		_motorlock_unlock
  2392 ;;		_motorlock_lock
  2393 ;;		_motordoor_open
  2394 ;;		_motordoor_close
  2395 ;;		_motor_init
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text12
  2400  007C80                     __ptext12:
  2401                           	opt stack 0
  2402  007C80                     _setPeriodTo:
  2403                           	opt stack 24
  2404                           
  2405                           ;MotorFunction.c: 34: int clockSelectBits, TimerPrescaleBits;
  2406                           ;MotorFunction.c: 35: int TimerPrescaleValue;
  2407                           ;MotorFunction.c: 36: float period;
  2408                           ;MotorFunction.c: 37: unsigned long FOSC, _resolution = 488;
  2409                           
  2410                           ;incstack = 0
  2411  007C80  0EE8               	movlw	232
  2412  007C82  0100               	movlb	0	; () banked
  2413  007C84  6F7B               	movwf	setPeriodTo@_resolution& (0+255),b
  2414  007C86  0E01               	movlw	1
  2415  007C88  6F7C               	movwf	(setPeriodTo@_resolution+1)& (0+255),b
  2416  007C8A  0E00               	movlw	0
  2417  007C8C  6F7D               	movwf	(setPeriodTo@_resolution+2)& (0+255),b
  2418  007C8E  0E00               	movlw	0
  2419  007C90  6F7E               	movwf	(setPeriodTo@_resolution+3)& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;MotorFunction.c: 39: if (FPWM < 8000) {TimerPrescaleBits = 2; TimerPrescaleValue = 16;}
  2423  007C92  0100               	movlb	0	; () banked
  2424  007C94  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2425  007C96  0100               	movlb	0	; () banked
  2426  007C98  1168               	iorwf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2427  007C9A  E112               	bnz	l2166
  2428  007C9C  0E40               	movlw	64
  2429  007C9E  0100               	movlb	0	; () banked
  2430  007CA0  5D66               	subwf	setPeriodTo@FPWM& (0+255),w,b
  2431  007CA2  0E1F               	movlw	31
  2432  007CA4  0100               	movlb	0	; () banked
  2433  007CA6  5967               	subwfb	(setPeriodTo@FPWM+1)& (0+255),w,b
  2434  007CA8  B0D8               	btfsc	status,0,c
  2435  007CAA  D00A               	goto	l2166
  2436                           
  2437                           ; BSR set to: 0
  2438  007CAC  0E00               	movlw	0
  2439  007CAE  0100               	movlb	0	; () banked
  2440  007CB0  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  2441  007CB2  0E02               	movlw	2
  2442  007CB4  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  2443  007CB6  0E00               	movlw	0
  2444  007CB8  0100               	movlb	0	; () banked
  2445  007CBA  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  2446  007CBC  0E10               	movlw	16
  2447  007CBE  D009               	goto	L1
  2448  007CC0                     l2166:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;MotorFunction.c: 40: else {TimerPrescaleBits = 0; TimerPrescaleValue = 1;}
  2452  007CC0  0E00               	movlw	0
  2453  007CC2  0100               	movlb	0	; () banked
  2454  007CC4  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  2455  007CC6  0E00               	movlw	0
  2456  007CC8  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  2457  007CCA  0E00               	movlw	0
  2458  007CCC  0100               	movlb	0	; () banked
  2459  007CCE  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  2460  007CD0  0E01               	movlw	1
  2461  007CD2                     L1:
  2462  007CD2  6F70               	movwf	setPeriodTo@TimerPrescaleValue& (0+255),b
  2463                           
  2464                           ; BSR set to: 0
  2465                           ;MotorFunction.c: 42: if (FPWM > _resolution) {clockSelectBits = 7; FOSC = 8000000;}
  2466                           
  2467                           ; BSR set to: 0
  2468  007CD4  0100               	movlb	0	; () banked
  2469  007CD6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2470  007CD8  0100               	movlb	0	; () banked
  2471  007CDA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2472  007CDC  0100               	movlb	0	; () banked
  2473  007CDE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2474  007CE0  0100               	movlb	0	; () banked
  2475  007CE2  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2476  007CE4  0100               	movlb	0	; () banked
  2477  007CE6  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2478  007CE8  0100               	movlb	0	; () banked
  2479  007CEA  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2480  007CEC  0100               	movlb	0	; () banked
  2481  007CEE  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2482  007CF0  0100               	movlb	0	; () banked
  2483  007CF2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2484  007CF4  B0D8               	btfsc	status,0,c
  2485  007CF6  D00C               	goto	l2172
  2486                           
  2487                           ; BSR set to: 0
  2488  007CF8  0E00               	movlw	0
  2489  007CFA  0100               	movlb	0	; () banked
  2490  007CFC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2491  007CFE  0E07               	movlw	7
  2492  007D00  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2493  007D02  0E00               	movlw	0
  2494  007D04  0100               	movlb	0	; () banked
  2495  007D06  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2496  007D08  0E12               	movlw	18
  2497  007D0A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2498  007D0C  0E7A               	movlw	122
  2499  007D0E  D0E3               	goto	L8
  2500  007D10                     l2172:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;MotorFunction.c: 43: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 6; FOSC = 
      +                          4000000;}
  2504  007D10  0100               	movlb	0	; () banked
  2505  007D12  90D8               	bcf	status,0,c
  2506  007D14  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2507  007D16  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2508  007D18  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2509  007D1A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2510  007D1C  0100               	movlb	0	; () banked
  2511  007D1E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2512  007D20  0100               	movlb	0	; () banked
  2513  007D22  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2514  007D24  0100               	movlb	0	; () banked
  2515  007D26  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2516  007D28  0100               	movlb	0	; () banked
  2517  007D2A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2518  007D2C  0100               	movlb	0	; () banked
  2519  007D2E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2520  007D30  0100               	movlb	0	; () banked
  2521  007D32  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2522  007D34  0100               	movlb	0	; () banked
  2523  007D36  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2524  007D38  0100               	movlb	0	; () banked
  2525  007D3A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2526  007D3C  B0D8               	btfsc	status,0,c
  2527  007D3E  D00C               	goto	l2176
  2528                           
  2529                           ; BSR set to: 0
  2530  007D40  0E00               	movlw	0
  2531  007D42  0100               	movlb	0	; () banked
  2532  007D44  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2533  007D46  0E06               	movlw	6
  2534  007D48  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2535  007D4A  0E00               	movlw	0
  2536  007D4C  0100               	movlb	0	; () banked
  2537  007D4E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2538  007D50  0E09               	movlw	9
  2539  007D52  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2540  007D54  0E3D               	movlw	61
  2541  007D56  D0BF               	goto	L8
  2542  007D58                     l2176:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;MotorFunction.c: 44: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 5; FOSC = 
      +                          2000000;}
  2546  007D58  0100               	movlb	0	; () banked
  2547  007D5A  90D8               	bcf	status,0,c
  2548  007D5C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2549  007D5E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2550  007D60  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2551  007D62  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2552  007D64  0100               	movlb	0	; () banked
  2553  007D66  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2554  007D68  0100               	movlb	0	; () banked
  2555  007D6A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2556  007D6C  0100               	movlb	0	; () banked
  2557  007D6E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2558  007D70  0100               	movlb	0	; () banked
  2559  007D72  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2560  007D74  0100               	movlb	0	; () banked
  2561  007D76  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2562  007D78  0100               	movlb	0	; () banked
  2563  007D7A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2564  007D7C  0100               	movlb	0	; () banked
  2565  007D7E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2566  007D80  0100               	movlb	0	; () banked
  2567  007D82  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2568  007D84  B0D8               	btfsc	status,0,c
  2569  007D86  D00C               	goto	l2180
  2570                           
  2571                           ; BSR set to: 0
  2572  007D88  0E00               	movlw	0
  2573  007D8A  0100               	movlb	0	; () banked
  2574  007D8C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2575  007D8E  0E05               	movlw	5
  2576  007D90  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2577  007D92  0E80               	movlw	128
  2578  007D94  0100               	movlb	0	; () banked
  2579  007D96  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2580  007D98  0E84               	movlw	132
  2581  007D9A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2582  007D9C  0E1E               	movlw	30
  2583  007D9E  D09B               	goto	L8
  2584  007DA0                     l2180:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;MotorFunction.c: 45: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 4; FOSC = 
      +                          1000000;}
  2588  007DA0  0100               	movlb	0	; () banked
  2589  007DA2  90D8               	bcf	status,0,c
  2590  007DA4  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2591  007DA6  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2592  007DA8  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2593  007DAA  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2594  007DAC  0100               	movlb	0	; () banked
  2595  007DAE  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2596  007DB0  0100               	movlb	0	; () banked
  2597  007DB2  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2598  007DB4  0100               	movlb	0	; () banked
  2599  007DB6  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2600  007DB8  0100               	movlb	0	; () banked
  2601  007DBA  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2602  007DBC  0100               	movlb	0	; () banked
  2603  007DBE  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2604  007DC0  0100               	movlb	0	; () banked
  2605  007DC2  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2606  007DC4  0100               	movlb	0	; () banked
  2607  007DC6  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2608  007DC8  0100               	movlb	0	; () banked
  2609  007DCA  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2610  007DCC  B0D8               	btfsc	status,0,c
  2611  007DCE  D00C               	goto	l2184
  2612                           
  2613                           ; BSR set to: 0
  2614  007DD0  0E00               	movlw	0
  2615  007DD2  0100               	movlb	0	; () banked
  2616  007DD4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2617  007DD6  0E04               	movlw	4
  2618  007DD8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2619  007DDA  0E40               	movlw	64
  2620  007DDC  0100               	movlb	0	; () banked
  2621  007DDE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2622  007DE0  0E42               	movlw	66
  2623  007DE2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2624  007DE4  0E0F               	movlw	15
  2625  007DE6  D077               	goto	L8
  2626  007DE8                     l2184:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;MotorFunction.c: 46: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 3; FOSC = 
      +                          500000;}
  2630  007DE8  0100               	movlb	0	; () banked
  2631  007DEA  90D8               	bcf	status,0,c
  2632  007DEC  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2633  007DEE  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2634  007DF0  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2635  007DF2  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2636  007DF4  0100               	movlb	0	; () banked
  2637  007DF6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2638  007DF8  0100               	movlb	0	; () banked
  2639  007DFA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2640  007DFC  0100               	movlb	0	; () banked
  2641  007DFE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2642  007E00  0100               	movlb	0	; () banked
  2643  007E02  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2644  007E04  0100               	movlb	0	; () banked
  2645  007E06  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2646  007E08  0100               	movlb	0	; () banked
  2647  007E0A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2648  007E0C  0100               	movlb	0	; () banked
  2649  007E0E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2650  007E10  0100               	movlb	0	; () banked
  2651  007E12  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2652  007E14  B0D8               	btfsc	status,0,c
  2653  007E16  D00C               	goto	l2188
  2654                           
  2655                           ; BSR set to: 0
  2656  007E18  0E00               	movlw	0
  2657  007E1A  0100               	movlb	0	; () banked
  2658  007E1C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2659  007E1E  0E03               	movlw	3
  2660  007E20  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2661  007E22  0E20               	movlw	32
  2662  007E24  0100               	movlb	0	; () banked
  2663  007E26  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2664  007E28  0EA1               	movlw	161
  2665  007E2A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2666  007E2C  0E07               	movlw	7
  2667  007E2E  D053               	goto	L8
  2668  007E30                     l2188:
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;MotorFunction.c: 47: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 2; FOSC = 
      +                          250000;}
  2672  007E30  0100               	movlb	0	; () banked
  2673  007E32  90D8               	bcf	status,0,c
  2674  007E34  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2675  007E36  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2676  007E38  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2677  007E3A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2678  007E3C  0100               	movlb	0	; () banked
  2679  007E3E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2680  007E40  0100               	movlb	0	; () banked
  2681  007E42  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2682  007E44  0100               	movlb	0	; () banked
  2683  007E46  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2684  007E48  0100               	movlb	0	; () banked
  2685  007E4A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2686  007E4C  0100               	movlb	0	; () banked
  2687  007E4E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2688  007E50  0100               	movlb	0	; () banked
  2689  007E52  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2690  007E54  0100               	movlb	0	; () banked
  2691  007E56  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2692  007E58  0100               	movlb	0	; () banked
  2693  007E5A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2694  007E5C  B0D8               	btfsc	status,0,c
  2695  007E5E  D00C               	goto	l2192
  2696                           
  2697                           ; BSR set to: 0
  2698  007E60  0E00               	movlw	0
  2699  007E62  0100               	movlb	0	; () banked
  2700  007E64  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2701  007E66  0E02               	movlw	2
  2702  007E68  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2703  007E6A  0E90               	movlw	144
  2704  007E6C  0100               	movlb	0	; () banked
  2705  007E6E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2706  007E70  0ED0               	movlw	208
  2707  007E72  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2708  007E74  0E03               	movlw	3
  2709  007E76  D02F               	goto	L8
  2710  007E78                     l2192:
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;MotorFunction.c: 48: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 1; FOSC = 
      +                          125000;}
  2714  007E78  0100               	movlb	0	; () banked
  2715  007E7A  90D8               	bcf	status,0,c
  2716  007E7C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2717  007E7E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2718  007E80  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2719  007E82  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2720  007E84  0100               	movlb	0	; () banked
  2721  007E86  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2722  007E88  0100               	movlb	0	; () banked
  2723  007E8A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2724  007E8C  0100               	movlb	0	; () banked
  2725  007E8E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2726  007E90  0100               	movlb	0	; () banked
  2727  007E92  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2728  007E94  0100               	movlb	0	; () banked
  2729  007E96  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2730  007E98  0100               	movlb	0	; () banked
  2731  007E9A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2732  007E9C  0100               	movlb	0	; () banked
  2733  007E9E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2734  007EA0  0100               	movlb	0	; () banked
  2735  007EA2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2736  007EA4  B0D8               	btfsc	status,0,c
  2737  007EA6  D00C               	goto	l2196
  2738                           
  2739                           ; BSR set to: 0
  2740  007EA8  0E00               	movlw	0
  2741  007EAA  0100               	movlb	0	; () banked
  2742  007EAC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2743  007EAE  0E01               	movlw	1
  2744  007EB0  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2745  007EB2  0E48               	movlw	72
  2746  007EB4  0100               	movlb	0	; () banked
  2747  007EB6  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2748  007EB8  0EE8               	movlw	232
  2749  007EBA  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2750  007EBC  0E01               	movlw	1
  2751  007EBE  D00B               	goto	L8
  2752  007EC0                     l2196:
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;MotorFunction.c: 49: else {clockSelectBits = 0; FOSC = 31000;}
  2756  007EC0  0E00               	movlw	0
  2757  007EC2  0100               	movlb	0	; () banked
  2758  007EC4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2759  007EC6  0E00               	movlw	0
  2760  007EC8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2761  007ECA  0E18               	movlw	24
  2762  007ECC  0100               	movlb	0	; () banked
  2763  007ECE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2764  007ED0  0E79               	movlw	121
  2765  007ED2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2766  007ED4  0E00               	movlw	0
  2767  007ED6                     L8:
  2768  007ED6  6F74               	movwf	(setPeriodTo@FOSC+2)& (0+255),b
  2769  007ED8  0E00               	movlw	0
  2770  007EDA  6F75               	movwf	(setPeriodTo@FOSC+3)& (0+255),b
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2774                           
  2775                           ; BSR set to: 0
  2776                           
  2777                           ; BSR set to: 0
  2778                           
  2779                           ; BSR set to: 0
  2780                           
  2781                           ; BSR set to: 0
  2782                           
  2783                           ; BSR set to: 0
  2784                           
  2785                           ; BSR set to: 0
  2786                           
  2787                           ; BSR set to: 0
  2788  007EDC  C066  F009         	movff	setPeriodTo@FPWM,___lltoft@c
  2789  007EE0  C067  F00A         	movff	setPeriodTo@FPWM+1,___lltoft@c+1
  2790  007EE4  C068  F00B         	movff	setPeriodTo@FPWM+2,___lltoft@c+2
  2791  007EE8  C069  F00C         	movff	setPeriodTo@FPWM+3,___lltoft@c+3
  2792  007EEC  EC62  F037         	call	___lltoft	;wreg free
  2793  007EF0  C009  F030         	movff	?___lltoft,___ftmul@f2
  2794  007EF4  C00A  F031         	movff	?___lltoft+1,___ftmul@f2+1
  2795  007EF8  C00B  F032         	movff	?___lltoft+2,___ftmul@f2+2
  2796  007EFC  C070  F009         	movff	setPeriodTo@TimerPrescaleValue,___awtoft@c
  2797  007F00  C071  F00A         	movff	setPeriodTo@TimerPrescaleValue+1,___awtoft@c+1
  2798  007F04  EC60  F036         	call	___awtoft	;wreg free
  2799  007F08  C009  F02D         	movff	?___awtoft,___ftmul@f1
  2800  007F0C  C00A  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  2801  007F10  C00B  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  2802  007F14  EC6B  F03B         	call	___ftmul	;wreg free
  2803  007F18  C02D  F06B         	movff	?___ftmul,_setPeriodTo$1529
  2804  007F1C  C02E  F06C         	movff	?___ftmul+1,_setPeriodTo$1529+1
  2805  007F20  C02F  F06D         	movff	?___ftmul+2,_setPeriodTo$1529+2
  2806                           
  2807                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2808  007F24  0E00               	movlw	0
  2809  007F26  6E30               	movwf	___ftmul@f2,c
  2810  007F28  0E80               	movlw	128
  2811  007F2A  6E31               	movwf	___ftmul@f2+1,c
  2812  007F2C  0E40               	movlw	64
  2813  007F2E  6E32               	movwf	___ftmul@f2+2,c
  2814  007F30  C06B  F02D         	movff	_setPeriodTo$1529,___ftmul@f1
  2815  007F34  C06C  F02E         	movff	_setPeriodTo$1529+1,___ftmul@f1+1
  2816  007F38  C06D  F02F         	movff	_setPeriodTo$1529+2,___ftmul@f1+2
  2817  007F3C  EC6B  F03B         	call	___ftmul	;wreg free
  2818  007F40  C02D  F015         	movff	?___ftmul,___ftdiv@f2
  2819  007F44  C02E  F016         	movff	?___ftmul+1,___ftdiv@f2+1
  2820  007F48  C02F  F017         	movff	?___ftmul+2,___ftdiv@f2+2
  2821  007F4C  C072  F009         	movff	setPeriodTo@FOSC,___lltoft@c
  2822  007F50  C073  F00A         	movff	setPeriodTo@FOSC+1,___lltoft@c+1
  2823  007F54  C074  F00B         	movff	setPeriodTo@FOSC+2,___lltoft@c+2
  2824  007F58  C075  F00C         	movff	setPeriodTo@FOSC+3,___lltoft@c+3
  2825  007F5C  EC62  F037         	call	___lltoft	;wreg free
  2826  007F60  C009  F012         	movff	?___lltoft,___ftdiv@f1
  2827  007F64  C00A  F013         	movff	?___lltoft+1,___ftdiv@f1+1
  2828  007F68  C00B  F014         	movff	?___lltoft+2,___ftdiv@f1+2
  2829  007F6C  ECF8  F03A         	call	___ftdiv	;wreg free
  2830  007F70  C012  F021         	movff	?___ftdiv,___ftadd@f1
  2831  007F74  C013  F022         	movff	?___ftdiv+1,___ftadd@f1+1
  2832  007F78  C014  F023         	movff	?___ftdiv+2,___ftadd@f1+2
  2833  007F7C  0E00               	movlw	0
  2834  007F7E  6E24               	movwf	___ftadd@f2,c
  2835  007F80  0E80               	movlw	128
  2836  007F82  6E25               	movwf	___ftadd@f2+1,c
  2837  007F84  0EBF               	movlw	191
  2838  007F86  6E26               	movwf	___ftadd@f2+2,c
  2839  007F88  EC5F  F03C         	call	___ftadd	;wreg free
  2840  007F8C  C021  F078         	movff	?___ftadd,setPeriodTo@period
  2841  007F90  C022  F079         	movff	?___ftadd+1,setPeriodTo@period+1
  2842  007F94  C023  F07A         	movff	?___ftadd+2,setPeriodTo@period+2
  2843                           
  2844                           ;MotorFunction.c: 52: period = round(period);
  2845  007F98  C078  F060         	movff	setPeriodTo@period,round@x
  2846  007F9C  C079  F061         	movff	setPeriodTo@period+1,round@x+1
  2847  007FA0  C07A  F062         	movff	setPeriodTo@period+2,round@x+2
  2848  007FA4  ECF7  F038         	call	_round	;wreg free
  2849  007FA8  C060  F078         	movff	?_round,setPeriodTo@period
  2850  007FAC  C061  F079         	movff	?_round+1,setPeriodTo@period+1
  2851  007FB0  C062  F07A         	movff	?_round+2,setPeriodTo@period+2
  2852                           
  2853                           ;MotorFunction.c: 54: OSCCON = ((clockSelectBits & 0x07) << 4) | 0x02;
  2854  007FB4  C076  F06A         	movff	setPeriodTo@clockSelectBits,??_setPeriodTo
  2855  007FB8  0E07               	movlw	7
  2856  007FBA  0100               	movlb	0	; () banked
  2857  007FBC  176A               	andwf	??_setPeriodTo& (0+255),f,b
  2858  007FBE  0100               	movlb	0	; () banked
  2859  007FC0  396A               	swapf	??_setPeriodTo& (0+255),w,b
  2860  007FC2  0BF0               	andlw	240
  2861  007FC4  0902               	iorlw	2
  2862  007FC6  6ED3               	movwf	4051,c	;volatile
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;MotorFunction.c: 55: PR2 = (int)period;
  2866  007FC8  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2867  007FCC  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2868  007FD0  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2869  007FD4  ECE5  F03B         	call	___fttol	;wreg free
  2870  007FD8  503C               	movf	?___fttol,w,c
  2871  007FDA  6ECB               	movwf	4043,c	;volatile
  2872                           
  2873                           ;MotorFunction.c: 56: T2CON = TimerPrescaleBits;
  2874  007FDC  C06E  FFCA         	movff	setPeriodTo@TimerPrescaleBits,4042	;volatile
  2875                           
  2876                           ;MotorFunction.c: 57: TMR2 = 0;
  2877  007FE0  0E00               	movlw	0
  2878  007FE2  6ECC               	movwf	4044,c	;volatile
  2879                           
  2880                           ;MotorFunction.c: 58: T2CONbits.TMR2ON = 1;
  2881  007FE4  84CA               	bsf	4042,2,c	;volatile
  2882                           
  2883                           ;MotorFunction.c: 59: return (int)period;
  2884  007FE6  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2885  007FEA  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2886  007FEE  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2887  007FF2  ECE5  F03B         	call	___fttol	;wreg free
  2888  007FF6  C03C  F066         	movff	?___fttol,?_setPeriodTo
  2889  007FFA  C03D  F067         	movff	?___fttol+1,?_setPeriodTo+1
  2890  007FFE  0012               	return	
  2891  008000                     __end_of_setPeriodTo:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           plusw1	equ	0xFE3
  2901                           fsr1l	equ	0xFE1
  2902                           indf2	equ	0xFDF
  2903                           plusw2	equ	0xFDB
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _round *****************
  2909 ;; Defined at:
  2910 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\round.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  x               3    0[BANK0 ] int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  f               3    3[BANK0 ] int 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  3    0[BANK0 ] int 
  2917 ;; Registers used:
  2918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2924 ;;      Params:         0       3       0       0       0       0       0       0       0
  2925 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2927 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2928 ;;Total ram usage:        6 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    3
  2931 ;; This function calls:
  2932 ;;		___ftadd
  2933 ;;		___ftneg
  2934 ;;		_trunc
  2935 ;; This function is called by:
  2936 ;;		_setPeriodTo
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text13
  2941  0071EE                     __ptext13:
  2942                           	opt stack 0
  2943  0071EE                     _round:
  2944                           	opt stack 24
  2945                           
  2946                           ;incstack = 0
  2947  0071EE  C060  F055         	movff	round@x,trunc@x
  2948  0071F2  C061  F056         	movff	round@x+1,trunc@x+1
  2949  0071F6  C062  F057         	movff	round@x+2,trunc@x+2
  2950  0071FA  ECB6  F038         	call	_trunc	;wreg free
  2951  0071FE  C055  F05D         	movff	?_trunc,___ftneg@f1
  2952  007202  C056  F05E         	movff	?_trunc+1,___ftneg@f1+1
  2953  007206  C057  F05F         	movff	?_trunc+2,___ftneg@f1+2
  2954  00720A  ECE8  F035         	call	___ftneg	;wreg free
  2955  00720E  C05D  F021         	movff	?___ftneg,___ftadd@f1
  2956  007212  C05E  F022         	movff	?___ftneg+1,___ftadd@f1+1
  2957  007216  C05F  F023         	movff	?___ftneg+2,___ftadd@f1+2
  2958  00721A  C060  F024         	movff	round@x,___ftadd@f2
  2959  00721E  C061  F025         	movff	round@x+1,___ftadd@f2+1
  2960  007222  C062  F026         	movff	round@x+2,___ftadd@f2+2
  2961  007226  EC5F  F03C         	call	___ftadd	;wreg free
  2962  00722A  C021  F063         	movff	?___ftadd,round@f
  2963  00722E  C022  F064         	movff	?___ftadd+1,round@f+1
  2964  007232  C023  F065         	movff	?___ftadd+2,round@f+2
  2965  007236  C060  F021         	movff	round@x,___ftadd@f1
  2966  00723A  C061  F022         	movff	round@x+1,___ftadd@f1+1
  2967  00723E  C062  F023         	movff	round@x+2,___ftadd@f1+2
  2968  007242  C063  F024         	movff	round@f,___ftadd@f2
  2969  007246  C064  F025         	movff	round@f+1,___ftadd@f2+1
  2970  00724A  C065  F026         	movff	round@f+2,___ftadd@f2+2
  2971  00724E  EC5F  F03C         	call	___ftadd	;wreg free
  2972  007252  C021  F060         	movff	?___ftadd,round@x
  2973  007256  C022  F061         	movff	?___ftadd+1,round@x+1
  2974  00725A  C023  F062         	movff	?___ftadd+2,round@x+2
  2975  00725E  C060  F055         	movff	round@x,trunc@x
  2976  007262  C061  F056         	movff	round@x+1,trunc@x+1
  2977  007266  C062  F057         	movff	round@x+2,trunc@x+2
  2978  00726A  ECB6  F038         	call	_trunc	;wreg free
  2979  00726E  C055  F060         	movff	?_trunc,?_round
  2980  007272  C056  F061         	movff	?_trunc+1,?_round+1
  2981  007276  C057  F062         	movff	?_trunc+2,?_round+2
  2982  00727A  0012               	return	
  2983  00727C                     __end_of_round:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           postdec1	equ	0xFE5
  2992                           plusw1	equ	0xFE3
  2993                           fsr1l	equ	0xFE1
  2994                           indf2	equ	0xFDF
  2995                           plusw2	equ	0xFDB
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _trunc *****************
  3001 ;; Defined at:
  3002 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\trunc.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  x               3   84[COMRAM] int 
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  i               3   87[COMRAM] int 
  3007 ;;  expon           2   90[COMRAM] int 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  3   84[COMRAM] int 
  3010 ;; Registers used:
  3011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3017 ;;      Params:         3       0       0       0       0       0       0       0       0
  3018 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3020 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        8 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		___altoft
  3026 ;;		___fttol
  3027 ;;		_frexp
  3028 ;; This function is called by:
  3029 ;;		_round
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text14
  3034  00716C                     __ptext14:
  3035                           	opt stack 0
  3036  00716C                     _trunc:
  3037                           	opt stack 24
  3038                           
  3039                           ;incstack = 0
  3040  00716C  C055  F001         	movff	trunc@x,frexp@value
  3041  007170  C056  F002         	movff	trunc@x+1,frexp@value+1
  3042  007174  C057  F003         	movff	trunc@x+2,frexp@value+2
  3043  007178  0E5B               	movlw	low trunc@expon
  3044  00717A  6E04               	movwf	frexp@eptr,c
  3045  00717C  0E00               	movlw	high trunc@expon
  3046  00717E  6E05               	movwf	frexp@eptr+1,c
  3047  007180  EC3D  F038         	call	_frexp	;wreg free
  3048  007184  AE5C               	btfss	trunc@expon+1,7,c
  3049  007186  D007               	goto	l1986
  3050  007188  0E00               	movlw	0
  3051  00718A  6E55               	movwf	?_trunc,c
  3052  00718C  0E00               	movlw	0
  3053  00718E  6E56               	movwf	?_trunc+1,c
  3054  007190  0E00               	movlw	0
  3055  007192  6E57               	movwf	?_trunc+2,c
  3056  007194  0012               	return	
  3057  007196                     l1986:
  3058  007196  505C               	movf	trunc@expon+1,w,c
  3059  007198  E104               	bnz	u1470
  3060  00719A  0E15               	movlw	21
  3061  00719C  5C5B               	subwf	trunc@expon,w,c
  3062  00719E  A0D8               	btfss	status,0,c
  3063  0071A0  D007               	goto	l1990
  3064  0071A2                     u1470:
  3065  0071A2  C055  F055         	movff	trunc@x,?_trunc
  3066  0071A6  C056  F056         	movff	trunc@x+1,?_trunc+1
  3067  0071AA  C057  F057         	movff	trunc@x+2,?_trunc+2
  3068  0071AE  0012               	return	
  3069  0071B0                     l1990:
  3070  0071B0  C055  F03C         	movff	trunc@x,___fttol@f1
  3071  0071B4  C056  F03D         	movff	trunc@x+1,___fttol@f1+1
  3072  0071B8  C057  F03E         	movff	trunc@x+2,___fttol@f1+2
  3073  0071BC  ECE5  F03B         	call	___fttol	;wreg free
  3074  0071C0  C03C  F04B         	movff	?___fttol,___altoft@c
  3075  0071C4  C03D  F04C         	movff	?___fttol+1,___altoft@c+1
  3076  0071C8  C03E  F04D         	movff	?___fttol+2,___altoft@c+2
  3077  0071CC  C03F  F04E         	movff	?___fttol+3,___altoft@c+3
  3078  0071D0  EC01  F038         	call	___altoft	;wreg free
  3079  0071D4  C04B  F058         	movff	?___altoft,trunc@i
  3080  0071D8  C04C  F059         	movff	?___altoft+1,trunc@i+1
  3081  0071DC  C04D  F05A         	movff	?___altoft+2,trunc@i+2
  3082  0071E0  C058  F055         	movff	trunc@i,?_trunc
  3083  0071E4  C059  F056         	movff	trunc@i+1,?_trunc+1
  3084  0071E8  C05A  F057         	movff	trunc@i+2,?_trunc+2
  3085  0071EC  0012               	return	
  3086  0071EE                     __end_of_trunc:
  3087                           	opt stack 0
  3088                           tblptru	equ	0xFF8
  3089                           tblptrh	equ	0xFF7
  3090                           tblptrl	equ	0xFF6
  3091                           tablat	equ	0xFF5
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           plusw1	equ	0xFE3
  3096                           fsr1l	equ	0xFE1
  3097                           indf2	equ	0xFDF
  3098                           plusw2	equ	0xFDB
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _frexp *****************
  3104 ;; Defined at:
  3105 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;  value           3    0[COMRAM] int 
  3108 ;;  eptr            2    3[COMRAM] PTR int 
  3109 ;;		 -> trunc@expon(2), 
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  3    0[COMRAM] PTR int 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3121 ;;      Params:         5       0       0       0       0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3123 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3124 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3125 ;;Total ram usage:        7 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; This function calls:
  3128 ;;		Nothing
  3129 ;; This function is called by:
  3130 ;;		_trunc
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text15
  3135  00707A                     __ptext15:
  3136                           	opt stack 0
  3137  00707A                     _frexp:
  3138                           	opt stack 25
  3139                           
  3140                           ;incstack = 0
  3141  00707A  5001               	movf	frexp@value,w,c
  3142  00707C  1002               	iorwf	frexp@value+1,w,c
  3143  00707E  1003               	iorwf	frexp@value+2,w,c
  3144  007080  A4D8               	btfss	status,2,c
  3145  007082  D009               	goto	l1894
  3146  007084  C004  FFD9         	movff	frexp@eptr,fsr2l
  3147  007088  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3148  00708C  0E00               	movlw	0
  3149  00708E  6EDE               	movwf	postinc2,c
  3150  007090  0E00               	movlw	0
  3151  007092  6EDD               	movwf	postdec2,c
  3152                           
  3153                           ;	Return value of _frexp is never used
  3154  007094  0012               	return	
  3155  007096                     l1894:
  3156  007096  5003               	movf	frexp@value+2,w,c
  3157  007098  0B7F               	andlw	127
  3158  00709A  6E06               	movwf	??_frexp& (0+255),c
  3159  00709C  6A07               	clrf	(??_frexp+1)& (0+255),c
  3160  00709E  90D8               	bcf	status,0,c
  3161  0070A0  3606               	rlcf	??_frexp,f,c
  3162  0070A2  3607               	rlcf	??_frexp+1,f,c
  3163  0070A4  C004  FFD9         	movff	frexp@eptr,fsr2l
  3164  0070A8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3165  0070AC  C006  FFDE         	movff	??_frexp,postinc2
  3166  0070B0  C007  FFDD         	movff	??_frexp+1,postdec2
  3167  0070B4  AE02               	btfss	frexp@value+1,7,c
  3168  0070B6  D003               	goto	u1230
  3169  0070B8  6A06               	clrf	??_frexp& (0+255),c
  3170  0070BA  2A06               	incf	??_frexp& (0+255),f,c
  3171  0070BC  D001               	goto	u1238
  3172  0070BE                     u1230:
  3173  0070BE  6A06               	clrf	??_frexp& (0+255),c
  3174  0070C0                     u1238:
  3175  0070C0  5006               	movf	??_frexp,w,c
  3176  0070C2  C004  FFD9         	movff	frexp@eptr,fsr2l
  3177  0070C6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3178  0070CA  12DE               	iorwf	postinc2,f,c
  3179  0070CC  0E00               	movlw	0
  3180  0070CE  12DD               	iorwf	postdec2,f,c
  3181  0070D0  C004  FFD9         	movff	frexp@eptr,fsr2l
  3182  0070D4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3183  0070D8  0E82               	movlw	130
  3184  0070DA  26DE               	addwf	postinc2,f,c
  3185  0070DC  0EFF               	movlw	255
  3186  0070DE  22DD               	addwfc	postdec2,f,c
  3187  0070E0  8003               	bsf	frexp@value+2,0,c
  3188  0070E2  8203               	bsf	frexp@value+2,1,c
  3189  0070E4  8403               	bsf	frexp@value+2,2,c
  3190  0070E6  8603               	bsf	frexp@value+2,3,c
  3191  0070E8  8803               	bsf	frexp@value+2,4,c
  3192  0070EA  8A03               	bsf	frexp@value+2,5,c
  3193  0070EC  9C03               	bcf	frexp@value+2,6,c
  3194  0070EE  9E02               	bcf	frexp@value+1,7,c
  3195  0070F0  0012               	return	
  3196  0070F2                     __end_of_frexp:
  3197                           	opt stack 0
  3198                           tblptru	equ	0xFF8
  3199                           tblptrh	equ	0xFF7
  3200                           tblptrl	equ	0xFF6
  3201                           tablat	equ	0xFF5
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           plusw1	equ	0xFE3
  3206                           fsr1l	equ	0xFE1
  3207                           indf2	equ	0xFDF
  3208                           postinc2	equ	0xFDE
  3209                           postdec2	equ	0xFDD
  3210                           plusw2	equ	0xFDB
  3211                           fsr2h	equ	0xFDA
  3212                           fsr2l	equ	0xFD9
  3213                           status	equ	0xFD8
  3214                           
  3215 ;; *************** function ___altoft *****************
  3216 ;; Defined at:
  3217 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  c               4   74[COMRAM] long 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  sign            1   83[COMRAM] unsigned char 
  3222 ;;  exp             1   82[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  3   74[COMRAM] float 
  3225 ;; Registers used:
  3226 ;;		wreg, status,2, status,0, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3232 ;;      Params:         4       0       0       0       0       0       0       0       0
  3233 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3234 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3235 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3236 ;;Total ram usage:       10 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    1
  3239 ;; This function calls:
  3240 ;;		___ftpack
  3241 ;; This function is called by:
  3242 ;;		_trunc
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text16
  3247  007002                     __ptext16:
  3248                           	opt stack 0
  3249  007002                     ___altoft:
  3250                           	opt stack 24
  3251                           
  3252                           ;incstack = 0
  3253  007002  0E00               	movlw	0
  3254  007004  6E54               	movwf	___altoft@sign,c
  3255  007006  0E8E               	movlw	142
  3256  007008  6E53               	movwf	___altoft@exp,c
  3257  00700A  AE4E               	btfss	___altoft@c+3,7,c
  3258  00700C  D011               	goto	l1836
  3259  00700E  1E4E               	comf	___altoft@c+3,f,c
  3260  007010  1E4D               	comf	___altoft@c+2,f,c
  3261  007012  1E4C               	comf	___altoft@c+1,f,c
  3262  007014  6C4B               	negf	___altoft@c,c
  3263  007016  0E00               	movlw	0
  3264  007018  224C               	addwfc	___altoft@c+1,f,c
  3265  00701A  224D               	addwfc	___altoft@c+2,f,c
  3266  00701C  224E               	addwfc	___altoft@c+3,f,c
  3267  00701E  0E01               	movlw	1
  3268  007020  6E54               	movwf	___altoft@sign,c
  3269  007022  D006               	goto	l1836
  3270  007024                     l1834:
  3271  007024  90D8               	bcf	status,0,c
  3272  007026  324E               	rrcf	___altoft@c+3,f,c
  3273  007028  324D               	rrcf	___altoft@c+2,f,c
  3274  00702A  324C               	rrcf	___altoft@c+1,f,c
  3275  00702C  324B               	rrcf	___altoft@c,f,c
  3276  00702E  2A53               	incf	___altoft@exp,f,c
  3277  007030                     l1836:
  3278  007030  0E00               	movlw	0
  3279  007032  144B               	andwf	___altoft@c,w,c
  3280  007034  6E4F               	movwf	??___altoft& (0+255),c
  3281  007036  0E00               	movlw	0
  3282  007038  144C               	andwf	___altoft@c+1,w,c
  3283  00703A  6E50               	movwf	(??___altoft+1)& (0+255),c
  3284  00703C  0E00               	movlw	0
  3285  00703E  144D               	andwf	___altoft@c+2,w,c
  3286  007040  6E51               	movwf	(??___altoft+2)& (0+255),c
  3287  007042  0EFF               	movlw	255
  3288  007044  144E               	andwf	___altoft@c+3,w,c
  3289  007046  6E52               	movwf	(??___altoft+3)& (0+255),c
  3290  007048  504F               	movf	??___altoft,w,c
  3291  00704A  1050               	iorwf	??___altoft+1,w,c
  3292  00704C  1051               	iorwf	??___altoft+2,w,c
  3293  00704E  1052               	iorwf	??___altoft+3,w,c
  3294  007050  A4D8               	btfss	status,2,c
  3295  007052  D7E8               	goto	l1834
  3296  007054  C04B  F001         	movff	___altoft@c,___ftpack@arg
  3297  007058  C04C  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3298  00705C  C04D  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3299  007060  C053  F004         	movff	___altoft@exp,___ftpack@exp
  3300  007064  C054  F005         	movff	___altoft@sign,___ftpack@sign
  3301  007068  ECD7  F039         	call	___ftpack	;wreg free
  3302  00706C  C001  F04B         	movff	?___ftpack,?___altoft
  3303  007070  C002  F04C         	movff	?___ftpack+1,?___altoft+1
  3304  007074  C003  F04D         	movff	?___ftpack+2,?___altoft+2
  3305  007078  0012               	return	
  3306  00707A                     __end_of___altoft:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postdec1	equ	0xFE5
  3315                           plusw1	equ	0xFE3
  3316                           fsr1l	equ	0xFE1
  3317                           indf2	equ	0xFDF
  3318                           postinc2	equ	0xFDE
  3319                           postdec2	equ	0xFDD
  3320                           plusw2	equ	0xFDB
  3321                           fsr2h	equ	0xFDA
  3322                           fsr2l	equ	0xFD9
  3323                           status	equ	0xFD8
  3324                           
  3325 ;; *************** function ___ftneg *****************
  3326 ;; Defined at:
  3327 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  f1              3   92[COMRAM] float 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;                  3   92[COMRAM] float 
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0
  3336 ;; Tracked objects:
  3337 ;;		On entry : 0/0
  3338 ;;		On exit  : 0/0
  3339 ;;		Unchanged: 0/0
  3340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3341 ;;      Params:         3       0       0       0       0       0       0       0       0
  3342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3344 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3345 ;;Total ram usage:        3 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; This function calls:
  3348 ;;		Nothing
  3349 ;; This function is called by:
  3350 ;;		_round
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text17
  3355  006BD0                     __ptext17:
  3356                           	opt stack 0
  3357  006BD0                     ___ftneg:
  3358                           	opt stack 26
  3359                           
  3360                           ;incstack = 0
  3361  006BD0  505D               	movf	___ftneg@f1,w,c
  3362  006BD2  105E               	iorwf	___ftneg@f1+1,w,c
  3363  006BD4  105F               	iorwf	___ftneg@f1+2,w,c
  3364  006BD6  B4D8               	btfsc	status,2,c
  3365  006BD8  D006               	goto	l645
  3366  006BDA  0E00               	movlw	0
  3367  006BDC  1A5D               	xorwf	___ftneg@f1,f,c
  3368  006BDE  0E00               	movlw	0
  3369  006BE0  1A5E               	xorwf	___ftneg@f1+1,f,c
  3370  006BE2  0E80               	movlw	128
  3371  006BE4  1A5F               	xorwf	___ftneg@f1+2,f,c
  3372  006BE6                     l645:
  3373  006BE6  C05D  F05D         	movff	___ftneg@f1,?___ftneg
  3374  006BEA  C05E  F05E         	movff	___ftneg@f1+1,?___ftneg+1
  3375  006BEE  C05F  F05F         	movff	___ftneg@f1+2,?___ftneg+2
  3376  006BF2  0012               	return		;funcret
  3377  006BF4                     __end_of___ftneg:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           postinc0	equ	0xFEE
  3384                           wreg	equ	0xFE8
  3385                           postdec1	equ	0xFE5
  3386                           plusw1	equ	0xFE3
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           plusw2	equ	0xFDB
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function ___lltoft *****************
  3397 ;; Defined at:
  3398 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  c               4    8[COMRAM] unsigned long 
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;  exp             1   16[COMRAM] unsigned char 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  3    8[COMRAM] float 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, status,0, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3412 ;;      Params:         4       0       0       0       0       0       0       0       0
  3413 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3414 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3415 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3416 ;;Total ram usage:        9 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    1
  3419 ;; This function calls:
  3420 ;;		___ftpack
  3421 ;; This function is called by:
  3422 ;;		_setPeriodTo
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text18
  3427  006EC4                     __ptext18:
  3428                           	opt stack 0
  3429  006EC4                     ___lltoft:
  3430                           	opt stack 26
  3431                           
  3432                           ;incstack = 0
  3433  006EC4  0E8E               	movlw	142
  3434  006EC6  6E11               	movwf	___lltoft@exp,c
  3435  006EC8  D006               	goto	l2120
  3436  006ECA                     l2118:
  3437  006ECA  90D8               	bcf	status,0,c
  3438  006ECC  320C               	rrcf	___lltoft@c+3,f,c
  3439  006ECE  320B               	rrcf	___lltoft@c+2,f,c
  3440  006ED0  320A               	rrcf	___lltoft@c+1,f,c
  3441  006ED2  3209               	rrcf	___lltoft@c,f,c
  3442  006ED4  2A11               	incf	___lltoft@exp,f,c
  3443  006ED6                     l2120:
  3444  006ED6  0E00               	movlw	0
  3445  006ED8  1409               	andwf	___lltoft@c,w,c
  3446  006EDA  6E0D               	movwf	??___lltoft& (0+255),c
  3447  006EDC  0E00               	movlw	0
  3448  006EDE  140A               	andwf	___lltoft@c+1,w,c
  3449  006EE0  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3450  006EE2  0E00               	movlw	0
  3451  006EE4  140B               	andwf	___lltoft@c+2,w,c
  3452  006EE6  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3453  006EE8  0EFF               	movlw	255
  3454  006EEA  140C               	andwf	___lltoft@c+3,w,c
  3455  006EEC  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3456  006EEE  500D               	movf	??___lltoft,w,c
  3457  006EF0  100E               	iorwf	??___lltoft+1,w,c
  3458  006EF2  100F               	iorwf	??___lltoft+2,w,c
  3459  006EF4  1010               	iorwf	??___lltoft+3,w,c
  3460  006EF6  A4D8               	btfss	status,2,c
  3461  006EF8  D7E8               	goto	l2118
  3462  006EFA  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3463  006EFE  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3464  006F02  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3465  006F06  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3466  006F0A  0E00               	movlw	0
  3467  006F0C  6E05               	movwf	___ftpack@sign,c
  3468  006F0E  ECD7  F039         	call	___ftpack	;wreg free
  3469  006F12  C001  F009         	movff	?___ftpack,?___lltoft
  3470  006F16  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3471  006F1A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3472  006F1E  0012               	return	
  3473  006F20                     __end_of___lltoft:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           postdec1	equ	0xFE5
  3482                           plusw1	equ	0xFE3
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           plusw2	equ	0xFDB
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _doorSetDutyCycleTo *****************
  3493 ;; Defined at:
  3494 ;;		line 71 in file "MotorFunction.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  Duty_cycle      3   74[COMRAM] float 
  3497 ;;  Period          2   77[COMRAM] int 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  PWM10BitValu    2   84[COMRAM] int 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;		None               void
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3509 ;;      Params:         5       0       0       0       0       0       0       0       0
  3510 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3511 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3512 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3513 ;;Total ram usage:       12 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    2
  3516 ;; This function calls:
  3517 ;;		___awtoft
  3518 ;;		___ftadd
  3519 ;;		___ftdiv
  3520 ;;		___ftmul
  3521 ;;		___fttol
  3522 ;; This function is called by:
  3523 ;;		_motordoor_open
  3524 ;;		_motordoor_close
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text19
  3529  00745C                     __ptext19:
  3530                           	opt stack 0
  3531  00745C                     _doorSetDutyCycleTo:
  3532                           	opt stack 26
  3533                           
  3534                           ;MotorFunction.c: 73: int PWM10BitValue;
  3535                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  3536                           
  3537                           ;incstack = 0
  3538  00745C  0E00               	movlw	0
  3539  00745E  6E15               	movwf	___ftdiv@f2,c
  3540  007460  0EC8               	movlw	200
  3541  007462  6E16               	movwf	___ftdiv@f2+1,c
  3542  007464  0E42               	movlw	66
  3543  007466  6E17               	movwf	___ftdiv@f2+2,c
  3544  007468  C04B  F012         	movff	doorSetDutyCycleTo@Duty_cycle,___ftdiv@f1
  3545  00746C  C04C  F013         	movff	doorSetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  3546  007470  C04D  F014         	movff	doorSetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  3547  007474  ECF8  F03A         	call	___ftdiv	;wreg free
  3548  007478  C012  F030         	movff	?___ftdiv,___ftmul@f2
  3549  00747C  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  3550  007480  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  3551  007484  0E00               	movlw	0
  3552  007486  6E24               	movwf	___ftadd@f2,c
  3553  007488  0E80               	movlw	128
  3554  00748A  6E25               	movwf	___ftadd@f2+1,c
  3555  00748C  0E3F               	movlw	63
  3556  00748E  6E26               	movwf	___ftadd@f2+2,c
  3557  007490  C04E  F009         	movff	doorSetDutyCycleTo@Period,___awtoft@c
  3558  007494  C04F  F00A         	movff	doorSetDutyCycleTo@Period+1,___awtoft@c+1
  3559  007498  EC60  F036         	call	___awtoft	;wreg free
  3560  00749C  C009  F021         	movff	?___awtoft,___ftadd@f1
  3561  0074A0  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  3562  0074A4  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  3563  0074A8  EC5F  F03C         	call	___ftadd	;wreg free
  3564  0074AC  C021  F02D         	movff	?___ftadd,___ftmul@f1
  3565  0074B0  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  3566  0074B4  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  3567  0074B8  EC6B  F03B         	call	___ftmul	;wreg free
  3568  0074BC  C02D  F052         	movff	?___ftmul,_doorSetDutyCycleTo$1531
  3569  0074C0  C02E  F053         	movff	?___ftmul+1,_doorSetDutyCycleTo$1531+1
  3570  0074C4  C02F  F054         	movff	?___ftmul+2,_doorSetDutyCycleTo$1531+2
  3571                           
  3572                           ;MotorFunction.c: 73: int PWM10BitValue;
  3573                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  3574  0074C8  0E00               	movlw	0
  3575  0074CA  6E30               	movwf	___ftmul@f2,c
  3576  0074CC  0E80               	movlw	128
  3577  0074CE  6E31               	movwf	___ftmul@f2+1,c
  3578  0074D0  0E40               	movlw	64
  3579  0074D2  6E32               	movwf	___ftmul@f2+2,c
  3580  0074D4  C052  F02D         	movff	_doorSetDutyCycleTo$1531,___ftmul@f1
  3581  0074D8  C053  F02E         	movff	_doorSetDutyCycleTo$1531+1,___ftmul@f1+1
  3582  0074DC  C054  F02F         	movff	_doorSetDutyCycleTo$1531+2,___ftmul@f1+2
  3583  0074E0  EC6B  F03B         	call	___ftmul	;wreg free
  3584  0074E4  C02D  F03C         	movff	?___ftmul,___fttol@f1
  3585  0074E8  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  3586  0074EC  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  3587  0074F0  ECE5  F03B         	call	___fttol	;wreg free
  3588  0074F4  C03C  F055         	movff	?___fttol,doorSetDutyCycleTo@PWM10BitValue
  3589  0074F8  C03D  F056         	movff	?___fttol+1,doorSetDutyCycleTo@PWM10BitValue+1
  3590                           
  3591                           ;MotorFunction.c: 76: CCPR2L = (PWM10BitValue >> 2);
  3592  0074FC  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  3593  007500  C056  F051         	movff	doorSetDutyCycleTo@PWM10BitValue+1,??_doorSetDutyCycleTo+1
  3594  007504  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  3595  007506  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  3596  007508  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  3597  00750A  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  3598  00750C  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  3599  00750E  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  3600  007510  5050               	movf	??_doorSetDutyCycleTo,w,c
  3601  007512  6EBB               	movwf	4027,c	;volatile
  3602                           
  3603                           ;MotorFunction.c: 77: CCP2CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  3604  007514  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  3605  007518  0E03               	movlw	3
  3606  00751A  1650               	andwf	??_doorSetDutyCycleTo,f,c
  3607  00751C  3850               	swapf	??_doorSetDutyCycleTo,w,c
  3608  00751E  0BF0               	andlw	240
  3609  007520  090C               	iorlw	12
  3610  007522  6EBA               	movwf	4026,c	;volatile
  3611  007524  0012               	return		;funcret
  3612  007526                     __end_of_doorSetDutyCycleTo:
  3613                           	opt stack 0
  3614                           tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           plusw1	equ	0xFE3
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           postdec2	equ	0xFDD
  3626                           plusw2	equ	0xFDB
  3627                           fsr2h	equ	0xFDA
  3628                           fsr2l	equ	0xFD9
  3629                           status	equ	0xFD8
  3630                           
  3631 ;; *************** function ___fttol *****************
  3632 ;; Defined at:
  3633 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  f1              3   59[COMRAM] float 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  lval            4   69[COMRAM] unsigned long 
  3638 ;;  exp1            1   73[COMRAM] unsigned char 
  3639 ;;  sign1           1   68[COMRAM] unsigned char 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  4   59[COMRAM] long 
  3642 ;; Registers used:
  3643 ;;		wreg, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 0/0
  3646 ;;		On exit  : 0/0
  3647 ;;		Unchanged: 0/0
  3648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3649 ;;      Params:         4       0       0       0       0       0       0       0       0
  3650 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3651 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3652 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3653 ;;Total ram usage:       15 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_setPeriodTo
  3659 ;;		_SetDutyCycleTo
  3660 ;;		_doorSetDutyCycleTo
  3661 ;;		_trunc
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text20
  3666  0077CA                     __ptext20:
  3667                           	opt stack 0
  3668  0077CA                     ___fttol:
  3669                           	opt stack 25
  3670                           
  3671                           ;incstack = 0
  3672  0077CA  C03E  F040         	movff	___fttol@f1+2,??___fttol
  3673  0077CE  6A41               	clrf	(??___fttol+1)& (0+255),c
  3674  0077D0  6A42               	clrf	(??___fttol+2)& (0+255),c
  3675  0077D2  343D               	rlcf	___fttol@f1+1,w,c
  3676  0077D4  3640               	rlcf	??___fttol& (0+255),f,c
  3677  0077D6  E301               	bnc	u1141
  3678  0077D8  8041               	bsf	(??___fttol+1)& (0+255),0,c
  3679  0077DA                     u1141:
  3680  0077DA  5040               	movf	??___fttol,w,c
  3681  0077DC  6E4A               	movwf	___fttol@exp1,c
  3682  0077DE  504A               	movf	___fttol@exp1,w,c
  3683  0077E0  A4D8               	btfss	status,2,c
  3684  0077E2  D009               	goto	l1848
  3685  0077E4  0E00               	movlw	0
  3686  0077E6  6E3C               	movwf	?___fttol,c
  3687  0077E8  0E00               	movlw	0
  3688  0077EA  6E3D               	movwf	?___fttol+1,c
  3689  0077EC  0E00               	movlw	0
  3690  0077EE  6E3E               	movwf	?___fttol+2,c
  3691  0077F0  0E00               	movlw	0
  3692  0077F2  6E3F               	movwf	?___fttol+3,c
  3693  0077F4  0012               	return	
  3694  0077F6                     l1848:
  3695  0077F6  0E17               	movlw	23
  3696  0077F8  6E40               	movwf	??___fttol& (0+255),c
  3697  0077FA  C03C  F041         	movff	___fttol@f1,??___fttol+1
  3698  0077FE  C03D  F042         	movff	___fttol@f1+1,??___fttol+2
  3699  007802  C03E  F043         	movff	___fttol@f1+2,??___fttol+3
  3700  007806  2840               	incf	??___fttol,w,c
  3701  007808  6E44               	movwf	(??___fttol+4)& (0+255),c
  3702  00780A  D004               	goto	u1160
  3703  00780C                     u1165:
  3704  00780C  90D8               	bcf	status,0,c
  3705  00780E  3243               	rrcf	??___fttol+3,f,c
  3706  007810  3242               	rrcf	??___fttol+2,f,c
  3707  007812  3241               	rrcf	??___fttol+1,f,c
  3708  007814                     u1160:
  3709  007814  2E44               	decfsz	(??___fttol+4)& (0+255),f,c
  3710  007816  D7FA               	goto	u1165
  3711  007818  5041               	movf	??___fttol+1,w,c
  3712  00781A  6E45               	movwf	___fttol@sign1,c
  3713  00781C  8E3D               	bsf	___fttol@f1+1,7,c
  3714  00781E  0EFF               	movlw	255
  3715  007820  163C               	andwf	___fttol@f1,f,c
  3716  007822  0EFF               	movlw	255
  3717  007824  163D               	andwf	___fttol@f1+1,f,c
  3718  007826  0E00               	movlw	0
  3719  007828  163E               	andwf	___fttol@f1+2,f,c
  3720  00782A  503C               	movf	___fttol@f1,w,c
  3721  00782C  6E46               	movwf	___fttol@lval,c
  3722  00782E  503D               	movf	___fttol@f1+1,w,c
  3723  007830  6E47               	movwf	___fttol@lval+1,c
  3724  007832  503E               	movf	___fttol@f1+2,w,c
  3725  007834  6E48               	movwf	___fttol@lval+2,c
  3726  007836  6A49               	clrf	___fttol@lval+3,c
  3727  007838  0E8E               	movlw	142
  3728  00783A  5E4A               	subwf	___fttol@exp1,f,c
  3729  00783C  AE4A               	btfss	___fttol@exp1,7,c
  3730  00783E  D016               	goto	l1870
  3731  007840  504A               	movf	___fttol@exp1,w,c
  3732  007842  0A80               	xorlw	128
  3733  007844  0F8F               	addlw	143
  3734  007846  B0D8               	btfsc	status,0,c
  3735  007848  D009               	goto	l1866
  3736  00784A  0E00               	movlw	0
  3737  00784C  6E3C               	movwf	?___fttol,c
  3738  00784E  0E00               	movlw	0
  3739  007850  6E3D               	movwf	?___fttol+1,c
  3740  007852  0E00               	movlw	0
  3741  007854  6E3E               	movwf	?___fttol+2,c
  3742  007856  0E00               	movlw	0
  3743  007858  6E3F               	movwf	?___fttol+3,c
  3744  00785A  0012               	return	
  3745  00785C                     l1866:
  3746  00785C  90D8               	bcf	status,0,c
  3747  00785E  3249               	rrcf	___fttol@lval+3,f,c
  3748  007860  3248               	rrcf	___fttol@lval+2,f,c
  3749  007862  3247               	rrcf	___fttol@lval+1,f,c
  3750  007864  3246               	rrcf	___fttol@lval,f,c
  3751  007866  3E4A               	incfsz	___fttol@exp1,f,c
  3752  007868  D7F9               	goto	l1866
  3753  00786A  D015               	goto	l1880
  3754  00786C                     l1870:
  3755  00786C  0E17               	movlw	23
  3756  00786E  644A               	cpfsgt	___fttol@exp1,c
  3757  007870  D00F               	goto	l1878
  3758  007872  0E00               	movlw	0
  3759  007874  6E3C               	movwf	?___fttol,c
  3760  007876  0E00               	movlw	0
  3761  007878  6E3D               	movwf	?___fttol+1,c
  3762  00787A  0E00               	movlw	0
  3763  00787C  6E3E               	movwf	?___fttol+2,c
  3764  00787E  0E00               	movlw	0
  3765  007880  6E3F               	movwf	?___fttol+3,c
  3766  007882  0012               	return	
  3767  007884                     l1876:
  3768  007884  90D8               	bcf	status,0,c
  3769  007886  3646               	rlcf	___fttol@lval,f,c
  3770  007888  3647               	rlcf	___fttol@lval+1,f,c
  3771  00788A  3648               	rlcf	___fttol@lval+2,f,c
  3772  00788C  3649               	rlcf	___fttol@lval+3,f,c
  3773  00788E  064A               	decf	___fttol@exp1,f,c
  3774  007890                     l1878:
  3775  007890  504A               	movf	___fttol@exp1,w,c
  3776  007892  A4D8               	btfss	status,2,c
  3777  007894  D7F7               	goto	l1876
  3778  007896                     l1880:
  3779  007896  5045               	movf	___fttol@sign1,w,c
  3780  007898  B4D8               	btfsc	status,2,c
  3781  00789A  D008               	goto	l1884
  3782  00789C  1E49               	comf	___fttol@lval+3,f,c
  3783  00789E  1E48               	comf	___fttol@lval+2,f,c
  3784  0078A0  1E47               	comf	___fttol@lval+1,f,c
  3785  0078A2  6C46               	negf	___fttol@lval,c
  3786  0078A4  0E00               	movlw	0
  3787  0078A6  2247               	addwfc	___fttol@lval+1,f,c
  3788  0078A8  2248               	addwfc	___fttol@lval+2,f,c
  3789  0078AA  2249               	addwfc	___fttol@lval+3,f,c
  3790  0078AC                     l1884:
  3791  0078AC  C046  F03C         	movff	___fttol@lval,?___fttol
  3792  0078B0  C047  F03D         	movff	___fttol@lval+1,?___fttol+1
  3793  0078B4  C048  F03E         	movff	___fttol@lval+2,?___fttol+2
  3794  0078B8  C049  F03F         	movff	___fttol@lval+3,?___fttol+3
  3795  0078BC  0012               	return	
  3796  0078BE                     __end_of___fttol:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           plusw1	equ	0xFE3
  3806                           fsr1l	equ	0xFE1
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           plusw2	equ	0xFDB
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function ___ftmul *****************
  3816 ;; Defined at:
  3817 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;  f1              3   44[COMRAM] float 
  3820 ;;  f2              3   47[COMRAM] float 
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;  f3_as_produc    3   54[COMRAM] unsigned um
  3823 ;;  sign            1   58[COMRAM] unsigned char 
  3824 ;;  cntr            1   57[COMRAM] unsigned char 
  3825 ;;  exp             1   53[COMRAM] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  3   44[COMRAM] float 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3835 ;;      Params:         6       0       0       0       0       0       0       0       0
  3836 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3837 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3838 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3839 ;;Total ram usage:       15 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    1
  3842 ;; This function calls:
  3843 ;;		___ftpack
  3844 ;; This function is called by:
  3845 ;;		_setPeriodTo
  3846 ;;		_SetDutyCycleTo
  3847 ;;		_doorSetDutyCycleTo
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text21
  3852  0076D6                     __ptext21:
  3853                           	opt stack 0
  3854  0076D6                     ___ftmul:
  3855                           	opt stack 26
  3856                           
  3857                           ;incstack = 0
  3858  0076D6  C02F  F033         	movff	___ftmul@f1+2,??___ftmul
  3859  0076DA  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3860  0076DC  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3861  0076DE  342E               	rlcf	___ftmul@f1+1,w,c
  3862  0076E0  3633               	rlcf	??___ftmul& (0+255),f,c
  3863  0076E2  E301               	bnc	u1531
  3864  0076E4  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3865  0076E6                     u1531:
  3866  0076E6  5033               	movf	??___ftmul,w,c
  3867  0076E8  6E36               	movwf	___ftmul@exp,c
  3868  0076EA  5036               	movf	___ftmul@exp,w,c
  3869  0076EC  A4D8               	btfss	status,2,c
  3870  0076EE  D007               	goto	l2062
  3871  0076F0  0E00               	movlw	0
  3872  0076F2  6E2D               	movwf	?___ftmul,c
  3873  0076F4  0E00               	movlw	0
  3874  0076F6  6E2E               	movwf	?___ftmul+1,c
  3875  0076F8  0E00               	movlw	0
  3876  0076FA  6E2F               	movwf	?___ftmul+2,c
  3877  0076FC  0012               	return	
  3878  0076FE                     l2062:
  3879  0076FE  C032  F033         	movff	___ftmul@f2+2,??___ftmul
  3880  007702  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3881  007704  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3882  007706  3431               	rlcf	___ftmul@f2+1,w,c
  3883  007708  3633               	rlcf	??___ftmul& (0+255),f,c
  3884  00770A  E301               	bnc	u1551
  3885  00770C  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3886  00770E                     u1551:
  3887  00770E  5033               	movf	??___ftmul,w,c
  3888  007710  6E3B               	movwf	___ftmul@sign,c
  3889  007712  503B               	movf	___ftmul@sign,w,c
  3890  007714  A4D8               	btfss	status,2,c
  3891  007716  D007               	goto	l2068
  3892  007718  0E00               	movlw	0
  3893  00771A  6E2D               	movwf	?___ftmul,c
  3894  00771C  0E00               	movlw	0
  3895  00771E  6E2E               	movwf	?___ftmul+1,c
  3896  007720  0E00               	movlw	0
  3897  007722  6E2F               	movwf	?___ftmul+2,c
  3898  007724  0012               	return	
  3899  007726                     l2068:
  3900  007726  503B               	movf	___ftmul@sign,w,c
  3901  007728  0F7B               	addlw	123
  3902  00772A  2636               	addwf	___ftmul@exp,f,c
  3903  00772C  C02F  F03B         	movff	___ftmul@f1+2,___ftmul@sign
  3904  007730  5032               	movf	___ftmul@f2+2,w,c
  3905  007732  1A3B               	xorwf	___ftmul@sign,f,c
  3906  007734  0E80               	movlw	128
  3907  007736  163B               	andwf	___ftmul@sign,f,c
  3908  007738  8E2E               	bsf	___ftmul@f1+1,7,c
  3909  00773A  8E31               	bsf	___ftmul@f2+1,7,c
  3910  00773C  0EFF               	movlw	255
  3911  00773E  1630               	andwf	___ftmul@f2,f,c
  3912  007740  0EFF               	movlw	255
  3913  007742  1631               	andwf	___ftmul@f2+1,f,c
  3914  007744  0E00               	movlw	0
  3915  007746  1632               	andwf	___ftmul@f2+2,f,c
  3916  007748  0E00               	movlw	0
  3917  00774A  6E37               	movwf	___ftmul@f3_as_product,c
  3918  00774C  0E00               	movlw	0
  3919  00774E  6E38               	movwf	___ftmul@f3_as_product+1,c
  3920  007750  0E00               	movlw	0
  3921  007752  6E39               	movwf	___ftmul@f3_as_product+2,c
  3922  007754  0E07               	movlw	7
  3923  007756  6E3A               	movwf	___ftmul@cntr,c
  3924  007758                     l2082:
  3925  007758  A02D               	btfss	___ftmul@f1,0,c
  3926  00775A  D006               	goto	l2086
  3927  00775C  5030               	movf	___ftmul@f2,w,c
  3928  00775E  2637               	addwf	___ftmul@f3_as_product,f,c
  3929  007760  5031               	movf	___ftmul@f2+1,w,c
  3930  007762  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  3931  007764  5032               	movf	___ftmul@f2+2,w,c
  3932  007766  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  3933  007768                     l2086:
  3934  007768  90D8               	bcf	status,0,c
  3935  00776A  322F               	rrcf	___ftmul@f1+2,f,c
  3936  00776C  322E               	rrcf	___ftmul@f1+1,f,c
  3937  00776E  322D               	rrcf	___ftmul@f1,f,c
  3938  007770  90D8               	bcf	status,0,c
  3939  007772  3630               	rlcf	___ftmul@f2,f,c
  3940  007774  3631               	rlcf	___ftmul@f2+1,f,c
  3941  007776  3632               	rlcf	___ftmul@f2+2,f,c
  3942  007778  2E3A               	decfsz	___ftmul@cntr,f,c
  3943  00777A  D7EE               	goto	l2082
  3944  00777C  0E09               	movlw	9
  3945  00777E  6E3A               	movwf	___ftmul@cntr,c
  3946  007780                     l2092:
  3947  007780  A02D               	btfss	___ftmul@f1,0,c
  3948  007782  D006               	goto	l2096
  3949  007784  5030               	movf	___ftmul@f2,w,c
  3950  007786  2637               	addwf	___ftmul@f3_as_product,f,c
  3951  007788  5031               	movf	___ftmul@f2+1,w,c
  3952  00778A  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  3953  00778C  5032               	movf	___ftmul@f2+2,w,c
  3954  00778E  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  3955  007790                     l2096:
  3956  007790  90D8               	bcf	status,0,c
  3957  007792  322F               	rrcf	___ftmul@f1+2,f,c
  3958  007794  322E               	rrcf	___ftmul@f1+1,f,c
  3959  007796  322D               	rrcf	___ftmul@f1,f,c
  3960  007798  90D8               	bcf	status,0,c
  3961  00779A  3239               	rrcf	___ftmul@f3_as_product+2,f,c
  3962  00779C  3238               	rrcf	___ftmul@f3_as_product+1,f,c
  3963  00779E  3237               	rrcf	___ftmul@f3_as_product,f,c
  3964  0077A0  2E3A               	decfsz	___ftmul@cntr,f,c
  3965  0077A2  D7EE               	goto	l2092
  3966  0077A4  C037  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3967  0077A8  C038  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3968  0077AC  C039  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3969  0077B0  C036  F004         	movff	___ftmul@exp,___ftpack@exp
  3970  0077B4  C03B  F005         	movff	___ftmul@sign,___ftpack@sign
  3971  0077B8  ECD7  F039         	call	___ftpack	;wreg free
  3972  0077BC  C001  F02D         	movff	?___ftpack,?___ftmul
  3973  0077C0  C002  F02E         	movff	?___ftpack+1,?___ftmul+1
  3974  0077C4  C003  F02F         	movff	?___ftpack+2,?___ftmul+2
  3975  0077C8  0012               	return	
  3976  0077CA                     __end_of___ftmul:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           postinc0	equ	0xFEE
  3983                           wreg	equ	0xFE8
  3984                           postdec1	equ	0xFE5
  3985                           plusw1	equ	0xFE3
  3986                           fsr1l	equ	0xFE1
  3987                           indf2	equ	0xFDF
  3988                           postinc2	equ	0xFDE
  3989                           postdec2	equ	0xFDD
  3990                           plusw2	equ	0xFDB
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function ___ftdiv *****************
  3996 ;; Defined at:
  3997 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  f1              3   17[COMRAM] float 
  4000 ;;  f2              3   20[COMRAM] float 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  f3              3   27[COMRAM] float 
  4003 ;;  sign            1   31[COMRAM] unsigned char 
  4004 ;;  exp             1   30[COMRAM] unsigned char 
  4005 ;;  cntr            1   26[COMRAM] unsigned char 
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  3   17[COMRAM] float 
  4008 ;; Registers used:
  4009 ;;		wreg, status,2, status,0, cstack
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4015 ;;      Params:         6       0       0       0       0       0       0       0       0
  4016 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4017 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4018 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4019 ;;Total ram usage:       15 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    1
  4022 ;; This function calls:
  4023 ;;		___ftpack
  4024 ;; This function is called by:
  4025 ;;		_setPeriodTo
  4026 ;;		_SetDutyCycleTo
  4027 ;;		_doorSetDutyCycleTo
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text22
  4032  0075F0                     __ptext22:
  4033                           	opt stack 0
  4034  0075F0                     ___ftdiv:
  4035                           	opt stack 26
  4036                           
  4037                           ;incstack = 0
  4038  0075F0  C014  F018         	movff	___ftdiv@f1+2,??___ftdiv
  4039  0075F4  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  4040  0075F6  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  4041  0075F8  3413               	rlcf	___ftdiv@f1+1,w,c
  4042  0075FA  3618               	rlcf	??___ftdiv& (0+255),f,c
  4043  0075FC  E301               	bnc	u1481
  4044  0075FE  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  4045  007600                     u1481:
  4046  007600  5018               	movf	??___ftdiv,w,c
  4047  007602  6E1F               	movwf	___ftdiv@exp,c
  4048  007604  501F               	movf	___ftdiv@exp,w,c
  4049  007606  A4D8               	btfss	status,2,c
  4050  007608  D007               	goto	l2016
  4051  00760A  0E00               	movlw	0
  4052  00760C  6E12               	movwf	?___ftdiv,c
  4053  00760E  0E00               	movlw	0
  4054  007610  6E13               	movwf	?___ftdiv+1,c
  4055  007612  0E00               	movlw	0
  4056  007614  6E14               	movwf	?___ftdiv+2,c
  4057  007616  0012               	return	
  4058  007618                     l2016:
  4059  007618  C017  F018         	movff	___ftdiv@f2+2,??___ftdiv
  4060  00761C  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  4061  00761E  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  4062  007620  3416               	rlcf	___ftdiv@f2+1,w,c
  4063  007622  3618               	rlcf	??___ftdiv& (0+255),f,c
  4064  007624  E301               	bnc	u1501
  4065  007626  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  4066  007628                     u1501:
  4067  007628  5018               	movf	??___ftdiv,w,c
  4068  00762A  6E20               	movwf	___ftdiv@sign,c
  4069  00762C  5020               	movf	___ftdiv@sign,w,c
  4070  00762E  A4D8               	btfss	status,2,c
  4071  007630  D007               	goto	l2022
  4072  007632  0E00               	movlw	0
  4073  007634  6E12               	movwf	?___ftdiv,c
  4074  007636  0E00               	movlw	0
  4075  007638  6E13               	movwf	?___ftdiv+1,c
  4076  00763A  0E00               	movlw	0
  4077  00763C  6E14               	movwf	?___ftdiv+2,c
  4078  00763E  0012               	return	
  4079  007640                     l2022:
  4080  007640  0E00               	movlw	0
  4081  007642  6E1C               	movwf	___ftdiv@f3,c
  4082  007644  0E00               	movlw	0
  4083  007646  6E1D               	movwf	___ftdiv@f3+1,c
  4084  007648  0E00               	movlw	0
  4085  00764A  6E1E               	movwf	___ftdiv@f3+2,c
  4086  00764C  5020               	movf	___ftdiv@sign,w,c
  4087  00764E  0F89               	addlw	137
  4088  007650  5E1F               	subwf	___ftdiv@exp,f,c
  4089  007652  C014  F020         	movff	___ftdiv@f1+2,___ftdiv@sign
  4090  007656  5017               	movf	___ftdiv@f2+2,w,c
  4091  007658  1A20               	xorwf	___ftdiv@sign,f,c
  4092  00765A  0E80               	movlw	128
  4093  00765C  1620               	andwf	___ftdiv@sign,f,c
  4094  00765E  8E13               	bsf	___ftdiv@f1+1,7,c
  4095  007660  0EFF               	movlw	255
  4096  007662  1612               	andwf	___ftdiv@f1,f,c
  4097  007664  0EFF               	movlw	255
  4098  007666  1613               	andwf	___ftdiv@f1+1,f,c
  4099  007668  0E00               	movlw	0
  4100  00766A  1614               	andwf	___ftdiv@f1+2,f,c
  4101  00766C  8E16               	bsf	___ftdiv@f2+1,7,c
  4102  00766E  0EFF               	movlw	255
  4103  007670  1615               	andwf	___ftdiv@f2,f,c
  4104  007672  0EFF               	movlw	255
  4105  007674  1616               	andwf	___ftdiv@f2+1,f,c
  4106  007676  0E00               	movlw	0
  4107  007678  1617               	andwf	___ftdiv@f2+2,f,c
  4108  00767A  0E18               	movlw	24
  4109  00767C  6E1B               	movwf	___ftdiv@cntr,c
  4110  00767E                     l2042:
  4111  00767E  90D8               	bcf	status,0,c
  4112  007680  361C               	rlcf	___ftdiv@f3,f,c
  4113  007682  361D               	rlcf	___ftdiv@f3+1,f,c
  4114  007684  361E               	rlcf	___ftdiv@f3+2,f,c
  4115  007686  5015               	movf	___ftdiv@f2,w,c
  4116  007688  5C12               	subwf	___ftdiv@f1,w,c
  4117  00768A  5016               	movf	___ftdiv@f2+1,w,c
  4118  00768C  5813               	subwfb	___ftdiv@f1+1,w,c
  4119  00768E  5017               	movf	___ftdiv@f2+2,w,c
  4120  007690  5814               	subwfb	___ftdiv@f1+2,w,c
  4121  007692  A0D8               	btfss	status,0,c
  4122  007694  D007               	goto	l623
  4123  007696  5015               	movf	___ftdiv@f2,w,c
  4124  007698  5E12               	subwf	___ftdiv@f1,f,c
  4125  00769A  5016               	movf	___ftdiv@f2+1,w,c
  4126  00769C  5A13               	subwfb	___ftdiv@f1+1,f,c
  4127  00769E  5017               	movf	___ftdiv@f2+2,w,c
  4128  0076A0  5A14               	subwfb	___ftdiv@f1+2,f,c
  4129  0076A2  801C               	bsf	___ftdiv@f3,0,c
  4130  0076A4                     l623:
  4131  0076A4  90D8               	bcf	status,0,c
  4132  0076A6  3612               	rlcf	___ftdiv@f1,f,c
  4133  0076A8  3613               	rlcf	___ftdiv@f1+1,f,c
  4134  0076AA  3614               	rlcf	___ftdiv@f1+2,f,c
  4135  0076AC  2E1B               	decfsz	___ftdiv@cntr,f,c
  4136  0076AE  D7E7               	goto	l2042
  4137  0076B0  C01C  F001         	movff	___ftdiv@f3,___ftpack@arg
  4138  0076B4  C01D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4139  0076B8  C01E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4140  0076BC  C01F  F004         	movff	___ftdiv@exp,___ftpack@exp
  4141  0076C0  C020  F005         	movff	___ftdiv@sign,___ftpack@sign
  4142  0076C4  ECD7  F039         	call	___ftpack	;wreg free
  4143  0076C8  C001  F012         	movff	?___ftpack,?___ftdiv
  4144  0076CC  C002  F013         	movff	?___ftpack+1,?___ftdiv+1
  4145  0076D0  C003  F014         	movff	?___ftpack+2,?___ftdiv+2
  4146  0076D4  0012               	return	
  4147  0076D6                     __end_of___ftdiv:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           postinc0	equ	0xFEE
  4154                           wreg	equ	0xFE8
  4155                           postdec1	equ	0xFE5
  4156                           plusw1	equ	0xFE3
  4157                           fsr1l	equ	0xFE1
  4158                           indf2	equ	0xFDF
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           plusw2	equ	0xFDB
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function ___ftadd *****************
  4167 ;; Defined at:
  4168 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  f1              3   32[COMRAM] float 
  4171 ;;  f2              3   35[COMRAM] float 
  4172 ;; Auto vars:     Size  Location     Type
  4173 ;;  exp1            1   43[COMRAM] unsigned char 
  4174 ;;  exp2            1   42[COMRAM] unsigned char 
  4175 ;;  sign            1   41[COMRAM] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  3   32[COMRAM] float 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4185 ;;      Params:         6       0       0       0       0       0       0       0       0
  4186 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4187 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4188 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4189 ;;Total ram usage:       12 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    1
  4192 ;; This function calls:
  4193 ;;		___ftpack
  4194 ;; This function is called by:
  4195 ;;		_setPeriodTo
  4196 ;;		_SetDutyCycleTo
  4197 ;;		_doorSetDutyCycleTo
  4198 ;;		_round
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text23
  4203  0078BE                     __ptext23:
  4204                           	opt stack 0
  4205  0078BE                     ___ftadd:
  4206                           	opt stack 25
  4207                           
  4208                           ;incstack = 0
  4209  0078BE  C023  F027         	movff	___ftadd@f1+2,??___ftadd
  4210  0078C2  6A28               	clrf	(??___ftadd+1)& (0+255),c
  4211  0078C4  6A29               	clrf	(??___ftadd+2)& (0+255),c
  4212  0078C6  3422               	rlcf	___ftadd@f1+1,w,c
  4213  0078C8  3627               	rlcf	??___ftadd& (0+255),f,c
  4214  0078CA  E301               	bnc	u1241
  4215  0078CC  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  4216  0078CE                     u1241:
  4217  0078CE  5027               	movf	??___ftadd,w,c
  4218  0078D0  6E2C               	movwf	___ftadd@exp1,c
  4219  0078D2  C026  F027         	movff	___ftadd@f2+2,??___ftadd
  4220  0078D6  6A28               	clrf	(??___ftadd+1)& (0+255),c
  4221  0078D8  6A29               	clrf	(??___ftadd+2)& (0+255),c
  4222  0078DA  3425               	rlcf	___ftadd@f2+1,w,c
  4223  0078DC  3627               	rlcf	??___ftadd& (0+255),f,c
  4224  0078DE  E301               	bnc	u1251
  4225  0078E0  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  4226  0078E2                     u1251:
  4227  0078E2  5027               	movf	??___ftadd,w,c
  4228  0078E4  6E2B               	movwf	___ftadd@exp2,c
  4229  0078E6  502C               	movf	___ftadd@exp1,w,c
  4230  0078E8  B4D8               	btfsc	status,2,c
  4231  0078EA  D00B               	goto	l588
  4232  0078EC  502B               	movf	___ftadd@exp2,w,c
  4233  0078EE  5C2C               	subwf	___ftadd@exp1,w,c
  4234  0078F0  B0D8               	btfsc	status,0,c
  4235  0078F2  D00E               	goto	l1912
  4236  0078F4  502C               	movf	___ftadd@exp1,w,c
  4237  0078F6  0800               	sublw	0
  4238  0078F8  242B               	addwf	___ftadd@exp2,w,c
  4239  0078FA  6E27               	movwf	??___ftadd& (0+255),c
  4240  0078FC  0E18               	movlw	24
  4241  0078FE  6427               	cpfsgt	??___ftadd,c
  4242  007900  D007               	goto	l1912
  4243  007902                     l588:
  4244  007902  C024  F021         	movff	___ftadd@f2,?___ftadd
  4245  007906  C025  F022         	movff	___ftadd@f2+1,?___ftadd+1
  4246  00790A  C026  F023         	movff	___ftadd@f2+2,?___ftadd+2
  4247  00790E  0012               	return	
  4248  007910                     l1912:
  4249  007910  502B               	movf	___ftadd@exp2,w,c
  4250  007912  B4D8               	btfsc	status,2,c
  4251  007914  D00B               	goto	l592
  4252  007916  502C               	movf	___ftadd@exp1,w,c
  4253  007918  5C2B               	subwf	___ftadd@exp2,w,c
  4254  00791A  B0D8               	btfsc	status,0,c
  4255  00791C  D00E               	goto	l1918
  4256  00791E  502B               	movf	___ftadd@exp2,w,c
  4257  007920  0800               	sublw	0
  4258  007922  242C               	addwf	___ftadd@exp1,w,c
  4259  007924  6E27               	movwf	??___ftadd& (0+255),c
  4260  007926  0E18               	movlw	24
  4261  007928  6427               	cpfsgt	??___ftadd,c
  4262  00792A  D007               	goto	l1918
  4263  00792C                     l592:
  4264  00792C  C021  F021         	movff	___ftadd@f1,?___ftadd
  4265  007930  C022  F022         	movff	___ftadd@f1+1,?___ftadd+1
  4266  007934  C023  F023         	movff	___ftadd@f1+2,?___ftadd+2
  4267  007938  0012               	return	
  4268  00793A                     l1918:
  4269  00793A  0E06               	movlw	6
  4270  00793C  6E2A               	movwf	___ftadd@sign,c
  4271  00793E  BE23               	btfsc	___ftadd@f1+2,7,c
  4272  007940  8E2A               	bsf	___ftadd@sign,7,c
  4273  007942  BE26               	btfsc	___ftadd@f2+2,7,c
  4274  007944  8C2A               	bsf	___ftadd@sign,6,c
  4275  007946  8E22               	bsf	___ftadd@f1+1,7,c
  4276  007948  0EFF               	movlw	255
  4277  00794A  1621               	andwf	___ftadd@f1,f,c
  4278  00794C  0EFF               	movlw	255
  4279  00794E  1622               	andwf	___ftadd@f1+1,f,c
  4280  007950  0E00               	movlw	0
  4281  007952  1623               	andwf	___ftadd@f1+2,f,c
  4282  007954  8E25               	bsf	___ftadd@f2+1,7,c
  4283  007956  0EFF               	movlw	255
  4284  007958  1624               	andwf	___ftadd@f2,f,c
  4285  00795A  0EFF               	movlw	255
  4286  00795C  1625               	andwf	___ftadd@f2+1,f,c
  4287  00795E  0E00               	movlw	0
  4288  007960  1626               	andwf	___ftadd@f2+2,f,c
  4289  007962  502B               	movf	___ftadd@exp2,w,c
  4290  007964  5C2C               	subwf	___ftadd@exp1,w,c
  4291  007966  B0D8               	btfsc	status,0,c
  4292  007968  D01B               	goto	l1944
  4293  00796A                     l1934:
  4294  00796A  90D8               	bcf	status,0,c
  4295  00796C  3624               	rlcf	___ftadd@f2,f,c
  4296  00796E  3625               	rlcf	___ftadd@f2+1,f,c
  4297  007970  3626               	rlcf	___ftadd@f2+2,f,c
  4298  007972  062B               	decf	___ftadd@exp2,f,c
  4299  007974  502C               	movf	___ftadd@exp1,w,c
  4300  007976  182B               	xorwf	___ftadd@exp2,w,c
  4301  007978  B4D8               	btfsc	status,2,c
  4302  00797A  D00D               	goto	l1942
  4303  00797C  062A               	decf	___ftadd@sign,f,c
  4304  00797E  C02A  F027         	movff	___ftadd@sign,??___ftadd
  4305  007982  0E07               	movlw	7
  4306  007984  1627               	andwf	??___ftadd,f,c
  4307  007986  B4D8               	btfsc	status,2,c
  4308  007988  D006               	goto	l1942
  4309  00798A  D7EF               	goto	l1934
  4310  00798C                     l1940:
  4311  00798C  90D8               	bcf	status,0,c
  4312  00798E  3223               	rrcf	___ftadd@f1+2,f,c
  4313  007990  3222               	rrcf	___ftadd@f1+1,f,c
  4314  007992  3221               	rrcf	___ftadd@f1,f,c
  4315  007994  2A2C               	incf	___ftadd@exp1,f,c
  4316  007996                     l1942:
  4317  007996  502B               	movf	___ftadd@exp2,w,c
  4318  007998  182C               	xorwf	___ftadd@exp1,w,c
  4319  00799A  B4D8               	btfsc	status,2,c
  4320  00799C  D01F               	goto	l603
  4321  00799E  D7F6               	goto	l1940
  4322  0079A0                     l1944:
  4323  0079A0  502C               	movf	___ftadd@exp1,w,c
  4324  0079A2  5C2B               	subwf	___ftadd@exp2,w,c
  4325  0079A4  B0D8               	btfsc	status,0,c
  4326  0079A6  D01A               	goto	l603
  4327  0079A8                     l1946:
  4328  0079A8  90D8               	bcf	status,0,c
  4329  0079AA  3621               	rlcf	___ftadd@f1,f,c
  4330  0079AC  3622               	rlcf	___ftadd@f1+1,f,c
  4331  0079AE  3623               	rlcf	___ftadd@f1+2,f,c
  4332  0079B0  062C               	decf	___ftadd@exp1,f,c
  4333  0079B2  502C               	movf	___ftadd@exp1,w,c
  4334  0079B4  182B               	xorwf	___ftadd@exp2,w,c
  4335  0079B6  B4D8               	btfsc	status,2,c
  4336  0079B8  D00D               	goto	l1954
  4337  0079BA  062A               	decf	___ftadd@sign,f,c
  4338  0079BC  C02A  F027         	movff	___ftadd@sign,??___ftadd
  4339  0079C0  0E07               	movlw	7
  4340  0079C2  1627               	andwf	??___ftadd,f,c
  4341  0079C4  B4D8               	btfsc	status,2,c
  4342  0079C6  D006               	goto	l1954
  4343  0079C8  D7EF               	goto	l1946
  4344  0079CA                     l1952:
  4345  0079CA  90D8               	bcf	status,0,c
  4346  0079CC  3226               	rrcf	___ftadd@f2+2,f,c
  4347  0079CE  3225               	rrcf	___ftadd@f2+1,f,c
  4348  0079D0  3224               	rrcf	___ftadd@f2,f,c
  4349  0079D2  2A2B               	incf	___ftadd@exp2,f,c
  4350  0079D4                     l1954:
  4351  0079D4  502B               	movf	___ftadd@exp2,w,c
  4352  0079D6  182C               	xorwf	___ftadd@exp1,w,c
  4353  0079D8  A4D8               	btfss	status,2,c
  4354  0079DA  D7F7               	goto	l1952
  4355  0079DC                     l603:
  4356  0079DC  AE2A               	btfss	___ftadd@sign,7,c
  4357  0079DE  D00C               	goto	l612
  4358  0079E0  0EFF               	movlw	255
  4359  0079E2  1A21               	xorwf	___ftadd@f1,f,c
  4360  0079E4  0EFF               	movlw	255
  4361  0079E6  1A22               	xorwf	___ftadd@f1+1,f,c
  4362  0079E8  0EFF               	movlw	255
  4363  0079EA  1A23               	xorwf	___ftadd@f1+2,f,c
  4364  0079EC  0E01               	movlw	1
  4365  0079EE  2621               	addwf	___ftadd@f1,f,c
  4366  0079F0  0E00               	movlw	0
  4367  0079F2  2222               	addwfc	___ftadd@f1+1,f,c
  4368  0079F4  0E00               	movlw	0
  4369  0079F6  2223               	addwfc	___ftadd@f1+2,f,c
  4370  0079F8                     l612:
  4371  0079F8  AC2A               	btfss	___ftadd@sign,6,c
  4372  0079FA  D00C               	goto	l1960
  4373  0079FC  0EFF               	movlw	255
  4374  0079FE  1A24               	xorwf	___ftadd@f2,f,c
  4375  007A00  0EFF               	movlw	255
  4376  007A02  1A25               	xorwf	___ftadd@f2+1,f,c
  4377  007A04  0EFF               	movlw	255
  4378  007A06  1A26               	xorwf	___ftadd@f2+2,f,c
  4379  007A08  0E01               	movlw	1
  4380  007A0A  2624               	addwf	___ftadd@f2,f,c
  4381  007A0C  0E00               	movlw	0
  4382  007A0E  2225               	addwfc	___ftadd@f2+1,f,c
  4383  007A10  0E00               	movlw	0
  4384  007A12  2226               	addwfc	___ftadd@f2+2,f,c
  4385  007A14                     l1960:
  4386  007A14  0E00               	movlw	0
  4387  007A16  6E2A               	movwf	___ftadd@sign,c
  4388  007A18  5021               	movf	___ftadd@f1,w,c
  4389  007A1A  2624               	addwf	___ftadd@f2,f,c
  4390  007A1C  5022               	movf	___ftadd@f1+1,w,c
  4391  007A1E  2225               	addwfc	___ftadd@f2+1,f,c
  4392  007A20  5023               	movf	___ftadd@f1+2,w,c
  4393  007A22  2226               	addwfc	___ftadd@f2+2,f,c
  4394  007A24  AE26               	btfss	___ftadd@f2+2,7,c
  4395  007A26  D00E               	goto	l1970
  4396  007A28  0EFF               	movlw	255
  4397  007A2A  1A24               	xorwf	___ftadd@f2,f,c
  4398  007A2C  0EFF               	movlw	255
  4399  007A2E  1A25               	xorwf	___ftadd@f2+1,f,c
  4400  007A30  0EFF               	movlw	255
  4401  007A32  1A26               	xorwf	___ftadd@f2+2,f,c
  4402  007A34  0E01               	movlw	1
  4403  007A36  2624               	addwf	___ftadd@f2,f,c
  4404  007A38  0E00               	movlw	0
  4405  007A3A  2225               	addwfc	___ftadd@f2+1,f,c
  4406  007A3C  0E00               	movlw	0
  4407  007A3E  2226               	addwfc	___ftadd@f2+2,f,c
  4408  007A40  0E01               	movlw	1
  4409  007A42  6E2A               	movwf	___ftadd@sign,c
  4410  007A44                     l1970:
  4411  007A44  C024  F001         	movff	___ftadd@f2,___ftpack@arg
  4412  007A48  C025  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4413  007A4C  C026  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4414  007A50  C02C  F004         	movff	___ftadd@exp1,___ftpack@exp
  4415  007A54  C02A  F005         	movff	___ftadd@sign,___ftpack@sign
  4416  007A58  ECD7  F039         	call	___ftpack	;wreg free
  4417  007A5C  C001  F021         	movff	?___ftpack,?___ftadd
  4418  007A60  C002  F022         	movff	?___ftpack+1,?___ftadd+1
  4419  007A64  C003  F023         	movff	?___ftpack+2,?___ftadd+2
  4420  007A68  0012               	return	
  4421  007A6A                     __end_of___ftadd:
  4422                           	opt stack 0
  4423                           tblptru	equ	0xFF8
  4424                           tblptrh	equ	0xFF7
  4425                           tblptrl	equ	0xFF6
  4426                           tablat	equ	0xFF5
  4427                           postinc0	equ	0xFEE
  4428                           wreg	equ	0xFE8
  4429                           postdec1	equ	0xFE5
  4430                           plusw1	equ	0xFE3
  4431                           fsr1l	equ	0xFE1
  4432                           indf2	equ	0xFDF
  4433                           postinc2	equ	0xFDE
  4434                           postdec2	equ	0xFDD
  4435                           plusw2	equ	0xFDB
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function ___awtoft *****************
  4441 ;; Defined at:
  4442 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  c               2    8[COMRAM] int 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;  sign            1   11[COMRAM] unsigned char 
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  3    8[COMRAM] float 
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0, cstack
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4456 ;;      Params:         3       0       0       0       0       0       0       0       0
  4457 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4459 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    1
  4463 ;; This function calls:
  4464 ;;		___ftpack
  4465 ;; This function is called by:
  4466 ;;		_setPeriodTo
  4467 ;;		_SetDutyCycleTo
  4468 ;;		_doorSetDutyCycleTo
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text24
  4473  006CC0                     __ptext24:
  4474                           	opt stack 0
  4475  006CC0                     ___awtoft:
  4476                           	opt stack 26
  4477                           
  4478                           ;incstack = 0
  4479  006CC0  0E00               	movlw	0
  4480  006CC2  6E0C               	movwf	___awtoft@sign,c
  4481  006CC4  AE0A               	btfss	___awtoft@c+1,7,c
  4482  006CC6  D006               	goto	l2112
  4483  006CC8  6C09               	negf	___awtoft@c,c
  4484  006CCA  1E0A               	comf	___awtoft@c+1,f,c
  4485  006CCC  B0D8               	btfsc	status,0,c
  4486  006CCE  2A0A               	incf	___awtoft@c+1,f,c
  4487  006CD0  0E01               	movlw	1
  4488  006CD2  6E0C               	movwf	___awtoft@sign,c
  4489  006CD4                     l2112:
  4490  006CD4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4491  006CD8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4492  006CDC  6A03               	clrf	___ftpack@arg+2,c
  4493  006CDE  0E8E               	movlw	142
  4494  006CE0  6E04               	movwf	___ftpack@exp,c
  4495  006CE2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4496  006CE6  ECD7  F039         	call	___ftpack	;wreg free
  4497  006CEA  C001  F009         	movff	?___ftpack,?___awtoft
  4498  006CEE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4499  006CF2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4500  006CF6  0012               	return	
  4501  006CF8                     __end_of___awtoft:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           postdec1	equ	0xFE5
  4510                           plusw1	equ	0xFE3
  4511                           fsr1l	equ	0xFE1
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           plusw2	equ	0xFDB
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function ___ftpack *****************
  4521 ;; Defined at:
  4522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  arg             3    0[COMRAM] unsigned um
  4525 ;;  exp             1    3[COMRAM] unsigned char 
  4526 ;;  sign            1    4[COMRAM] unsigned char 
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  3    0[COMRAM] float 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4538 ;;      Params:         5       0       0       0       0       0       0       0       0
  4539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4540 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4541 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4542 ;;Total ram usage:        8 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		___altoft
  4548 ;;		___awtoft
  4549 ;;		___ftadd
  4550 ;;		___ftdiv
  4551 ;;		___ftmul
  4552 ;;		___lltoft
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text25
  4557  0073AE                     __ptext25:
  4558                           	opt stack 0
  4559  0073AE                     ___ftpack:
  4560                           	opt stack 24
  4561                           
  4562                           ;incstack = 0
  4563  0073AE  5004               	movf	___ftpack@exp,w,c
  4564  0073B0  B4D8               	btfsc	status,2,c
  4565  0073B2  D005               	goto	l1794
  4566  0073B4  5001               	movf	___ftpack@arg,w,c
  4567  0073B6  1002               	iorwf	___ftpack@arg+1,w,c
  4568  0073B8  1003               	iorwf	___ftpack@arg+2,w,c
  4569  0073BA  A4D8               	btfss	status,2,c
  4570  0073BC  D00C               	goto	l1800
  4571  0073BE                     l1794:
  4572  0073BE  0E00               	movlw	0
  4573  0073C0  6E01               	movwf	?___ftpack,c
  4574  0073C2  0E00               	movlw	0
  4575  0073C4  6E02               	movwf	?___ftpack+1,c
  4576  0073C6  0E00               	movlw	0
  4577  0073C8  6E03               	movwf	?___ftpack+2,c
  4578  0073CA  0012               	return	
  4579  0073CC                     l1798:
  4580  0073CC  2A04               	incf	___ftpack@exp,f,c
  4581  0073CE  90D8               	bcf	status,0,c
  4582  0073D0  3203               	rrcf	___ftpack@arg+2,f,c
  4583  0073D2  3202               	rrcf	___ftpack@arg+1,f,c
  4584  0073D4  3201               	rrcf	___ftpack@arg,f,c
  4585  0073D6                     l1800:
  4586  0073D6  0E00               	movlw	0
  4587  0073D8  1401               	andwf	___ftpack@arg,w,c
  4588  0073DA  6E06               	movwf	??___ftpack& (0+255),c
  4589  0073DC  0E00               	movlw	0
  4590  0073DE  1402               	andwf	___ftpack@arg+1,w,c
  4591  0073E0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4592  0073E2  0EFE               	movlw	254
  4593  0073E4  1403               	andwf	___ftpack@arg+2,w,c
  4594  0073E6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4595  0073E8  5006               	movf	??___ftpack,w,c
  4596  0073EA  1007               	iorwf	??___ftpack+1,w,c
  4597  0073EC  1008               	iorwf	??___ftpack+2,w,c
  4598  0073EE  B4D8               	btfsc	status,2,c
  4599  0073F0  D00C               	goto	l1806
  4600  0073F2  D7EC               	goto	l1798
  4601  0073F4                     l1802:
  4602  0073F4  2A04               	incf	___ftpack@exp,f,c
  4603  0073F6  0E01               	movlw	1
  4604  0073F8  2601               	addwf	___ftpack@arg,f,c
  4605  0073FA  0E00               	movlw	0
  4606  0073FC  2202               	addwfc	___ftpack@arg+1,f,c
  4607  0073FE  0E00               	movlw	0
  4608  007400  2203               	addwfc	___ftpack@arg+2,f,c
  4609  007402  90D8               	bcf	status,0,c
  4610  007404  3203               	rrcf	___ftpack@arg+2,f,c
  4611  007406  3202               	rrcf	___ftpack@arg+1,f,c
  4612  007408  3201               	rrcf	___ftpack@arg,f,c
  4613  00740A                     l1806:
  4614  00740A  0E00               	movlw	0
  4615  00740C  1401               	andwf	___ftpack@arg,w,c
  4616  00740E  6E06               	movwf	??___ftpack& (0+255),c
  4617  007410  0E00               	movlw	0
  4618  007412  1402               	andwf	___ftpack@arg+1,w,c
  4619  007414  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4620  007416  0EFF               	movlw	255
  4621  007418  1403               	andwf	___ftpack@arg+2,w,c
  4622  00741A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4623  00741C  5006               	movf	??___ftpack,w,c
  4624  00741E  1007               	iorwf	??___ftpack+1,w,c
  4625  007420  1008               	iorwf	??___ftpack+2,w,c
  4626  007422  B4D8               	btfsc	status,2,c
  4627  007424  D006               	goto	l1810
  4628  007426  D7E6               	goto	l1802
  4629  007428                     l1808:
  4630  007428  0604               	decf	___ftpack@exp,f,c
  4631  00742A  90D8               	bcf	status,0,c
  4632  00742C  3601               	rlcf	___ftpack@arg,f,c
  4633  00742E  3602               	rlcf	___ftpack@arg+1,f,c
  4634  007430  3603               	rlcf	___ftpack@arg+2,f,c
  4635  007432                     l1810:
  4636  007432  BE02               	btfsc	___ftpack@arg+1,7,c
  4637  007434  D003               	goto	l565
  4638  007436  0E02               	movlw	2
  4639  007438  6004               	cpfslt	___ftpack@exp,c
  4640  00743A  D7F6               	goto	l1808
  4641  00743C                     l565:
  4642  00743C  A004               	btfss	___ftpack@exp,0,c
  4643  00743E  9E02               	bcf	___ftpack@arg+1,7,c
  4644  007440  90D8               	bcf	status,0,c
  4645  007442  3204               	rrcf	___ftpack@exp,f,c
  4646  007444  5004               	movf	___ftpack@exp,w,c
  4647  007446  1203               	iorwf	___ftpack@arg+2,f,c
  4648  007448  5005               	movf	___ftpack@sign,w,c
  4649  00744A  A4D8               	btfss	status,2,c
  4650  00744C  8E03               	bsf	___ftpack@arg+2,7,c
  4651  00744E  C001  F001         	movff	___ftpack@arg,?___ftpack
  4652  007452  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4653  007456  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4654  00745A  0012               	return	
  4655  00745C                     __end_of___ftpack:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           postinc0	equ	0xFEE
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           plusw1	equ	0xFE3
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _delay *****************
  4675 ;; Defined at:
  4676 ;;		line 81 in file "MotorFunction.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  val             2    0[COMRAM] unsigned int 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  j               2    4[COMRAM] unsigned int 
  4681 ;;  i               2    2[COMRAM] unsigned int 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;		None               void
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4691 ;;      Params:         2       0       0       0       0       0       0       0       0
  4692 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4693 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4694 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4695 ;;Total ram usage:        6 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; This function calls:
  4698 ;;		Nothing
  4699 ;; This function is called by:
  4700 ;;		_motorlock_unlock
  4701 ;;		_motorlock_lock
  4702 ;;		_motordoor_open
  4703 ;;		_motordoor_close
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text26
  4708  006C8A                     __ptext26:
  4709                           	opt stack 0
  4710  006C8A                     _delay:
  4711                           	opt stack 28
  4712                           
  4713                           ;MotorFunction.c: 83: unsigned int i,j;
  4714                           ;MotorFunction.c: 84: for(i=0;i<val;i++)
  4715                           
  4716                           ;incstack = 0
  4717  006C8A  0E00               	movlw	0
  4718  006C8C  6E04               	movwf	delay@i+1,c
  4719  006C8E  0E00               	movlw	0
  4720  006C90  6E03               	movwf	delay@i,c
  4721  006C92  D00F               	goto	l2244
  4722  006C94                     l2232:
  4723                           
  4724                           ;MotorFunction.c: 85: for(j=0;j<10;j++);
  4725  006C94  0E00               	movlw	0
  4726  006C96  6E06               	movwf	delay@j+1,c
  4727  006C98  0E00               	movlw	0
  4728  006C9A  6E05               	movwf	delay@j,c
  4729  006C9C                     l2234:
  4730  006C9C  5006               	movf	delay@j+1,w,c
  4731  006C9E  E107               	bnz	l2242
  4732  006CA0  0E0A               	movlw	10
  4733  006CA2  5C05               	subwf	delay@j,w,c
  4734  006CA4  B0D8               	btfsc	status,0,c
  4735  006CA6  D003               	goto	l2242
  4736  006CA8  4A05               	infsnz	delay@j,f,c
  4737  006CAA  2A06               	incf	delay@j+1,f,c
  4738  006CAC  D7F7               	goto	l2234
  4739  006CAE                     l2242:
  4740  006CAE  4A03               	infsnz	delay@i,f,c
  4741  006CB0  2A04               	incf	delay@i+1,f,c
  4742  006CB2                     l2244:
  4743  006CB2  5001               	movf	delay@val,w,c
  4744  006CB4  5C03               	subwf	delay@i,w,c
  4745  006CB6  5002               	movf	delay@val+1,w,c
  4746  006CB8  5804               	subwfb	delay@i+1,w,c
  4747  006CBA  B0D8               	btfsc	status,0,c
  4748  006CBC  0012               	return	
  4749  006CBE  D7EA               	goto	l2232
  4750  006CC0                     __end_of_delay:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           postinc0	equ	0xFEE
  4757                           wreg	equ	0xFE8
  4758                           postdec1	equ	0xFE5
  4759                           plusw1	equ	0xFE3
  4760                           fsr1l	equ	0xFE1
  4761                           indf2	equ	0xFDF
  4762                           postinc2	equ	0xFDE
  4763                           postdec2	equ	0xFDD
  4764                           plusw2	equ	0xFDB
  4765                           fsr2h	equ	0xFDA
  4766                           fsr2l	equ	0xFD9
  4767                           status	equ	0xFD8
  4768                           
  4769 ;; *************** function _PWMdoor_Init *****************
  4770 ;; Defined at:
  4771 ;;		line 26 in file "MotorFunction.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;		None
  4776 ;; Return value:  Size  Location     Type
  4777 ;;		None               void
  4778 ;; Registers used:
  4779 ;;		wreg, status,2
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4785 ;;      Params:         0       0       0       0       0       0       0       0       0
  4786 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4788 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4789 ;;Total ram usage:        0 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_motordoor_open
  4795 ;;		_motordoor_close
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           	psect	text27
  4800  006B4E                     __ptext27:
  4801                           	opt stack 0
  4802  006B4E                     _PWMdoor_Init:
  4803                           	opt stack 28
  4804                           
  4805                           ;MotorFunction.c: 27: TRISCbits.TRISC1 = 0;
  4806                           
  4807                           ;incstack = 0
  4808  006B4E  9294               	bcf	3988,1,c	;volatile
  4809                           
  4810                           ;MotorFunction.c: 28: CCP1CON = 0x0C;
  4811  006B50  0E0C               	movlw	12
  4812  006B52  6EBD               	movwf	4029,c	;volatile
  4813  006B54  0012               	return		;funcret
  4814  006B56                     __end_of_PWMdoor_Init:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           plusw1	equ	0xFE3
  4824                           fsr1l	equ	0xFE1
  4825                           indf2	equ	0xFDF
  4826                           postinc2	equ	0xFDE
  4827                           postdec2	equ	0xFDD
  4828                           plusw2	equ	0xFDB
  4829                           fsr2h	equ	0xFDA
  4830                           fsr2l	equ	0xFD9
  4831                           status	equ	0xFD8
  4832                           
  4833 ;; *************** function _lcd_write_data *****************
  4834 ;; Defined at:
  4835 ;;		line 54 in file "lcd_utilities.c"
  4836 ;; Parameters:    Size  Location     Type
  4837 ;;  data            1    wreg     unsigned char 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;  data            1    2[COMRAM] unsigned char 
  4840 ;;  temp1           1    3[COMRAM] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;		None               void
  4843 ;; Registers used:
  4844 ;;		wreg, status,2, status,0, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4850 ;;      Params:         0       0       0       0       0       0       0       0       0
  4851 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4852 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4853 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4854 ;;Total ram usage:        3 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    1
  4857 ;; This function calls:
  4858 ;;		_lcd_strobe
  4859 ;; This function is called by:
  4860 ;;		_LockMotor
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text28
  4865  00727C                     __ptext28:
  4866                           	opt stack 0
  4867  00727C                     _lcd_write_data:
  4868                           	opt stack 28
  4869                           
  4870                           ;incstack = 0
  4871                           ;lcd_write_data@data stored from wreg
  4872  00727C  6E03               	movwf	lcd_write_data@data,c
  4873                           
  4874                           ;lcd_utilities.c: 56: char temp1;
  4875                           ;lcd_utilities.c: 58: PORTDbits.RD6 = 1;
  4876  00727E  8C83               	bsf	3971,6,c	;volatile
  4877                           
  4878                           ;lcd_utilities.c: 59: _delay((unsigned long)((4)*(48000000/4000.0)));
  4879  007280  0E3F               	movlw	63
  4880  007282  6E02               	movwf	??_lcd_write_data& (0+255),c
  4881  007284  0E55               	movlw	85
  4882  007286                     u2107:
  4883  007286  2EE8               	decfsz	wreg,f,c
  4884  007288  D7FE               	goto	u2107
  4885  00728A  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4886  00728C  D7FC               	goto	u2107
  4887  00728E  F000               	nop	
  4888                           
  4889                           ;lcd_utilities.c: 61: temp1 = data;
  4890  007290  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4891                           
  4892                           ;lcd_utilities.c: 62: temp1 = temp1 >> 4;
  4893  007294  3804               	swapf	lcd_write_data@temp1,w,c
  4894  007296  0B0F               	andlw	15
  4895  007298  6E04               	movwf	lcd_write_data@temp1,c
  4896                           
  4897                           ;lcd_utilities.c: 63: PORTD = temp1 & 0x0F;
  4898  00729A  5004               	movf	lcd_write_data@temp1,w,c
  4899  00729C  0B0F               	andlw	15
  4900  00729E  6E83               	movwf	3971,c	;volatile
  4901                           
  4902                           ;lcd_utilities.c: 64: _delay((unsigned long)((8)*(48000000/4000.0)));
  4903  0072A0  0E7D               	movlw	125
  4904  0072A2  6E02               	movwf	??_lcd_write_data& (0+255),c
  4905  0072A4  0EAC               	movlw	172
  4906  0072A6                     u2117:
  4907  0072A6  2EE8               	decfsz	wreg,f,c
  4908  0072A8  D7FE               	goto	u2117
  4909  0072AA  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4910  0072AC  D7FC               	goto	u2117
  4911                           
  4912                           ;lcd_utilities.c: 65: PORTDbits.RD6 = 1;
  4913  0072AE  8C83               	bsf	3971,6,c	;volatile
  4914                           
  4915                           ;lcd_utilities.c: 66: _delay((unsigned long)((8)*(48000000/4000.0)));
  4916  0072B0  0E7D               	movlw	125
  4917  0072B2  6E02               	movwf	??_lcd_write_data& (0+255),c
  4918  0072B4  0EAC               	movlw	172
  4919  0072B6                     u2127:
  4920  0072B6  2EE8               	decfsz	wreg,f,c
  4921  0072B8  D7FE               	goto	u2127
  4922  0072BA  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4923  0072BC  D7FC               	goto	u2127
  4924                           
  4925                           ;lcd_utilities.c: 68: lcd_strobe();
  4926  0072BE  ECD7  F035         	call	_lcd_strobe	;wreg free
  4927                           
  4928                           ;lcd_utilities.c: 69: _delay((unsigned long)((8)*(48000000/4000.0)));
  4929  0072C2  0E7D               	movlw	125
  4930  0072C4  6E02               	movwf	??_lcd_write_data& (0+255),c
  4931  0072C6  0EAC               	movlw	172
  4932  0072C8                     u2137:
  4933  0072C8  2EE8               	decfsz	wreg,f,c
  4934  0072CA  D7FE               	goto	u2137
  4935  0072CC  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4936  0072CE  D7FC               	goto	u2137
  4937                           
  4938                           ;lcd_utilities.c: 71: temp1 = data;
  4939  0072D0  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4940                           
  4941                           ;lcd_utilities.c: 72: PORTD = temp1 & 0x0F;
  4942  0072D4  5004               	movf	lcd_write_data@temp1,w,c
  4943  0072D6  0B0F               	andlw	15
  4944  0072D8  6E83               	movwf	3971,c	;volatile
  4945                           
  4946                           ;lcd_utilities.c: 73: _delay((unsigned long)((8)*(48000000/4000.0)));
  4947  0072DA  0E7D               	movlw	125
  4948  0072DC  6E02               	movwf	??_lcd_write_data& (0+255),c
  4949  0072DE  0EAC               	movlw	172
  4950  0072E0                     u2147:
  4951  0072E0  2EE8               	decfsz	wreg,f,c
  4952  0072E2  D7FE               	goto	u2147
  4953  0072E4  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4954  0072E6  D7FC               	goto	u2147
  4955                           
  4956                           ;lcd_utilities.c: 74: PORTDbits.RD6 = 1;
  4957  0072E8  8C83               	bsf	3971,6,c	;volatile
  4958                           
  4959                           ;lcd_utilities.c: 75: _delay((unsigned long)((10)*(48000000/4000.0)));
  4960  0072EA  0E9C               	movlw	156
  4961  0072EC  6E02               	movwf	??_lcd_write_data& (0+255),c
  4962  0072EE  0ED7               	movlw	215
  4963  0072F0                     u2157:
  4964  0072F0  2EE8               	decfsz	wreg,f,c
  4965  0072F2  D7FE               	goto	u2157
  4966  0072F4  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4967  0072F6  D7FC               	goto	u2157
  4968  0072F8  F000               	nop	
  4969                           
  4970                           ;lcd_utilities.c: 77: lcd_strobe();
  4971  0072FA  ECD7  F035         	call	_lcd_strobe	;wreg free
  4972                           
  4973                           ;lcd_utilities.c: 78: _delay((unsigned long)((10)*(48000000/4000.0)));
  4974  0072FE  0E9C               	movlw	156
  4975  007300  6E02               	movwf	??_lcd_write_data& (0+255),c
  4976  007302  0ED7               	movlw	215
  4977  007304                     u2167:
  4978  007304  2EE8               	decfsz	wreg,f,c
  4979  007306  D7FE               	goto	u2167
  4980  007308  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4981  00730A  D7FC               	goto	u2167
  4982  00730C  F000               	nop	
  4983  00730E  0012               	return		;funcret
  4984  007310                     __end_of_lcd_write_data:
  4985                           	opt stack 0
  4986                           tblptru	equ	0xFF8
  4987                           tblptrh	equ	0xFF7
  4988                           tblptrl	equ	0xFF6
  4989                           tablat	equ	0xFF5
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           postdec1	equ	0xFE5
  4993                           plusw1	equ	0xFE3
  4994                           fsr1l	equ	0xFE1
  4995                           indf2	equ	0xFDF
  4996                           postinc2	equ	0xFDE
  4997                           postdec2	equ	0xFDD
  4998                           plusw2	equ	0xFDB
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function _lcd_init *****************
  5004 ;; Defined at:
  5005 ;;		line 94 in file "lcd_utilities.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;		None
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  i               2    5[COMRAM] int 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;		None               void
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0
  5020 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5021 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5022 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5023 ;;Total ram usage:        3 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    2
  5026 ;; This function calls:
  5027 ;;		_lcd_write_cmd
  5028 ;; This function is called by:
  5029 ;;		_ultra
  5030 ;;		_LockMotor
  5031 ;;		_pir
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text29
  5036  006F90                     __ptext29:
  5037                           	opt stack 0
  5038  006F90                     _lcd_init:
  5039                           	opt stack 27
  5040                           
  5041                           ;lcd_utilities.c: 96: int i;
  5042                           ;lcd_utilities.c: 97: TRISD = 0x00;
  5043                           
  5044                           ;incstack = 0
  5045  006F90  0E00               	movlw	0
  5046  006F92  6E95               	movwf	3989,c	;volatile
  5047                           
  5048                           ;lcd_utilities.c: 98: PORTD = 0x00;
  5049  006F94  0E00               	movlw	0
  5050  006F96  6E83               	movwf	3971,c	;volatile
  5051                           
  5052                           ;lcd_utilities.c: 99: PORTDbits.RD4 = 0;
  5053  006F98  9883               	bcf	3971,4,c	;volatile
  5054                           
  5055                           ;lcd_utilities.c: 100: PORTDbits.RD6 = 0;
  5056  006F9A  9C83               	bcf	3971,6,c	;volatile
  5057                           
  5058                           ;lcd_utilities.c: 101: PORTDbits.RD5 = 0;
  5059  006F9C  9A83               	bcf	3971,5,c	;volatile
  5060                           
  5061                           ;lcd_utilities.c: 103: for(i=0;i<100;i++)
  5062  006F9E  0E00               	movlw	0
  5063  006FA0  6E07               	movwf	lcd_init@i+1,c
  5064  006FA2  0E00               	movlw	0
  5065  006FA4  6E06               	movwf	lcd_init@i,c
  5066  006FA6                     l2276:
  5067  006FA6  BE07               	btfsc	lcd_init@i+1,7,c
  5068  006FA8  D006               	goto	l2280
  5069  006FAA  5007               	movf	lcd_init@i+1,w,c
  5070  006FAC  E10F               	bnz	l2284
  5071  006FAE  0E64               	movlw	100
  5072  006FB0  5C06               	subwf	lcd_init@i,w,c
  5073  006FB2  B0D8               	btfsc	status,0,c
  5074  006FB4  D00B               	goto	l2284
  5075  006FB6                     l2280:
  5076                           
  5077                           ;lcd_utilities.c: 104: _delay((unsigned long)((10)*(48000000/4000.0)));
  5078  006FB6  0E9C               	movlw	156
  5079  006FB8  6E05               	movwf	??_lcd_init& (0+255),c
  5080  006FBA  0ED7               	movlw	215
  5081  006FBC                     u2177:
  5082  006FBC  2EE8               	decfsz	wreg,f,c
  5083  006FBE  D7FE               	goto	u2177
  5084  006FC0  2E05               	decfsz	??_lcd_init& (0+255),f,c
  5085  006FC2  D7FC               	goto	u2177
  5086  006FC4  F000               	nop	
  5087  006FC6  4A06               	infsnz	lcd_init@i,f,c
  5088  006FC8  2A07               	incf	lcd_init@i+1,f,c
  5089  006FCA  D7ED               	goto	l2276
  5090  006FCC                     l2284:
  5091                           
  5092                           ;lcd_utilities.c: 117: lcd_write_cmd(0x33);
  5093  006FCC  0E33               	movlw	51
  5094  006FCE  EC90  F037         	call	_lcd_write_cmd
  5095                           
  5096                           ;lcd_utilities.c: 118: lcd_write_cmd(0x32);
  5097  006FD2  0E32               	movlw	50
  5098  006FD4  EC90  F037         	call	_lcd_write_cmd
  5099                           
  5100                           ;lcd_utilities.c: 120: lcd_write_cmd(0x28);
  5101  006FD8  0E28               	movlw	40
  5102  006FDA  EC90  F037         	call	_lcd_write_cmd
  5103                           
  5104                           ;lcd_utilities.c: 123: lcd_write_cmd(0x0E);
  5105  006FDE  0E0E               	movlw	14
  5106  006FE0  EC90  F037         	call	_lcd_write_cmd
  5107                           
  5108                           ;lcd_utilities.c: 126: lcd_write_cmd(0x06);
  5109  006FE4  0E06               	movlw	6
  5110  006FE6  EC90  F037         	call	_lcd_write_cmd
  5111                           
  5112                           ;lcd_utilities.c: 130: lcd_write_cmd(0x01);
  5113  006FEA  0E01               	movlw	1
  5114  006FEC  EC90  F037         	call	_lcd_write_cmd
  5115                           
  5116                           ;lcd_utilities.c: 132: _delay((unsigned long)((10)*(48000000/4000.0)));
  5117  006FF0  0E9C               	movlw	156
  5118  006FF2  6E05               	movwf	??_lcd_init& (0+255),c
  5119  006FF4  0ED7               	movlw	215
  5120  006FF6                     u2187:
  5121  006FF6  2EE8               	decfsz	wreg,f,c
  5122  006FF8  D7FE               	goto	u2187
  5123  006FFA  2E05               	decfsz	??_lcd_init& (0+255),f,c
  5124  006FFC  D7FC               	goto	u2187
  5125  006FFE  F000               	nop	
  5126  007000  0012               	return		;funcret
  5127  007002                     __end_of_lcd_init:
  5128                           	opt stack 0
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           plusw1	equ	0xFE3
  5137                           fsr1l	equ	0xFE1
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           plusw2	equ	0xFDB
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _lcd_write_cmd *****************
  5147 ;; Defined at:
  5148 ;;		line 29 in file "lcd_utilities.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  cmd             1    wreg     unsigned char 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  cmd             1    2[COMRAM] unsigned char 
  5153 ;;  temp2           1    3[COMRAM] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;		None               void
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0
  5164 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5165 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5166 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5167 ;;Total ram usage:        3 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    1
  5170 ;; This function calls:
  5171 ;;		_lcd_strobe
  5172 ;; This function is called by:
  5173 ;;		_lcd_init
  5174 ;;		_LockMotor
  5175 ;;		_pir
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text30
  5180  006F20                     __ptext30:
  5181                           	opt stack 0
  5182  006F20                     _lcd_write_cmd:
  5183                           	opt stack 27
  5184                           
  5185                           ;incstack = 0
  5186                           ;lcd_write_cmd@cmd stored from wreg
  5187  006F20  6E03               	movwf	lcd_write_cmd@cmd,c
  5188                           
  5189                           ;lcd_utilities.c: 31: unsigned char temp2;
  5190                           ;lcd_utilities.c: 32: PORTDbits.RD6 = 0;
  5191  006F22  9C83               	bcf	3971,6,c	;volatile
  5192                           
  5193                           ;lcd_utilities.c: 33: _delay((unsigned long)((4)*(48000000/4000.0)));
  5194  006F24  0E3F               	movlw	63
  5195  006F26  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5196  006F28  0E55               	movlw	85
  5197  006F2A                     u2197:
  5198  006F2A  2EE8               	decfsz	wreg,f,c
  5199  006F2C  D7FE               	goto	u2197
  5200  006F2E  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5201  006F30  D7FC               	goto	u2197
  5202  006F32  F000               	nop	
  5203                           
  5204                           ;lcd_utilities.c: 34: temp2 = cmd;
  5205  006F34  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  5206                           
  5207                           ;lcd_utilities.c: 35: temp2 = temp2 >> 4;
  5208  006F38  3804               	swapf	lcd_write_cmd@temp2,w,c
  5209  006F3A  0B0F               	andlw	15
  5210  006F3C  6E04               	movwf	lcd_write_cmd@temp2,c
  5211                           
  5212                           ;lcd_utilities.c: 36: PORTD = temp2 & 0x0F;
  5213  006F3E  5004               	movf	lcd_write_cmd@temp2,w,c
  5214  006F40  0B0F               	andlw	15
  5215  006F42  6E83               	movwf	3971,c	;volatile
  5216                           
  5217                           ;lcd_utilities.c: 38: _delay((unsigned long)((8)*(48000000/4000.0)));
  5218  006F44  0E7D               	movlw	125
  5219  006F46  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5220  006F48  0EAC               	movlw	172
  5221  006F4A                     u2207:
  5222  006F4A  2EE8               	decfsz	wreg,f,c
  5223  006F4C  D7FE               	goto	u2207
  5224  006F4E  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5225  006F50  D7FC               	goto	u2207
  5226                           
  5227                           ;lcd_utilities.c: 39: lcd_strobe();
  5228  006F52  ECD7  F035         	call	_lcd_strobe	;wreg free
  5229                           
  5230                           ;lcd_utilities.c: 41: _delay((unsigned long)((8)*(48000000/4000.0)));
  5231  006F56  0E7D               	movlw	125
  5232  006F58  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5233  006F5A  0EAC               	movlw	172
  5234  006F5C                     u2217:
  5235  006F5C  2EE8               	decfsz	wreg,f,c
  5236  006F5E  D7FE               	goto	u2217
  5237  006F60  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5238  006F62  D7FC               	goto	u2217
  5239                           
  5240                           ;lcd_utilities.c: 43: temp2 = cmd;
  5241  006F64  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  5242                           
  5243                           ;lcd_utilities.c: 44: PORTD = temp2 & 0x0F;
  5244  006F68  5004               	movf	lcd_write_cmd@temp2,w,c
  5245  006F6A  0B0F               	andlw	15
  5246  006F6C  6E83               	movwf	3971,c	;volatile
  5247                           
  5248                           ;lcd_utilities.c: 46: _delay((unsigned long)((8)*(48000000/4000.0)));
  5249  006F6E  0E7D               	movlw	125
  5250  006F70  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5251  006F72  0EAC               	movlw	172
  5252  006F74                     u2227:
  5253  006F74  2EE8               	decfsz	wreg,f,c
  5254  006F76  D7FE               	goto	u2227
  5255  006F78  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5256  006F7A  D7FC               	goto	u2227
  5257                           
  5258                           ;lcd_utilities.c: 47: lcd_strobe();
  5259  006F7C  ECD7  F035         	call	_lcd_strobe	;wreg free
  5260                           
  5261                           ;lcd_utilities.c: 48: _delay((unsigned long)((8)*(48000000/4000.0)));
  5262  006F80  0E7D               	movlw	125
  5263  006F82  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5264  006F84  0EAC               	movlw	172
  5265  006F86                     u2237:
  5266  006F86  2EE8               	decfsz	wreg,f,c
  5267  006F88  D7FE               	goto	u2237
  5268  006F8A  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5269  006F8C  D7FC               	goto	u2237
  5270  006F8E  0012               	return		;funcret
  5271  006F90                     __end_of_lcd_write_cmd:
  5272                           	opt stack 0
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           plusw1	equ	0xFE3
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           plusw2	equ	0xFDB
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function _lcd_strobe *****************
  5291 ;; Defined at:
  5292 ;;		line 84 in file "lcd_utilities.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		wreg
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5308 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5309 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5310 ;;Total ram usage:        1 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_lcd_write_cmd
  5316 ;;		_lcd_write_data
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text31
  5321  006BAE                     __ptext31:
  5322                           	opt stack 0
  5323  006BAE                     _lcd_strobe:
  5324                           	opt stack 27
  5325                           
  5326                           ;lcd_utilities.c: 86: PORTDbits.RD4 = 1;
  5327                           
  5328                           ;incstack = 0
  5329  006BAE  8883               	bsf	3971,4,c	;volatile
  5330                           
  5331                           ;lcd_utilities.c: 87: _delay((unsigned long)((8)*(48000000/4000.0)));
  5332  006BB0  0E7D               	movlw	125
  5333  006BB2  6E01               	movwf	??_lcd_strobe& (0+255),c
  5334  006BB4  0EAC               	movlw	172
  5335  006BB6                     u2247:
  5336  006BB6  2EE8               	decfsz	wreg,f,c
  5337  006BB8  D7FE               	goto	u2247
  5338  006BBA  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  5339  006BBC  D7FC               	goto	u2247
  5340                           
  5341                           ;lcd_utilities.c: 88: PORTDbits.RD4 = 0;
  5342  006BBE  9883               	bcf	3971,4,c	;volatile
  5343                           
  5344                           ;lcd_utilities.c: 89: _delay((unsigned long)((8)*(48000000/4000.0)));
  5345  006BC0  0E7D               	movlw	125
  5346  006BC2  6E01               	movwf	??_lcd_strobe& (0+255),c
  5347  006BC4  0EAC               	movlw	172
  5348  006BC6                     u2257:
  5349  006BC6  2EE8               	decfsz	wreg,f,c
  5350  006BC8  D7FE               	goto	u2257
  5351  006BCA  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  5352  006BCC  D7FC               	goto	u2257
  5353  006BCE  0012               	return		;funcret
  5354  006BD0                     __end_of_lcd_strobe:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           plusw1	equ	0xFE3
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           plusw2	equ	0xFDB
  5369                           fsr2h	equ	0xFDA
  5370                           fsr2l	equ	0xFD9
  5371                           status	equ	0xFD8
  5372                           
  5373 ;; *************** function _lcd_backlight_on *****************
  5374 ;; Defined at:
  5375 ;;		line 18 in file "lcd_utilities.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;		None
  5378 ;; Auto vars:     Size  Location     Type
  5379 ;;		None
  5380 ;; Return value:  Size  Location     Type
  5381 ;;		None               void
  5382 ;; Registers used:
  5383 ;;		None
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0
  5390 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5392 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5393 ;;Total ram usage:        0 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; This function calls:
  5396 ;;		Nothing
  5397 ;; This function is called by:
  5398 ;;		_ultra
  5399 ;;		_LockMotor
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text32
  5404  006B46                     __ptext32:
  5405                           	opt stack 0
  5406  006B46                     _lcd_backlight_on:
  5407                           	opt stack 29
  5408                           
  5409                           ;lcd_utilities.c: 19: PORTDbits.RD7 = 1;
  5410                           
  5411                           ;incstack = 0
  5412  006B46  8E83               	bsf	3971,7,c	;volatile
  5413  006B48  0012               	return		;funcret
  5414  006B4A                     __end_of_lcd_backlight_on:
  5415                           	opt stack 0
  5416                           tblptru	equ	0xFF8
  5417                           tblptrh	equ	0xFF7
  5418                           tblptrl	equ	0xFF6
  5419                           tablat	equ	0xFF5
  5420                           postinc0	equ	0xFEE
  5421                           wreg	equ	0xFE8
  5422                           postdec1	equ	0xFE5
  5423                           plusw1	equ	0xFE3
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           plusw2	equ	0xFDB
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _getkey *****************
  5434 ;; Defined at:
  5435 ;;		line 17 in file "keypad_utilities.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;		None
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  lookup         18    0[COMRAM] const unsigned char [18]
  5440 ;;  keycode         1   18[COMRAM] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  1    wreg      unsigned char 
  5443 ;; Registers used:
  5444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5450 ;;      Params:         0       0       0       0       0       0       0       0       0
  5451 ;;      Locals:        19       0       0       0       0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5453 ;;      Totals:        19       0       0       0       0       0       0       0       0
  5454 ;;Total ram usage:       19 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_LockMotor
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text33
  5464  006C54                     __ptext33:
  5465                           	opt stack 0
  5466  006C54                     _getkey:
  5467                           	opt stack 29
  5468                           
  5469                           ;keypad_utilities.c: 19: const unsigned char lookup[] = "123F456E789DA0BC ";
  5470                           
  5471                           ;incstack = 0
  5472  006C54  0E05               	movlw	low getkey@F4444
  5473  006C56  6EF6               	movwf	tblptrl,c
  5474  006C58                     	if	0	;There is only one active tblptr byte
  5475  006C58                     	endif
  5476  006C58                     	if	0	;There are less than 3 active tblptr bytes
  5477  006C58                     	endif
  5478  006C58  EE20  F001         	lfsr	2,getkey@lookup
  5479  006C5C  0E11               	movlw	17
  5480  006C5E                     u1830:
  5481  006C5E  0009               	tblrd		*+
  5482  006C60  CFF5 FFDE          	movff	tablat,postinc2
  5483  006C64  06E8               	decf	wreg,f,c
  5484  006C66  E2FB               	bc	u1830
  5485  006C68                     l119:
  5486  006C68  AA81               	btfss	3969,5,c	;volatile
  5487  006C6A  D7FE               	goto	l119
  5488                           
  5489                           ;keypad_utilities.c: 22: keycode=PORTB & 0x0F;
  5490  006C6C  5081               	movf	3969,w,c	;volatile
  5491  006C6E  0B0F               	andlw	15
  5492  006C70  6E13               	movwf	getkey@keycode,c
  5493  006C72                     l122:
  5494  006C72  BA81               	btfsc	3969,5,c	;volatile
  5495  006C74  D7FE               	goto	l122
  5496                           
  5497                           ;keypad_utilities.c: 25: return(lookup[keycode]);
  5498  006C76  5013               	movf	getkey@keycode,w,c
  5499  006C78  0D01               	mullw	1
  5500  006C7A  0E01               	movlw	low getkey@lookup
  5501  006C7C  24F3               	addwf	prodl,w,c
  5502  006C7E  6ED9               	movwf	fsr2l,c
  5503  006C80  0E00               	movlw	high getkey@lookup
  5504  006C82  20F4               	addwfc	prodh,w,c
  5505  006C84  6EDA               	movwf	fsr2h,c
  5506  006C86  50DF               	movf	indf2,w,c
  5507  006C88  0012               	return	
  5508  006C8A                     __end_of_getkey:
  5509                           	opt stack 0
  5510                           tblptru	equ	0xFF8
  5511                           tblptrh	equ	0xFF7
  5512                           tblptrl	equ	0xFF6
  5513                           tablat	equ	0xFF5
  5514                           prodh	equ	0xFF4
  5515                           prodl	equ	0xFF3
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           plusw1	equ	0xFE3
  5520                           fsr1l	equ	0xFE1
  5521                           indf2	equ	0xFDF
  5522                           postinc2	equ	0xFDE
  5523                           postdec2	equ	0xFDD
  5524                           plusw2	equ	0xFDB
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _delay_ms *****************
  5530 ;; Defined at:
  5531 ;;		line 10 in file "delays_utilities.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  i               2    0[COMRAM] unsigned int 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  j               2    3[COMRAM] unsigned int 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5545 ;;      Params:         2       0       0       0       0       0       0       0       0
  5546 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5547 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5548 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5549 ;;Total ram usage:        5 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_ultra
  5555 ;;		_LockMotor
  5556 ;;		_pir
  5557 ;;		_buzzer_but
  5558 ;;		_buzzer
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text34
  5563  006C20                     __ptext34:
  5564                           	opt stack 0
  5565  006C20                     _delay_ms:
  5566                           	opt stack 29
  5567                           
  5568                           ;delays_utilities.c: 12: if(i!=0)
  5569                           
  5570                           ;incstack = 0
  5571  006C20  5001               	movf	delay_ms@i,w,c
  5572  006C22  1002               	iorwf	delay_ms@i+1,w,c
  5573  006C24  B4D8               	btfsc	status,2,c
  5574  006C26  0012               	return	
  5575                           
  5576                           ;delays_utilities.c: 13: for(j=0;j<i;j++)_delay((unsigned long)((1)*(48000000/4000.0)));
  5577  006C28  0E00               	movlw	0
  5578  006C2A  6E05               	movwf	delay_ms@j+1,c
  5579  006C2C  0E00               	movlw	0
  5580  006C2E  6E04               	movwf	delay_ms@j,c
  5581  006C30  D00A               	goto	l60
  5582  006C32                     l2312:
  5583  006C32  0E10               	movlw	16
  5584  006C34  6E03               	movwf	??_delay_ms& (0+255),c
  5585  006C36  0E94               	movlw	148
  5586  006C38                     u2267:
  5587  006C38  2EE8               	decfsz	wreg,f,c
  5588  006C3A  D7FE               	goto	u2267
  5589  006C3C  2E03               	decfsz	??_delay_ms& (0+255),f,c
  5590  006C3E  D7FC               	goto	u2267
  5591  006C40  D000               	nop2	
  5592  006C42  4A04               	infsnz	delay_ms@j,f,c
  5593  006C44  2A05               	incf	delay_ms@j+1,f,c
  5594  006C46                     l60:
  5595  006C46  5001               	movf	delay_ms@i,w,c
  5596  006C48  5C04               	subwf	delay_ms@j,w,c
  5597  006C4A  5002               	movf	delay_ms@i+1,w,c
  5598  006C4C  5805               	subwfb	delay_ms@j+1,w,c
  5599  006C4E  B0D8               	btfsc	status,0,c
  5600  006C50  0012               	return	
  5601  006C52  D7EF               	goto	l2312
  5602  006C54                     __end_of_delay_ms:
  5603                           	opt stack 0
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           prodh	equ	0xFF4
  5609                           prodl	equ	0xFF3
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postdec1	equ	0xFE5
  5613                           plusw1	equ	0xFE3
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           plusw2	equ	0xFDB
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _UART_Write *****************
  5624 ;; Defined at:
  5625 ;;		line 36 in file "LockMotor.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  data            1    wreg     unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  data            1    0[COMRAM] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5639 ;;      Params:         0       0       0       0       0       0       0       0       0
  5640 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5642 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5643 ;;Total ram usage:        1 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; This function calls:
  5646 ;;		Nothing
  5647 ;; This function is called by:
  5648 ;;		_LockMotor
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text35
  5653  006B5E                     __ptext35:
  5654                           	opt stack 0
  5655  006B5E                     _UART_Write:
  5656                           	opt stack 29
  5657                           
  5658                           ;incstack = 0
  5659                           ;UART_Write@data stored from wreg
  5660  006B5E  6E01               	movwf	UART_Write@data,c
  5661  006B60                     l191:
  5662  006B60  A2AC               	btfss	4012,1,c	;volatile
  5663  006B62  D7FE               	goto	l191
  5664                           
  5665                           ;LockMotor.c: 38: TXREG = data;
  5666  006B64  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  5667  006B68  0012               	return		;funcret
  5668  006B6A                     __end_of_UART_Write:
  5669                           	opt stack 0
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           postinc0	equ	0xFEE
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           plusw1	equ	0xFE3
  5680                           fsr1l	equ	0xFE1
  5681                           indf2	equ	0xFDF
  5682                           postinc2	equ	0xFDE
  5683                           postdec2	equ	0xFDD
  5684                           plusw2	equ	0xFDB
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _UART_Init *****************
  5690 ;; Defined at:
  5691 ;;		line 24 in file "LockMotor.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;		None
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;		None               void
  5698 ;; Registers used:
  5699 ;;		wreg, status,2
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0
  5706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5708 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5709 ;;Total ram usage:        0 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_LockMotor
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text36
  5719  006B92                     __ptext36:
  5720                           	opt stack 0
  5721  006B92                     _UART_Init:
  5722                           	opt stack 29
  5723                           
  5724                           ;LockMotor.c: 25: TRISCbits.TRISC6 = 0;
  5725                           
  5726                           ;incstack = 0
  5727  006B92  9C94               	bcf	3988,6,c	;volatile
  5728                           
  5729                           ;LockMotor.c: 26: TRISCbits.TRISC7 = 1;
  5730  006B94  8E94               	bsf	3988,7,c	;volatile
  5731                           
  5732                           ;LockMotor.c: 28: TXSTA = 0x24;
  5733  006B96  0E24               	movlw	36
  5734  006B98  6EAC               	movwf	4012,c	;volatile
  5735                           
  5736                           ;LockMotor.c: 29: RCSTA = 0x90;
  5737  006B9A  0E90               	movlw	144
  5738  006B9C  6EAB               	movwf	4011,c	;volatile
  5739                           
  5740                           ;LockMotor.c: 30: BAUDCON = 0x08;
  5741  006B9E  0E08               	movlw	8
  5742  006BA0  6EB8               	movwf	4024,c	;volatile
  5743                           
  5744                           ;LockMotor.c: 31: SPBRG = 77;
  5745  006BA2  0E4D               	movlw	77
  5746  006BA4  6EAF               	movwf	4015,c	;volatile
  5747                           
  5748                           ;LockMotor.c: 32: SPBRGH = 0;
  5749  006BA6  0E00               	movlw	0
  5750  006BA8  6EB0               	movwf	4016,c	;volatile
  5751                           
  5752                           ;LockMotor.c: 33: PIR1bits.TXIF = 0;
  5753  006BAA  989E               	bcf	3998,4,c	;volatile
  5754  006BAC  0012               	return		;funcret
  5755  006BAE                     __end_of_UART_Init:
  5756                           	opt stack 0
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           postinc0	equ	0xFEE
  5764                           wreg	equ	0xFE8
  5765                           postdec1	equ	0xFE5
  5766                           plusw1	equ	0xFE3
  5767                           fsr1l	equ	0xFE1
  5768                           indf2	equ	0xFDF
  5769                           postinc2	equ	0xFDE
  5770                           postdec2	equ	0xFDD
  5771                           plusw2	equ	0xFDB
  5772                           fsr2h	equ	0xFDA
  5773                           fsr2l	equ	0xFD9
  5774                           status	equ	0xFD8
  5775                           tblptru	equ	0xFF8
  5776                           tblptrh	equ	0xFF7
  5777                           tblptrl	equ	0xFF6
  5778                           tablat	equ	0xFF5
  5779                           prodh	equ	0xFF4
  5780                           prodl	equ	0xFF3
  5781                           postinc0	equ	0xFEE
  5782                           wreg	equ	0xFE8
  5783                           postdec1	equ	0xFE5
  5784                           plusw1	equ	0xFE3
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           plusw2	equ	0xFDB
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794                           	psect	rparam
  5795  0000                     tblptru	equ	0xFF8
  5796                           tblptrh	equ	0xFF7
  5797                           tblptrl	equ	0xFF6
  5798                           tablat	equ	0xFF5
  5799                           prodh	equ	0xFF4
  5800                           prodl	equ	0xFF3
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           plusw1	equ	0xFE3
  5805                           fsr1l	equ	0xFE1
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           plusw2	equ	0xFDB
  5810                           fsr2h	equ	0xFDA
  5811                           fsr2l	equ	0xFD9
  5812                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        65
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     87     141
    BANK1           256      0      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _ultra->_delay_us
    _delay_us->___lwdiv
    _SetDutyCycleTo->___fttol
    _round->___ftneg
    _trunc->___altoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___lltoft->___ftpack
    _doorSetDutyCycleTo->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftadd
    ___ftdiv->___lltoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    _lcd_write_data->_lcd_strobe
    _lcd_init->_lcd_write_cmd
    _lcd_write_cmd->_lcd_strobe

Critical Paths under _main in BANK0

    _main->_LockMotor
    _LockMotor->_motordoor_close
    _LockMotor->_motordoor_open
    _LockMotor->_motorlock_lock
    _LockMotor->_motorlock_unlock
    _motorlock_unlock->_setPeriodTo
    _motorlock_lock->_setPeriodTo
    _motordoor_open->_setPeriodTo
    _motordoor_close->_setPeriodTo
    _setPeriodTo->_round

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  154256
                          _LockMotor
                              _ultra
 ---------------------------------------------------------------------------------
 (1) _ultra                                                2     2      0    1490
                                             13 COMRAM     2     2      0
                           _delay_ms
                           _delay_us
                  _lcd_backlight_off
                   _lcd_backlight_on
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_backlight_off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     576
                                              7 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LockMotor                                           55    55      0  152766
                                             33 BANK0     54    54      0
                          _UART_Init
                         _UART_Write
                           _delay_ms
                             _getkey
                   _lcd_backlight_on
                           _lcd_init
                      _lcd_write_cmd
                     _lcd_write_data
                    _motordoor_close
                     _motordoor_open
                     _motorlock_lock
                   _motorlock_unlock
 ---------------------------------------------------------------------------------
 (2) _motorlock_unlock                                     2     2      0   37808
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (2) _motorlock_lock                                       2     2      0   37808
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _SetDutyCycleTo                                      12     7      5   13461
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motordoor_open                                       2     2      0   37808
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (2) _motordoor_close                                      2     2      0   37808
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _setPeriodTo                                         25    21      4   23976
                                              6 BANK0     25    21      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3    7666
                                              0 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                8     5      3    3549
                                             84 COMRAM     8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2350
                                             74 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                             92 COMRAM     3     0      3
                            ___ftadd (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2345
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _doorSetDutyCycleTo                                  12     7      5   13461
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     572
                                             59 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3344
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3832
                                             32 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2431
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _delay                                                6     4      2     348
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _PWMdoor_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data                                       3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             3     3      0     159
                                              4 COMRAM     3     3      0
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd                                        3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (4) _lcd_strobe                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_backlight_on                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getkey                                              19    19      0      48
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     708
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LockMotor
     _UART_Init
     _UART_Write
     _delay_ms
     _getkey
     _lcd_backlight_on
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe
     _lcd_write_cmd
       _lcd_strobe
     _lcd_write_data
       _lcd_strobe
     _motordoor_close
       _PWMdoor_Init
       _delay
       _doorSetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motordoor_open
       _PWMdoor_Init
       _delay
       _doorSetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motorlock_lock
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motorlock_unlock
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
   _ultra
     _delay_ms
     _delay_us
       ___lwdiv
     _lcd_backlight_off
     _lcd_backlight_on
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      15       7        8.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101      20        0.0%
DATA                 0      0     101       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Feb 08 22:53:14 2024

                   ___altoft@exp 0053                    ___altoft@sign 0054  
                             l60 6C46                               l73 715E  
                             l95 7346       __size_of_lcd_backlight_off 0004  
                             _p1 00E9                               _p2 00EA  
                             _p3 00EB                               _p4 00EC  
                   ___ftadd@exp1 002C                     ___ftadd@exp2 002B  
                   ___ftadd@sign 002A                              l102 7374  
                            l104 7378                              l122 6C72  
                            l119 6C68                              l191 6B60  
                            l603 79DC                              l612 79F8  
                            l197 7A7C                              l623 76A4  
                            l565 743C                              l645 6BE6  
                            l743 6E60                              l592 792C  
                            l588 7902                              _PR2 000FCB  
                            _key 00E7                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                      getkey@F4444 1005  
                   ___ftdiv@cntr 001B                     ___ftdiv@sign 0020  
                   __CFG_WDT$OFF 000000                             l2022 7640  
                           l2112 6CD4                             l2016 7618  
                           l2120 6ED6                             l2042 767E  
                           l2062 76FE                             l2118 6ECA  
                           l2312 6C32                             l2232 6C94  
                           l2242 6CAE                             l2234 6C9C  
                           l2082 7758                             l2244 6CB2  
                           l2092 7780                             l2068 7726  
                           l2180 7DA0                             l2172 7D10  
                           l2500 7B68                             l2252 6E2E  
                           l2086 7768                             l2166 7CC0  
                           l2254 6E36                             l2430 7354  
                           l2422 7322                             l2280 6FB6  
                           l1800 73D6                             l2096 7790  
                           l2192 7E78                             l2184 7DE8  
                           l2176 7D58                             l2512 7BB6  
                           l2504 7B84                             l2264 6E56  
                           l2256 6E3A                             l2440 7386  
                           l1810 7432                             l1802 73F4  
                           l2514 7BC2                             l2370 714A  
                           l2362 7122                             l2434 7364  
                           l2284 6FCC                             l2276 6FA6  
                           l2196 7EC0                             l2188 7E30  
                           l2524 7BEC                             l2372 7154  
                           l1806 740A                             l2534 7C1C  
                           l2542 7C62                             l2470 7AC2  
                           l2366 7136                             l1808 7428  
                           l1912 7910                             l2448 739C  
                           l1834 7024                             l2538 7C38  
                           l2466 7AA6                             l1940 798C  
                           l1836 7030                             l1942 7996  
                           l1934 796A                             l1918 793A  
                           l1870 786C                             l1960 7A14  
                           l1952 79CA                             l1944 79A0  
                           l1880 7896                             l1848 77F6  
                           l1794 73BE                             l1970 7A44  
                           l1954 79D4                             l1946 79A8  
                           l1866 785C                             l1884 78AC  
                           l1876 7884                             l1798 73CC  
                           l1878 7890                             l1894 7096  
                           l1990 71B0                             l1986 7196  
                           u2011 7C08                             u1141 77DA  
                           u1230 70BE                             u2030 7C78  
                           u1160 7814                             u1241 78CE  
                           u2107 7286                             u1251 78E2  
                           u2117 72A6                             u1501 7628  
                           u1165 780C                             u1238 70C0  
                           u2207 6F4A                             u2127 72B6  
                           u2217 6F5C                             u2137 72C8  
                           u2227 6F74                             u2147 72E0  
                           u1531 76E6                             u2237 6F86  
                           u2157 72F0                             u2077 7130  
                           u1470 71A2                             u2247 6BB6  
                           u2167 7304                             u1551 770E  
                           u2087 7144                             u2257 6BC6  
                           u2177 6FBC                             u1481 7600  
                           u2097 7156                             u2267 6C38  
                           u2187 6FF6                             u2197 6F2A  
                           u1830 6C5E                             u1921 7A92  
               ??_motordoor_open 0060                             u1981 7B54  
                           _TMR2 000FCC                             _TRMT 007D61  
       SetDutyCycleTo@Duty_cycle 004B           __end_of_lcd_write_data 7310  
                           _main 6B6A                     ___ftpack@arg 0001  
                   ___ftpack@exp 0004                             fsr2h 000FDA  
                           fsr1l 000FE1                             indf2 000FDF  
                           fsr2l 000FD9                             prodl 000FF3  
                 ?_lcd_write_cmd 0001                             start 1000  
        _doorSetDutyCycleTo$1531 0052                 ??_motorlock_lock 0060  
                   ___ftmul@cntr 003A                     ___param_bank 000010  
                   ___ftmul@sign 003B                       LockMotor@i 00B1  
    __size_of_doorSetDutyCycleTo 00CA                     ___fttol@exp1 004A  
                   ___fttol@lval 0046                            ?_main 0001  
                __end_of___ftadd 7A6A                  __end_of___ftdiv 76D6  
              ??_motordoor_close 0060                  __end_of___ftneg 6BF4  
                __end_of___ftmul 77CA                  __end_of___fttol 78BE  
                          _T2CON 000FCA                  __end_of___lwdiv 6E6A  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _PORTB 000F81                            _PORTD 000F83  
                          _TRISD 000F95                 lcd_write_cmd@cmd 0003  
                          _TXREG 000FAD                            _TXSTA 000FAC  
                 LockMotor@F4631 00CC                   LockMotor@F4628 00B7  
                 LockMotor@F4638 00D9                     ___lltoft@exp 0011  
                    ?_UART_Write 0001               __size_of_UART_Init 001C  
          __size_of_PWMdoor_Init 0008       setPeriodTo@clockSelectBits 0076  
                  ___awtoft@sign 000C                            _delay 6C8A  
                          _frexp 707A                            _errno 00E3  
                  ___ftpack@sign 0005                            _round 71EE  
                          _ultra 7310                            _trunc 716C  
                          _wrong 00E5                   LockMotor@i_594 00B3  
                 LockMotor@i_597 00B5                 __end_of_PWM_Init 6B5E  
                          tablat 000FF5                            plusw1 000FE3  
                          plusw2 000FDB                  ?_lcd_write_data 0001  
                          status 000FD8             motorlock_lock@Period 007F  
                   getkey@lookup 0001                  __initialization 6E6A  
                   __end_of_main 6B7C                      LockMotor@p1 00AD  
                    LockMotor@p2 00AE                      LockMotor@p3 00AF  
                    LockMotor@p4 00B0         __end_of_lcd_backlight_on 6B4A  
                   _PWMdoor_Init 6B4E                           ??_main 0060  
                  ___fttol@sign1 0045                    __activetblptr 000001  
                   ?_setPeriodTo 0066                           ?_delay 0001  
                         _ADCON1 000FC1                           ?_frexp 0001  
               __end_of___altoft 707A                           _CCPR1L 000FBE  
                         _CCPR2L 000FBB                 __end_of___awtoft 6CF8  
               __end_of___ftpack 745C                           ?_round 0060  
                         ?_ultra 0001                           ?_trunc 0055  
               __end_of___lltoft 6F20                           _OSCCON 000FD3  
                         _SPBRGH 000FB0                  ??_lcd_write_cmd 0002  
               ??_SetDutyCycleTo 0050               __size_of_LockMotor 0216  
               __end_of_delay_ms 6C54                 __end_of_delay_us 716C  
               __end_of_lcd_init 7002                __end_of_UART_Init 6BAE  
            __size_of_UART_Write 000C                        ??___ftadd 0027  
                      ??___ftdiv 0018                        ??___ftneg 0060  
                      ??___ftmul 0033                        ??___fttol 0040  
                      ??___lwdiv 0005                           _getkey 6C54  
                         delay@i 0003                           delay@j 0005  
                         clear_0 6E70            ___ftmul@f3_as_product 0037  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         round@f 0063                           round@x 0060  
                         trunc@i 0058                           trunc@x 0055  
              ?_motorlock_unlock 0001                       __accesstop 0060  
        __end_of__initialization 6EB6                       ___altoft@c 004B  
                __CFG_PBADEN$OFF 000000                    getkey@keycode 0013  
                     ___ftadd@f1 0021                       ___ftadd@f2 0024  
             ??_motorlock_unlock 0060                    ___rparam_used 000001  
                     ___ftdiv@f1 0012                       ___ftdiv@f2 0015  
                     ___ftdiv@f3 001C                       ___ftneg@f1 005D  
                     ___awtoft@c 0009                       ___ftmul@f1 002D  
                     ___ftmul@f2 0030                       ___fttol@f1 003C  
                 __pcstackCOMRAM 0001           setPeriodTo@_resolution 007B  
                   __pidataBANK0 6BF4                     __pidataBANK1 6B7D  
                  __end_of_delay 6CC0                       ___lltoft@c 0009  
                  __end_of_frexp 70F2                    __end_of_round 727C  
                  __end_of_ultra 73AE                    __end_of_trunc 71EE  
                      ?_PWM_Init 0001                __end_of_LockMotor 7C80  
                        ??_delay 0003                          ??_frexp 0006  
                        ??_round 0060                          ??_ultra 000E  
                        ??_trunc 0058                       __pbssBANK0 00E3  
                _motordoor_close 6CF8                          ?_getkey 0001  
                        _CCP1CON 000FBD                          _CCP2CON 000FBA  
                      ?___altoft 004B                          _BAUDCON 000FB8  
                      ?___awtoft 0009                        ?___ftpack 0001  
                      ?___lltoft 0009                       ??_PWM_Init 0001  
                      ?_delay_ms 0001                     ??_UART_Write 0001  
                      ?_delay_us 0008                 ??_lcd_write_data 0002  
                     _lcd_strobe 6BAE                        ?_lcd_init 0001  
           __size_of_setPeriodTo 0380               lcd_write_data@data 0003  
             lcd_write_cmd@temp2 0004           motorlock_unlock@Period 007F  
                        __Hparam 0000       __end_of_doorSetDutyCycleTo 7526  
                        __Lparam 0000                          ___ftadd 78BE  
                        ___ftdiv 75F0                          ___ftneg 6BD0  
             __end_of_UART_Write 6B6A                          ___ftmul 76D6  
                        ___fttol 77CA                          ___lwdiv 6E18  
                   __psmallconst 1004                       ??___altoft 004F  
                __size_of_getkey 0036                ?_lcd_backlight_on 0001  
                        __pcinit 6E6A                       ??___awtoft 000C  
                     ??___ftpack 0006                          __ramtop 0800  
                     ??___lltoft 000D                          __ptext0 6B6A  
                        __ptext1 7310                          __ptext2 6B4A  
                        __ptext3 70F2                          __ptext4 6E18  
                        __ptext5 7A6A                          __ptext6 6DD0  
                        __ptext7 6D88                          __ptext8 7526  
                        __ptext9 6B56               ??_lcd_backlight_on 0001  
                      _T2CONbits 000FCA                       ??_delay_ms 0003  
                     ??_delay_us 000A                          _outchar 00E8  
   setPeriodTo@TimerPrescaleBits 006E         doorSetDutyCycleTo@Period 004E  
                     ??_lcd_init 0005             end_of_initialization 6EB6  
        __end_of_motordoor_close 6D40          __size_of_motordoor_open 0048  
                        postdec1 000FE5                          postdec2 000FDD  
  setPeriodTo@TimerPrescaleValue 0070                          postinc0 000FEE  
                        postinc2 000FDE                        _UART_Init 6B92  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
                      _PORTCbits 000F82                        _PORTDbits 000F83  
        __size_of_motorlock_lock 0048                 LockMotor@openMsg 0096  
                 UART_Write@data 0001                        _TRISAbits 000F92  
                      _TRISCbits 000F94             SetDutyCycleTo@Period 004E  
                    ?_lcd_strobe 0001                      ___ftdiv@exp 001F  
          __end_of_lcd_write_cmd 6F90                      ___ftmul@exp 0036  
      __size_of_motorlock_unlock 0048                setPeriodTo@period 0078  
                     ?_UART_Init 0001                   __end_of_getkey 6C8A  
              __size_of_PWM_Init 0008              start_initialization 6E6A  
                  delay_us@lower 000C                        _LockMotor 7A6A  
                     frexp@value 0001                 ?_motordoor_close 0001  
    SetDutyCycleTo@PWM10BitValue 0055            motordoor_close@Period 007F  
                    __pdataBANK0 00B7                      __pdataBANK1 0100  
                       ??_getkey 0001              __size_of_lcd_strobe 0022  
        __size_of_SetDutyCycleTo 00CA                __size_of___altoft 0078  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                    __pcstackBANK0 0060  
                     ?_LockMotor 0001                __size_of_delay_ms 0034  
              __size_of_delay_us 007A                __size_of_lcd_init 0072  
               ___lwdiv@dividend 0001                   _motordoor_open 6D40  
                       ?___ftadd 0021                         ?___ftdiv 0012  
                       ?___ftneg 005D                         ?___ftmul 002D  
                       ?___fttol 003C                         ?___lwdiv 0001  
                    ??_UART_Init 0001                    ?_PWMdoor_Init 0001  
                 _motorlock_lock 6D88     doorSetDutyCycleTo@Duty_cycle 004B  
             _doorSetDutyCycleTo 745C                      __smallconst 1004  
                  ??_setPeriodTo 006A                 ___lwdiv@quotient 0005  
                 __size_of_delay 0036              ?_doorSetDutyCycleTo 004B  
                 __size_of_frexp 0078        __size_of_lcd_backlight_on 0004  
                 __size_of_round 008E                   __size_of_ultra 009E  
                 __size_of_trunc 0082                        delay_ms@i 0001  
                      delay_ms@j 0004                        delay_us@i 0008  
                      delay_us@j 000A           __end_of_motordoor_open 6D88  
                       _PIR1bits 000F9E             ??_doorSetDutyCycleTo 0050  
doorSetDutyCycleTo@PWM10BitValue 0055           __end_of_motorlock_lock 6DD0  
               _motorlock_unlock 6DD0                   ??_PWMdoor_Init 0001  
                       _PWM_Init 6B56                        lcd_init@i 0006  
            lcd_write_data@temp1 0004                      ??_LockMotor 0060  
                   ??_lcd_strobe 0001                        copy_data0 6E8A  
                      copy_data1 6EAA              __end_of_setPeriodTo 8000  
               _setPeriodTo$1529 006B                         _Message1 0100  
                      frexp@eptr 0004                  ?_motordoor_open 0001  
        __size_of_lcd_write_data 0094                         __Hrparam 0000  
                       __Lrparam 0000                     __Lsmallconst 1004  
                ?_motorlock_lock 0001                       ultra@Count 000E  
               __size_of___ftadd 01AC                   _SetDutyCycleTo 7526  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
                       ___altoft 7002                 __size_of___ftmul 00F4  
               __size_of___fttol 00F4                 __size_of___lwdiv 0052  
             __end_of_lcd_strobe 6BD0                         ___awtoft 6CC0  
                       ___ftpack 73AE                         ___lltoft 6EC4  
              _lcd_backlight_off 6B4A               ?_lcd_backlight_off 0001  
                       _delay_ms 6C20                         _delay_us 70F2  
                ___lwdiv@divisor 0003                  ___lwdiv@counter 0007  
                       __ptext10 6D40                         __ptext11 6CF8  
                       __ptext20 77CA                         __ptext12 7C80  
                       __ptext21 76D6                         __ptext13 71EE  
                       __ptext30 6F20                         __ptext22 75F0  
                       __ptext14 716C                         __ptext31 6BAE  
                       __ptext23 78BE                         __ptext15 707A  
                       __ptext32 6B46                         __ptext24 6CC0  
                       __ptext16 7002                         __ptext33 6C54  
                       __ptext25 73AE                         __ptext17 6BD0  
                       __ptext34 6C20                         __ptext26 6C8A  
                       __ptext18 6EC4                         __ptext35 6B5E  
                       __ptext27 6B4E                         __ptext19 745C  
                       __ptext36 6B92                         __ptext28 727C  
                       __ptext29 6F90                         _lcd_init 6F90  
            ??_lcd_backlight_off 0001                       trunc@expon 005B  
                  __size_of_main 0012                         delay@val 0001  
         __end_of_SetDutyCycleTo 75F0                  setPeriodTo@FOSC 0072  
                setPeriodTo@FPWM 0066        __end_of_lcd_backlight_off 6B4E  
         __size_of_lcd_write_cmd 0070                      _setPeriodTo 7C80  
              LockMotor@Message1 0081                 _lcd_backlight_on 6B46  
           __end_of_PWMdoor_Init 6B56              __end_ofgetkey@F4444 1017  
       __size_of_motordoor_close 0048                  ?_SetDutyCycleTo 004B  
           motordoor_open@Period 007F              _SetDutyCycleTo$1530 0052  
                     _UART_Write 6B5E                LockMotor@errorMsg 00A3  
       __end_of_motorlock_unlock 6E18                   _lcd_write_data 727C  
                  _lcd_write_cmd 6F20  
