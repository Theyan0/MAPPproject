

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Feb 08 04:02:57 2024

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	idataBANK0
    56  006C12                     __pidataBANK0:
    57                           	opt stack 0
    58                           
    59                           ;initializer for LockMotor@F4628
    60  006C12  45                 	db	69
    61  006C13  6E                 	db	110
    62  006C14  74                 	db	116
    63  006C15  65                 	db	101
    64  006C16  72                 	db	114
    65  006C17  20                 	db	32
    66  006C18  50                 	db	80
    67  006C19  49                 	db	73
    68  006C1A  4E                 	db	78
    69  006C1B  20                 	db	32
    70  006C1C  6E                 	db	110
    71  006C1D  75                 	db	117
    72  006C1E  6D                 	db	109
    73  006C1F  62                 	db	98
    74  006C20  65                 	db	101
    75  006C21  72                 	db	114
    76  006C22  20                 	db	32
    77  006C23  3A                 	db	58
    78  006C24  20                 	db	32
    79  006C25  20                 	db	32
    80  006C26  00                 	db	0
    81                           
    82                           ;initializer for LockMotor@F4631
    83  006C27  4F                 	db	79
    84  006C28  50                 	db	80
    85  006C29  45                 	db	69
    86  006C2A  4E                 	db	78
    87  006C2B  49                 	db	73
    88  006C2C  4E                 	db	78
    89  006C2D  47                 	db	71
    90  006C2E  20                 	db	32
    91  006C2F  4C                 	db	76
    92  006C30  4F                 	db	79
    93  006C31  43                 	db	67
    94  006C32  4B                 	db	75
    95  006C33  00                 	db	0
    96                           
    97                           ;initializer for LockMotor@F4638
    98  006C34  57                 	db	87
    99  006C35  52                 	db	82
   100  006C36  4F                 	db	79
   101  006C37  4E                 	db	78
   102  006C38  47                 	db	71
   103  006C39  20                 	db	32
   104  006C3A  50                 	db	80
   105  006C3B  49                 	db	73
   106  006C3C  4E                 	db	78
   107  006C3D  00                 	db	0
   108                           
   109                           	psect	idataBANK1
   110  006B5F                     __pidataBANK1:
   111                           	opt stack 0
   112                           
   113                           ;initializer for _Message1
   114  006B5F  45                 	db	69
   115  006B60  6E                 	db	110
   116  006B61  74                 	db	116
   117  006B62  65                 	db	101
   118  006B63  72                 	db	114
   119  006B64  20                 	db	32
   120  006B65  50                 	db	80
   121  006B66  49                 	db	73
   122  006B67  4E                 	db	78
   123  006B68  20                 	db	32
   124  006B69  6E                 	db	110
   125  006B6A  75                 	db	117
   126  006B6B  6D                 	db	109
   127  006B6C  62                 	db	98
   128  006B6D  65                 	db	101
   129  006B6E  72                 	db	114
   130  006B6F  20                 	db	32
   131  006B70  3A                 	db	58
   132  006B71  20                 	db	32
   133  006B72  20                 	db	32
   134  006B73  00                 	db	0
   135                           
   136                           	psect	smallconst
   137  001004                     __psmallconst:
   138                           	opt stack 0
   139  001004  00                 	db	0
   140  001005                     getkey@F4444:
   141                           	opt stack 0
   142  001005  31                 	db	49
   143  001006  32                 	db	50
   144  001007  33                 	db	51
   145  001008  46                 	db	70
   146  001009  34                 	db	52
   147  00100A  35                 	db	53
   148  00100B  36                 	db	54
   149  00100C  45                 	db	69
   150  00100D  37                 	db	55
   151  00100E  38                 	db	56
   152  00100F  39                 	db	57
   153  001010  44                 	db	68
   154  001011  41                 	db	65
   155  001012  30                 	db	48
   156  001013  42                 	db	66
   157  001014  43                 	db	67
   158  001015  20                 	db	32
   159  001016  00                 	db	0
   160  001017                     __end_ofgetkey@F4444:
   161                           	opt stack 0
   162  0000                     _ADCON1	set	4033
   163  0000                     _BAUDCON	set	4024
   164  0000                     _CCP1CON	set	4029
   165  0000                     _CCP2CON	set	4026
   166  0000                     _CCPR1L	set	4030
   167  0000                     _CCPR2L	set	4027
   168  0000                     _OSCCON	set	4051
   169  0000                     _PIR1bits	set	3998
   170  0000                     _PORTAbits	set	3968
   171  0000                     _PORTB	set	3969
   172  0000                     _PORTBbits	set	3969
   173  0000                     _PORTCbits	set	3970
   174  0000                     _PORTD	set	3971
   175  0000                     _PORTDbits	set	3971
   176  0000                     _PR2	set	4043
   177  0000                     _RCSTA	set	4011
   178  0000                     _SPBRG	set	4015
   179  0000                     _SPBRGH	set	4016
   180  0000                     _T2CON	set	4042
   181  0000                     _T2CONbits	set	4042
   182  0000                     _TMR2	set	4044
   183  0000                     _TRISAbits	set	3986
   184  0000                     _TRISCbits	set	3988
   185  0000                     _TRISD	set	3989
   186  0000                     _TXREG	set	4013
   187  0000                     _TXSTA	set	4012
   188  0000                     _TRMT	set	32097
   189                           
   190                           ; #config settings
   191  001017  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  006E88                     __pcinit:
   195                           	opt stack 0
   196  006E88                     start_initialization:
   197                           	opt stack 0
   198  006E88                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to BANK0 (10 bytes)
   202  006E88  EE00  F0E3         	lfsr	0,__pbssBANK0
   203  006E8C  0E0A               	movlw	10
   204  006E8E                     clear_0:
   205  006E8E  6AEE               	clrf	postinc0,c
   206  006E90  06E8               	decf	wreg,f,c
   207  006E92  E1FD               	bnz	clear_0
   208                           
   209                           ; Initialize objects allocated to BANK1 (21 bytes)
   210                           ; load TBLPTR registers with __pidataBANK1
   211  006E94  0E5F               	movlw	low __pidataBANK1
   212  006E96  6EF6               	movwf	tblptrl,c
   213  006E98  0E6B               	movlw	high __pidataBANK1
   214  006E9A  6EF7               	movwf	tblptrh,c
   215  006E9C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   216  006E9E  6EF8               	movwf	tblptru,c
   217  006EA0  EE01  F000         	lfsr	0,__pdataBANK1
   218  006EA4  EE10 F015          	lfsr	1,21
   219  006EA8                     copy_data0:
   220  006EA8  0009               	tblrd		*+
   221  006EAA  CFF5 FFEE          	movff	tablat,postinc0
   222  006EAE  50E5               	movf	postdec1,w,c
   223  006EB0  50E1               	movf	fsr1l,w,c
   224  006EB2  E1FA               	bnz	copy_data0
   225                           
   226                           ; Initialize objects allocated to BANK0 (44 bytes)
   227                           ; load TBLPTR registers with __pidataBANK0
   228  006EB4  0E12               	movlw	low __pidataBANK0
   229  006EB6  6EF6               	movwf	tblptrl,c
   230  006EB8  0E6C               	movlw	high __pidataBANK0
   231  006EBA  6EF7               	movwf	tblptrh,c
   232  006EBC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   233  006EBE  6EF8               	movwf	tblptru,c
   234  006EC0  EE00  F0B7         	lfsr	0,__pdataBANK0
   235  006EC4  EE10 F02C          	lfsr	1,44
   236  006EC8                     copy_data1:
   237  006EC8  0009               	tblrd		*+
   238  006ECA  CFF5 FFEE          	movff	tablat,postinc0
   239  006ECE  50E5               	movf	postdec1,w,c
   240  006ED0  50E1               	movf	fsr1l,w,c
   241  006ED2  E1FA               	bnz	copy_data1
   242  006ED4                     end_of_initialization:
   243                           	opt stack 0
   244  006ED4                     __end_of__initialization:
   245                           	opt stack 0
   246  006ED4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   247  006ED6  6EF8               	movwf	tblptru,c
   248  006ED8  0E10               	movlw	high __Lsmallconst
   249  006EDA  6EF7               	movwf	tblptrh,c
   250  006EDC  0100               	movlb	0
   251  006EDE  EFBA  F035         	goto	_main	;jump to C main() function
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	bssBANK0
   262  0000E3                     __pbssBANK0:
   263                           	opt stack 0
   264  0000E3                     _errno:
   265                           	opt stack 0
   266  0000E3                     	ds	2
   267  0000E5                     _wrong:
   268                           	opt stack 0
   269  0000E5                     	ds	2
   270  0000E7                     _key:
   271                           	opt stack 0
   272  0000E7                     	ds	1
   273  0000E8                     _outchar:
   274                           	opt stack 0
   275  0000E8                     	ds	1
   276  0000E9                     _p1:
   277                           	opt stack 0
   278  0000E9                     	ds	1
   279  0000EA                     _p2:
   280                           	opt stack 0
   281  0000EA                     	ds	1
   282  0000EB                     _p3:
   283                           	opt stack 0
   284  0000EB                     	ds	1
   285  0000EC                     _p4:
   286                           	opt stack 0
   287  0000EC                     	ds	1
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           tblptrl	equ	0xFF6
   291                           tablat	equ	0xFF5
   292                           postinc0	equ	0xFEE
   293                           wreg	equ	0xFE8
   294                           postdec1	equ	0xFE5
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	dataBANK0
   298  0000B7                     __pdataBANK0:
   299                           	opt stack 0
   300  0000B7                     LockMotor@F4628:
   301                           	opt stack 0
   302  0000B7                     	ds	21
   303  0000CC                     LockMotor@F4631:
   304                           	opt stack 0
   305  0000CC                     	ds	13
   306  0000D9                     LockMotor@F4638:
   307                           	opt stack 0
   308  0000D9                     	ds	10
   309                           tblptru	equ	0xFF8
   310                           tblptrh	equ	0xFF7
   311                           tblptrl	equ	0xFF6
   312                           tablat	equ	0xFF5
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	dataBANK1
   319  000100                     __pdataBANK1:
   320                           	opt stack 0
   321  000100                     _Message1:
   322                           	opt stack 0
   323  000100                     	ds	21
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           postdec1	equ	0xFE5
   331                           fsr1l	equ	0xFE1
   332                           
   333                           	psect	cstackBANK0
   334  000060                     __pcstackBANK0:
   335                           	opt stack 0
   336  000060                     ?_round:
   337                           	opt stack 0
   338  000060                     round@x:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x0
   342  000060                     	ds	3
   343  000063                     round@f:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x3
   347  000063                     	ds	3
   348  000066                     ?_setPeriodTo:
   349                           	opt stack 0
   350  000066                     setPeriodTo@FPWM:
   351                           	opt stack 0
   352                           
   353                           ; 4 bytes @ 0x6
   354  000066                     	ds	4
   355  00006A                     ??_setPeriodTo:
   356                           
   357                           ; 0 bytes @ 0xA
   358  00006A                     	ds	1
   359  00006B                     _setPeriodTo$1531:
   360                           	opt stack 0
   361                           
   362                           ; 3 bytes @ 0xB
   363  00006B                     	ds	3
   364  00006E                     setPeriodTo@TimerPrescaleBits:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0xE
   368  00006E                     	ds	2
   369  000070                     setPeriodTo@TimerPrescaleValue:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x10
   373  000070                     	ds	2
   374  000072                     setPeriodTo@FOSC:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0x12
   378  000072                     	ds	4
   379  000076                     setPeriodTo@clockSelectBits:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x16
   383  000076                     	ds	2
   384  000078                     setPeriodTo@period:
   385                           	opt stack 0
   386                           
   387                           ; 3 bytes @ 0x18
   388  000078                     	ds	3
   389  00007B                     setPeriodTo@_resolution:
   390                           	opt stack 0
   391                           
   392                           ; 4 bytes @ 0x1B
   393  00007B                     	ds	4
   394  00007F                     motorlock_unlock@Period:
   395                           	opt stack 0
   396  00007F                     motorlock_lock@Period:
   397                           	opt stack 0
   398  00007F                     motordoor_open@Period:
   399                           	opt stack 0
   400  00007F                     motordoor_close@Period:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x1F
   404  00007F                     	ds	2
   405  000081                     LockMotor@Message1:
   406                           	opt stack 0
   407                           
   408                           ; 21 bytes @ 0x21
   409  000081                     	ds	21
   410  000096                     LockMotor@openMsg:
   411                           	opt stack 0
   412                           
   413                           ; 13 bytes @ 0x36
   414  000096                     	ds	13
   415  0000A3                     LockMotor@errorMsg:
   416                           	opt stack 0
   417                           
   418                           ; 10 bytes @ 0x43
   419  0000A3                     	ds	10
   420  0000AD                     LockMotor@p1:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x4D
   424  0000AD                     	ds	1
   425  0000AE                     LockMotor@p2:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x4E
   429  0000AE                     	ds	1
   430  0000AF                     LockMotor@p3:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x4F
   434  0000AF                     	ds	1
   435  0000B0                     LockMotor@p4:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x50
   439  0000B0                     	ds	1
   440  0000B1                     LockMotor@i:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x51
   444  0000B1                     	ds	2
   445  0000B3                     LockMotor@i_594:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x53
   449  0000B3                     	ds	2
   450  0000B5                     LockMotor@i_597:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x55
   454  0000B5                     	ds	2
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	cstackCOMRAM
   465  000001                     __pcstackCOMRAM:
   466                           	opt stack 0
   467  000001                     ??_lcd_strobe:
   468  000001                     ?___lwdiv:
   469                           	opt stack 0
   470  000001                     ?___ftpack:
   471                           	opt stack 0
   472  000001                     UART_Write@data:
   473                           	opt stack 0
   474  000001                     delay_ms@i:
   475                           	opt stack 0
   476  000001                     delay@val:
   477                           	opt stack 0
   478  000001                     ___lwdiv@dividend:
   479                           	opt stack 0
   480  000001                     ___ftpack@arg:
   481                           	opt stack 0
   482  000001                     frexp@value:
   483                           	opt stack 0
   484  000001                     getkey@lookup:
   485                           	opt stack 0
   486                           
   487                           ; 18 bytes @ 0x0
   488  000001                     	ds	1
   489  000002                     ??_lcd_write_cmd:
   490  000002                     ??_lcd_write_data:
   491                           
   492                           ; 0 bytes @ 0x1
   493  000002                     	ds	1
   494  000003                     ??_delay_ms:
   495  000003                     lcd_write_cmd@cmd:
   496                           	opt stack 0
   497  000003                     lcd_write_data@data:
   498                           	opt stack 0
   499  000003                     delay@i:
   500                           	opt stack 0
   501  000003                     ___lwdiv@divisor:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2
   505  000003                     	ds	1
   506  000004                     lcd_write_cmd@temp2:
   507                           	opt stack 0
   508  000004                     lcd_write_data@temp1:
   509                           	opt stack 0
   510  000004                     ___ftpack@exp:
   511                           	opt stack 0
   512  000004                     delay_ms@j:
   513                           	opt stack 0
   514  000004                     frexp@eptr:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x3
   518  000004                     	ds	1
   519  000005                     ??_lcd_init:
   520  000005                     ___ftpack@sign:
   521                           	opt stack 0
   522  000005                     delay@j:
   523                           	opt stack 0
   524  000005                     ___lwdiv@quotient:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x4
   528  000005                     	ds	1
   529  000006                     ??___ftpack:
   530  000006                     ??_frexp:
   531  000006                     lcd_init@i:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x5
   535  000006                     	ds	1
   536  000007                     ___lwdiv@counter:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x6
   540  000007                     	ds	1
   541  000008                     delay_us@i:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x7
   545  000008                     	ds	1
   546  000009                     ?___awtoft:
   547                           	opt stack 0
   548  000009                     ?___lltoft:
   549                           	opt stack 0
   550  000009                     ___awtoft@c:
   551                           	opt stack 0
   552  000009                     ___lltoft@c:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x8
   556  000009                     	ds	1
   557  00000A                     delay_us@j:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x9
   561  00000A                     	ds	2
   562  00000C                     ___awtoft@sign:
   563                           	opt stack 0
   564  00000C                     delay_us@lower:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0xB
   568  00000C                     	ds	1
   569  00000D                     ??___lltoft:
   570                           
   571                           ; 0 bytes @ 0xC
   572  00000D                     	ds	1
   573  00000E                     ultra@Count:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0xD
   577  00000E                     	ds	3
   578  000011                     ___lltoft@exp:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x10
   582  000011                     	ds	1
   583  000012                     ?___ftdiv:
   584                           	opt stack 0
   585  000012                     ___ftdiv@f1:
   586                           	opt stack 0
   587                           
   588                           ; 3 bytes @ 0x11
   589  000012                     	ds	1
   590  000013                     getkey@keycode:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x12
   594  000013                     	ds	2
   595  000015                     ___ftdiv@f2:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x14
   599  000015                     	ds	3
   600  000018                     ??___ftdiv:
   601                           
   602                           ; 0 bytes @ 0x17
   603  000018                     	ds	3
   604  00001B                     ___ftdiv@cntr:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x1A
   608  00001B                     	ds	1
   609  00001C                     ___ftdiv@f3:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x1B
   613  00001C                     	ds	3
   614  00001F                     ___ftdiv@exp:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1E
   618  00001F                     	ds	1
   619  000020                     ___ftdiv@sign:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x1F
   623  000020                     	ds	1
   624  000021                     ?___ftadd:
   625                           	opt stack 0
   626  000021                     ___ftadd@f1:
   627                           	opt stack 0
   628                           
   629                           ; 3 bytes @ 0x20
   630  000021                     	ds	3
   631  000024                     ___ftadd@f2:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x23
   635  000024                     	ds	3
   636  000027                     ??___ftadd:
   637                           
   638                           ; 0 bytes @ 0x26
   639  000027                     	ds	3
   640  00002A                     ___ftadd@sign:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x29
   644  00002A                     	ds	1
   645  00002B                     ___ftadd@exp2:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x2A
   649  00002B                     	ds	1
   650  00002C                     ___ftadd@exp1:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x2B
   654  00002C                     	ds	1
   655  00002D                     ?___ftmul:
   656                           	opt stack 0
   657  00002D                     ___ftmul@f1:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x2C
   661  00002D                     	ds	3
   662  000030                     ___ftmul@f2:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x2F
   666  000030                     	ds	3
   667  000033                     ??___ftmul:
   668                           
   669                           ; 0 bytes @ 0x32
   670  000033                     	ds	3
   671  000036                     ___ftmul@exp:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x35
   675  000036                     	ds	1
   676  000037                     ___ftmul@f3_as_product:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x36
   680  000037                     	ds	3
   681  00003A                     ___ftmul@cntr:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x39
   685  00003A                     	ds	1
   686  00003B                     ___ftmul@sign:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x3A
   690  00003B                     	ds	1
   691  00003C                     ?___fttol:
   692                           	opt stack 0
   693  00003C                     ___fttol@f1:
   694                           	opt stack 0
   695                           
   696                           ; 3 bytes @ 0x3B
   697  00003C                     	ds	4
   698  000040                     ??___fttol:
   699                           
   700                           ; 0 bytes @ 0x3F
   701  000040                     	ds	5
   702  000045                     ___fttol@sign1:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x44
   706  000045                     	ds	1
   707  000046                     ___fttol@lval:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x45
   711  000046                     	ds	4
   712  00004A                     ___fttol@exp1:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x49
   716  00004A                     	ds	1
   717  00004B                     ?___altoft:
   718                           	opt stack 0
   719  00004B                     SetDutyCycleTo@Duty_cycle:
   720                           	opt stack 0
   721  00004B                     doorSetDutyCycleTo@Duty_cycle:
   722                           	opt stack 0
   723  00004B                     ___altoft@c:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x4A
   727  00004B                     	ds	3
   728  00004E                     SetDutyCycleTo@Period:
   729                           	opt stack 0
   730  00004E                     doorSetDutyCycleTo@Period:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x4D
   734  00004E                     	ds	1
   735  00004F                     ??___altoft:
   736                           
   737                           ; 0 bytes @ 0x4E
   738  00004F                     	ds	1
   739  000050                     ??_SetDutyCycleTo:
   740  000050                     ??_doorSetDutyCycleTo:
   741                           
   742                           ; 0 bytes @ 0x4F
   743  000050                     	ds	2
   744  000052                     _SetDutyCycleTo$1532:
   745                           	opt stack 0
   746  000052                     _doorSetDutyCycleTo$1533:
   747                           	opt stack 0
   748                           
   749                           ; 3 bytes @ 0x51
   750  000052                     	ds	1
   751  000053                     ___altoft@exp:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x52
   755  000053                     	ds	1
   756  000054                     ___altoft@sign:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x53
   760  000054                     	ds	1
   761  000055                     ?_trunc:
   762                           	opt stack 0
   763  000055                     SetDutyCycleTo@PWM10BitValue:
   764                           	opt stack 0
   765  000055                     doorSetDutyCycleTo@PWM10BitValue:
   766                           	opt stack 0
   767  000055                     trunc@x:
   768                           	opt stack 0
   769                           
   770                           ; 3 bytes @ 0x54
   771  000055                     	ds	3
   772  000058                     trunc@i:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x57
   776  000058                     	ds	3
   777  00005B                     trunc@expon:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x5A
   781  00005B                     	ds	2
   782  00005D                     ?___ftneg:
   783                           	opt stack 0
   784  00005D                     ___ftneg@f1:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x5C
   788  00005D                     	ds	3
   789  000060                     tblptru	equ	0xFF8
   790                           tblptrh	equ	0xFF7
   791                           tblptrl	equ	0xFF6
   792                           tablat	equ	0xFF5
   793                           postinc0	equ	0xFEE
   794                           wreg	equ	0xFE8
   795                           postdec1	equ	0xFE5
   796                           fsr1l	equ	0xFE1
   797                           
   798                           ; 0 bytes @ 0x5F
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 6 in file "newmain.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;		None
   809 ;; Return value:  Size  Location     Type
   810 ;;		None               void
   811 ;; Registers used:
   812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         0       0       0       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0
   821 ;;      Totals:         0       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        0 bytes
   823 ;; Hardware stack levels required when called:    7
   824 ;; This function calls:
   825 ;;		_LockMotor
   826 ;;		_buzzer
   827 ;;		_lcd_backlight_off
   828 ;;		_ultra
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834                           	psect	text0
   835  006B74                     __ptext0:
   836                           	opt stack 0
   837  006B74                     _main:
   838                           	opt stack 24
   839                           
   840                           ;newmain.c: 7: TRISAbits.TRISA0 = 1;
   841                           
   842                           ;incstack = 0
   843  006B74  8092               	bsf	3986,0,c	;volatile
   844                           
   845                           ;newmain.c: 8: ADCON1 = 0b00001111;
   846  006B76  0E0F               	movlw	15
   847  006B78  6EC1               	movwf	4033,c	;volatile
   848  006B7A                     l2588:
   849                           
   850                           ;newmain.c: 10: lcd_backlight_off();
   851  006B7A  EC9F  F035         	call	_lcd_backlight_off	;wreg free
   852                           
   853                           ;newmain.c: 11: buzzer();
   854  006B7E  ECF7  F035         	call	_buzzer	;wreg free
   855                           
   856                           ;newmain.c: 12: ultra();
   857  006B82  EC97  F039         	call	_ultra	;wreg free
   858                           
   859                           ;newmain.c: 13: LockMotor();
   860  006B86  EC44  F03D         	call	_LockMotor	;wreg free
   861  006B8A  D7F7               	goto	l2588
   862  006B8C                     __end_of_main:
   863                           	opt stack 0
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1l	equ	0xFE1
   872                           
   873 ;; *************** function _ultra *****************
   874 ;; Defined at:
   875 ;;		line 5 in file "UltraSound.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  Count           2   13[COMRAM] unsigned int 
   880 ;; Return value:  Size  Location     Type
   881 ;;		None               void
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   889 ;;      Params:         0       0       0       0       0       0       0       0       0
   890 ;;      Locals:         2       0       0       0       0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0
   892 ;;      Totals:         2       0       0       0       0       0       0       0       0
   893 ;;Total ram usage:        2 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    3
   896 ;; This function calls:
   897 ;;		_delay_ms
   898 ;;		_delay_us
   899 ;;		_lcd_backlight_off
   900 ;;		_lcd_backlight_on
   901 ;;		_lcd_init
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text1
   908  00732E                     __ptext1:
   909                           	opt stack 0
   910  00732E                     _ultra:
   911                           	opt stack 27
   912                           
   913                           ;UltraSound.c: 6: TRISAbits.TRISA1 = 1;
   914                           
   915                           ;incstack = 0
   916  00732E  8292               	bsf	3986,1,c	;volatile
   917                           
   918                           ;UltraSound.c: 7: TRISAbits.TRISA2 = 0;
   919  007330  9492               	bcf	3986,2,c	;volatile
   920                           
   921                           ;UltraSound.c: 8: TRISAbits.TRISA4 = 1;
   922  007332  8892               	bsf	3986,4,c	;volatile
   923                           
   924                           ;UltraSound.c: 9: TRISAbits.TRISA3 = 0;
   925  007334  9692               	bcf	3986,3,c	;volatile
   926                           
   927                           ;UltraSound.c: 10: ADCON1 = 0b00001111;
   928  007336  0E0F               	movlw	15
   929  007338  6EC1               	movwf	4033,c	;volatile
   930                           
   931                           ;UltraSound.c: 12: PORTAbits.RA4 = 0;
   932  00733A  9880               	bcf	3968,4,c	;volatile
   933                           
   934                           ;UltraSound.c: 14: lcd_init();
   935  00733C  ECD7  F037         	call	_lcd_init	;wreg free
   936  007340                     l2426:
   937                           
   938                           ;UltraSound.c: 17: unsigned int Count = 0;
   939  007340  0E00               	movlw	0
   940  007342  6E0F               	movwf	ultra@Count+1,c
   941  007344  0E00               	movlw	0
   942  007346  6E0E               	movwf	ultra@Count,c
   943                           
   944                           ;UltraSound.c: 20: PORTAbits.RA2 = 1;
   945  007348  8480               	bsf	3968,2,c	;volatile
   946                           
   947                           ;UltraSound.c: 21: delay_us(10);
   948  00734A  0E00               	movlw	0
   949  00734C  6E09               	movwf	delay_us@i+1,c
   950  00734E  0E0A               	movlw	10
   951  007350  6E08               	movwf	delay_us@i,c
   952  007352  EC88  F038         	call	_delay_us	;wreg free
   953                           
   954                           ;UltraSound.c: 22: PORTAbits.RA2 = 0;
   955  007356  9480               	bcf	3968,2,c	;volatile
   956                           
   957                           ;UltraSound.c: 23: delay_ms(1);
   958  007358  0E00               	movlw	0
   959  00735A  6E02               	movwf	delay_ms@i+1,c
   960  00735C  0E01               	movlw	1
   961  00735E  6E01               	movwf	delay_ms@i,c
   962  007360  EC1F  F036         	call	_delay_ms	;wreg free
   963  007364                     l95:
   964  007364  A280               	btfss	3968,1,c	;volatile
   965  007366  D7FE               	goto	l95
   966                           
   967                           ;UltraSound.c: 27: Count = 0;
   968  007368  0E00               	movlw	0
   969  00736A  6E0F               	movwf	ultra@Count+1,c
   970  00736C  0E00               	movlw	0
   971  00736E  6E0E               	movwf	ultra@Count,c
   972                           
   973                           ;UltraSound.c: 29: while ((PORTAbits.RA1 == 1) && (Count < 200)) {
   974  007370  D008               	goto	l2438
   975  007372                     l2434:
   976                           
   977                           ;UltraSound.c: 30: delay_us(58);
   978  007372  0E00               	movlw	0
   979  007374  6E09               	movwf	delay_us@i+1,c
   980  007376  0E3A               	movlw	58
   981  007378  6E08               	movwf	delay_us@i,c
   982  00737A  EC88  F038         	call	_delay_us	;wreg free
   983                           
   984                           ;UltraSound.c: 31: Count++;
   985  00737E  4A0E               	infsnz	ultra@Count,f,c
   986  007380  2A0F               	incf	ultra@Count+1,f,c
   987  007382                     l2438:
   988  007382  A280               	btfss	3968,1,c	;volatile
   989  007384  D006               	goto	l102
   990  007386  500F               	movf	ultra@Count+1,w,c
   991  007388  E104               	bnz	l102
   992  00738A  0EC8               	movlw	200
   993  00738C  5C0E               	subwf	ultra@Count,w,c
   994  00738E  A0D8               	btfss	status,0,c
   995  007390  D7F0               	goto	l2434
   996  007392                     l102:
   997                           
   998                           ;UltraSound.c: 32: }
   999                           ;UltraSound.c: 34: PORTAbits.RA3 = 0;
  1000  007392  9680               	bcf	3968,3,c	;volatile
  1001                           
  1002                           ;UltraSound.c: 35: while (PORTAbits.RA4 == 1 ) {
  1003  007394  D007               	goto	l2444
  1004  007396                     l104:
  1005                           
  1006                           ;UltraSound.c: 36: PORTAbits.RA3 = 1;
  1007  007396  8680               	bsf	3968,3,c	;volatile
  1008                           
  1009                           ;UltraSound.c: 37: delay_ms(100);
  1010  007398  0E00               	movlw	0
  1011  00739A  6E02               	movwf	delay_ms@i+1,c
  1012  00739C  0E64               	movlw	100
  1013  00739E  6E01               	movwf	delay_ms@i,c
  1014  0073A0  EC1F  F036         	call	_delay_ms	;wreg free
  1015  0073A4                     l2444:
  1016  0073A4  B880               	btfsc	3968,4,c	;volatile
  1017  0073A6  D7F7               	goto	l104
  1018                           
  1019                           ;UltraSound.c: 38: }
  1020                           ;UltraSound.c: 40: if (Count <= 5) {
  1021  0073A8  500F               	movf	ultra@Count+1,w,c
  1022  0073AA  E107               	bnz	l2452
  1023  0073AC  0E06               	movlw	6
  1024  0073AE  5C0E               	subwf	ultra@Count,w,c
  1025  0073B0  B0D8               	btfsc	status,0,c
  1026  0073B2  D003               	goto	l2452
  1027                           
  1028                           ;UltraSound.c: 42: lcd_backlight_on();
  1029  0073B4  EC9D  F035         	call	_lcd_backlight_on	;wreg free
  1030                           
  1031                           ;UltraSound.c: 43: break;
  1032  0073B8  0012               	return	
  1033  0073BA                     l2452:
  1034                           
  1035                           ;UltraSound.c: 45: lcd_backlight_off();
  1036  0073BA  EC9F  F035         	call	_lcd_backlight_off	;wreg free
  1037                           
  1038                           ;UltraSound.c: 46: }
  1039                           ;UltraSound.c: 47: delay_ms(100);
  1040  0073BE  0E00               	movlw	0
  1041  0073C0  6E02               	movwf	delay_ms@i+1,c
  1042  0073C2  0E64               	movlw	100
  1043  0073C4  6E01               	movwf	delay_ms@i,c
  1044  0073C6  EC1F  F036         	call	_delay_ms	;wreg free
  1045  0073CA  D7BA               	goto	l2426
  1046  0073CC                     __end_of_ultra:
  1047                           	opt stack 0
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function _lcd_backlight_off *****************
  1059 ;; Defined at:
  1060 ;;		line 23 in file "lcd_utilities.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;		None               void
  1067 ;; Registers used:
  1068 ;;		None
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1074 ;;      Params:         0       0       0       0       0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1077 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1078 ;;Total ram usage:        0 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_ultra
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text2
  1089  006B3E                     __ptext2:
  1090                           	opt stack 0
  1091  006B3E                     _lcd_backlight_off:
  1092                           	opt stack 29
  1093                           
  1094                           ;lcd_utilities.c: 24: PORTDbits.RD7 = 0;
  1095                           
  1096                           ;incstack = 0
  1097  006B3E  9E83               	bcf	3971,7,c	;volatile
  1098  006B40  0012               	return		;funcret
  1099  006B42                     __end_of_lcd_backlight_off:
  1100                           	opt stack 0
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           status	equ	0xFD8
  1110                           
  1111 ;; *************** function _delay_us *****************
  1112 ;; Defined at:
  1113 ;;		line 17 in file "delays_utilities.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  i               2    7[COMRAM] unsigned int 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  lower           2   11[COMRAM] unsigned int 
  1118 ;;  j               2    9[COMRAM] unsigned int 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;		None               void
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1128 ;;      Params:         2       0       0       0       0       0       0       0       0
  1129 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1131 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1132 ;;Total ram usage:        6 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    1
  1135 ;; This function calls:
  1136 ;;		___lwdiv
  1137 ;; This function is called by:
  1138 ;;		_ultra
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text3
  1143  007110                     __ptext3:
  1144                           	opt stack 0
  1145  007110                     _delay_us:
  1146                           	opt stack 28
  1147                           
  1148                           ;delays_utilities.c: 19: unsigned int j,lower;
  1149                           ;delays_utilities.c: 22: lower = i;
  1150                           
  1151                           ;incstack = 0
  1152  007110  C008  F00C         	movff	delay_us@i,delay_us@lower
  1153  007114  C009  F00D         	movff	delay_us@i+1,delay_us@lower+1
  1154                           
  1155                           ;delays_utilities.c: 23: lower = lower/20;
  1156  007118  C00C  F001         	movff	delay_us@lower,___lwdiv@dividend
  1157  00711C  C00D  F002         	movff	delay_us@lower+1,___lwdiv@dividend+1
  1158  007120  0E00               	movlw	0
  1159  007122  6E04               	movwf	___lwdiv@divisor+1,c
  1160  007124  0E14               	movlw	20
  1161  007126  6E03               	movwf	___lwdiv@divisor,c
  1162  007128  EC1B  F037         	call	___lwdiv	;wreg free
  1163  00712C  C001  F00C         	movff	?___lwdiv,delay_us@lower
  1164  007130  C002  F00D         	movff	?___lwdiv+1,delay_us@lower+1
  1165                           
  1166                           ;delays_utilities.c: 25: if (i< 5)
  1167  007134  5009               	movf	delay_us@i+1,w,c
  1168  007136  E104               	bnz	l2366
  1169  007138  0E05               	movlw	5
  1170  00713A  5C08               	subwf	delay_us@i,w,c
  1171  00713C  A0D8               	btfss	status,0,c
  1172  00713E  0012               	return	
  1173  007140                     l2366:
  1174                           
  1175                           ;delays_utilities.c: 29: else
  1176                           ;delays_utilities.c: 30: if(i<10)
  1177  007140  5009               	movf	delay_us@i+1,w,c
  1178  007142  E108               	bnz	l2370
  1179  007144  0E0A               	movlw	10
  1180  007146  5C08               	subwf	delay_us@i,w,c
  1181  007148  B0D8               	btfsc	status,0,c
  1182  00714A  D004               	goto	l2370
  1183                           
  1184                           ;delays_utilities.c: 31: {
  1185                           ;delays_utilities.c: 32: _delay((unsigned long)((7)*(48000000/4000000.0)));
  1186  00714C  0E1C               	movlw	28
  1187  00714E                     u2077:
  1188  00714E  2EE8               	decfsz	wreg,f,c
  1189  007150  D7FE               	goto	u2077
  1190                           
  1191                           ;delays_utilities.c: 33: }
  1192  007152  0012               	return	
  1193  007154                     l2370:
  1194                           
  1195                           ;delays_utilities.c: 34: else if(i< 20)
  1196  007154  5009               	movf	delay_us@i+1,w,c
  1197  007156  E108               	bnz	l2374
  1198  007158  0E14               	movlw	20
  1199  00715A  5C08               	subwf	delay_us@i,w,c
  1200  00715C  B0D8               	btfsc	status,0,c
  1201  00715E  D004               	goto	l2374
  1202                           
  1203                           ;delays_utilities.c: 35: {
  1204                           ;delays_utilities.c: 36: _delay((unsigned long)((15)*(48000000/4000000.0)));
  1205  007160  0E3C               	movlw	60
  1206  007162                     u2087:
  1207  007162  2EE8               	decfsz	wreg,f,c
  1208  007164  D7FE               	goto	u2087
  1209                           
  1210                           ;delays_utilities.c: 37: }
  1211  007166  0012               	return	
  1212  007168                     l2374:
  1213                           
  1214                           ;delays_utilities.c: 38: else
  1215                           ;delays_utilities.c: 39: for(j=0;j<lower;j++)_delay((unsigned long)((20)*(48000000/40000
      +                          00.0)));
  1216  007168  0E00               	movlw	0
  1217  00716A  6E0B               	movwf	delay_us@j+1,c
  1218  00716C  0E00               	movlw	0
  1219  00716E  6E0A               	movwf	delay_us@j,c
  1220  007170  D005               	goto	l73
  1221  007172                     l2376:
  1222  007172  0E50               	movlw	80
  1223  007174                     u2097:
  1224  007174  2EE8               	decfsz	wreg,f,c
  1225  007176  D7FE               	goto	u2097
  1226  007178  4A0A               	infsnz	delay_us@j,f,c
  1227  00717A  2A0B               	incf	delay_us@j+1,f,c
  1228  00717C                     l73:
  1229  00717C  500C               	movf	delay_us@lower,w,c
  1230  00717E  5C0A               	subwf	delay_us@j,w,c
  1231  007180  500D               	movf	delay_us@lower+1,w,c
  1232  007182  580B               	subwfb	delay_us@j+1,w,c
  1233  007184  B0D8               	btfsc	status,0,c
  1234  007186  0012               	return	
  1235  007188  D7F4               	goto	l2376
  1236  00718A                     __end_of_delay_us:
  1237                           	opt stack 0
  1238                           tblptru	equ	0xFF8
  1239                           tblptrh	equ	0xFF7
  1240                           tblptrl	equ	0xFF6
  1241                           tablat	equ	0xFF5
  1242                           postinc0	equ	0xFEE
  1243                           wreg	equ	0xFE8
  1244                           postdec1	equ	0xFE5
  1245                           fsr1l	equ	0xFE1
  1246                           status	equ	0xFD8
  1247                           
  1248 ;; *************** function ___lwdiv *****************
  1249 ;; Defined at:
  1250 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  dividend        2    0[COMRAM] unsigned int 
  1253 ;;  divisor         2    2[COMRAM] unsigned int 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  quotient        2    4[COMRAM] unsigned int 
  1256 ;;  counter         1    6[COMRAM] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  2    0[COMRAM] unsigned int 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1266 ;;      Params:         4       0       0       0       0       0       0       0       0
  1267 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1268 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1269 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1270 ;;Total ram usage:        7 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_delay_us
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text4
  1280  006E36                     __ptext4:
  1281                           	opt stack 0
  1282  006E36                     ___lwdiv:
  1283                           	opt stack 28
  1284                           
  1285                           ;incstack = 0
  1286  006E36  0E00               	movlw	0
  1287  006E38  6E06               	movwf	___lwdiv@quotient+1,c
  1288  006E3A  0E00               	movlw	0
  1289  006E3C  6E05               	movwf	___lwdiv@quotient,c
  1290  006E3E  5003               	movf	___lwdiv@divisor,w,c
  1291  006E40  1004               	iorwf	___lwdiv@divisor+1,w,c
  1292  006E42  B4D8               	btfsc	status,2,c
  1293  006E44  D01C               	goto	l749
  1294  006E46  0E01               	movlw	1
  1295  006E48  6E07               	movwf	___lwdiv@counter,c
  1296  006E4A  D004               	goto	l2258
  1297  006E4C                     l2256:
  1298  006E4C  90D8               	bcf	status,0,c
  1299  006E4E  3603               	rlcf	___lwdiv@divisor,f,c
  1300  006E50  3604               	rlcf	___lwdiv@divisor+1,f,c
  1301  006E52  2A07               	incf	___lwdiv@counter,f,c
  1302  006E54                     l2258:
  1303  006E54  AE04               	btfss	___lwdiv@divisor+1,7,c
  1304  006E56  D7FA               	goto	l2256
  1305  006E58                     l2260:
  1306  006E58  90D8               	bcf	status,0,c
  1307  006E5A  3605               	rlcf	___lwdiv@quotient,f,c
  1308  006E5C  3606               	rlcf	___lwdiv@quotient+1,f,c
  1309  006E5E  5003               	movf	___lwdiv@divisor,w,c
  1310  006E60  5C01               	subwf	___lwdiv@dividend,w,c
  1311  006E62  5004               	movf	___lwdiv@divisor+1,w,c
  1312  006E64  5802               	subwfb	___lwdiv@dividend+1,w,c
  1313  006E66  A0D8               	btfss	status,0,c
  1314  006E68  D005               	goto	l2268
  1315  006E6A  5003               	movf	___lwdiv@divisor,w,c
  1316  006E6C  5E01               	subwf	___lwdiv@dividend,f,c
  1317  006E6E  5004               	movf	___lwdiv@divisor+1,w,c
  1318  006E70  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1319  006E72  8005               	bsf	___lwdiv@quotient,0,c
  1320  006E74                     l2268:
  1321  006E74  90D8               	bcf	status,0,c
  1322  006E76  3204               	rrcf	___lwdiv@divisor+1,f,c
  1323  006E78  3203               	rrcf	___lwdiv@divisor,f,c
  1324  006E7A  2E07               	decfsz	___lwdiv@counter,f,c
  1325  006E7C  D7ED               	goto	l2260
  1326  006E7E                     l749:
  1327  006E7E  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1328  006E82  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1329  006E86  0012               	return		;funcret
  1330  006E88                     __end_of___lwdiv:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1l	equ	0xFE1
  1340                           status	equ	0xFD8
  1341                           
  1342 ;; *************** function _buzzer *****************
  1343 ;; Defined at:
  1344 ;;		line 6 in file "butbuzz.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  2  319[None  ] int 
  1351 ;; Registers used:
  1352 ;;		wreg, status,2, status,0, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0
  1359 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1361 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1362 ;;Total ram usage:        0 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		_delay_ms
  1367 ;; This function is called by:
  1368 ;;		_main
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text5
  1373  006BEE                     __ptext5:
  1374                           	opt stack 0
  1375  006BEE                     _buzzer:
  1376                           	opt stack 29
  1377                           
  1378                           ;butbuzz.c: 8: TRISAbits.TRISA4 = 1;
  1379                           
  1380                           ;incstack = 0
  1381  006BEE  8892               	bsf	3986,4,c	;volatile
  1382                           
  1383                           ;butbuzz.c: 9: TRISAbits.TRISA3 = 0;
  1384  006BF0  9692               	bcf	3986,3,c	;volatile
  1385                           
  1386                           ;butbuzz.c: 10: ADCON1 = 0b00001111;
  1387  006BF2  0E0F               	movlw	15
  1388  006BF4  6EC1               	movwf	4033,c	;volatile
  1389                           
  1390                           ;butbuzz.c: 12: PORTAbits.RA4 = 0;
  1391  006BF6  9880               	bcf	3968,4,c	;volatile
  1392                           
  1393                           ;butbuzz.c: 15: PORTAbits.RA3 = 0;
  1394                           
  1395                           ;butbuzz.c: 14: while(1){
  1396  006BF8  9680               	bcf	3968,3,c	;volatile
  1397                           
  1398                           ;butbuzz.c: 16: while (PORTAbits.RA4 == 1 ) {
  1399  006BFA  D008               	goto	l341
  1400  006BFC                     l342:
  1401                           
  1402                           ;butbuzz.c: 17: PORTAbits.RA3 = 1;
  1403  006BFC  8680               	bsf	3968,3,c	;volatile
  1404                           
  1405                           ;butbuzz.c: 18: delay_ms(100);
  1406  006BFE  0E00               	movlw	0
  1407  006C00  6E02               	movwf	delay_ms@i+1,c
  1408  006C02  0E64               	movlw	100
  1409  006C04  6E01               	movwf	delay_ms@i,c
  1410  006C06  EC1F  F036         	call	_delay_ms	;wreg free
  1411                           
  1412                           ;butbuzz.c: 19: break;
  1413  006C0A  0012               	return	
  1414  006C0C                     l341:
  1415  006C0C  A880               	btfss	3968,4,c	;volatile
  1416  006C0E  0012               	return	
  1417  006C10  D7F5               	goto	l342
  1418  006C12                     __end_of_buzzer:
  1419                           	opt stack 0
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function _LockMotor *****************
  1431 ;; Defined at:
  1432 ;;		line 43 in file "LockMotor.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;  i               2   85[BANK0 ] int 
  1437 ;;  i               2   83[BANK0 ] int 
  1438 ;;  errorMsg       10   67[BANK0 ] unsigned char [10]
  1439 ;;  openMsg        13   54[BANK0 ] unsigned char [13]
  1440 ;;  i               2   81[BANK0 ] int 
  1441 ;;  Message1       21   33[BANK0 ] unsigned char [21]
  1442 ;;  p4              1   80[BANK0 ] unsigned char 
  1443 ;;  p3              1   79[BANK0 ] unsigned char 
  1444 ;;  p2              1   78[BANK0 ] unsigned char 
  1445 ;;  p1              1   77[BANK0 ] unsigned char 
  1446 ;;  key             1    0        unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;		None               void
  1449 ;; Registers used:
  1450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1456 ;;      Params:         0       0       0       0       0       0       0       0       0
  1457 ;;      Locals:         0      54       0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1459 ;;      Totals:         0      54       0       0       0       0       0       0       0
  1460 ;;Total ram usage:       54 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    6
  1463 ;; This function calls:
  1464 ;;		_UART_Init
  1465 ;;		_UART_Write
  1466 ;;		_delay_ms
  1467 ;;		_getkey
  1468 ;;		_lcd_backlight_on
  1469 ;;		_lcd_init
  1470 ;;		_lcd_write_cmd
  1471 ;;		_lcd_write_data
  1472 ;;		_motordoor_close
  1473 ;;		_motordoor_open
  1474 ;;		_motorlock_lock
  1475 ;;		_motorlock_unlock
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text6
  1482  007A88                     __ptext6:
  1483                           	opt stack 0
  1484  007A88                     _LockMotor:
  1485                           	opt stack 24
  1486                           
  1487                           ;LockMotor.c: 44: TRISAbits.TRISA0 = 1;
  1488                           
  1489                           ;incstack = 0
  1490  007A88  8092               	bsf	3986,0,c	;volatile
  1491                           
  1492                           ;LockMotor.c: 45: ADCON1 = 0b00001111;
  1493  007A8A  0E0F               	movlw	15
  1494  007A8C  6EC1               	movwf	4033,c	;volatile
  1495                           
  1496                           ;LockMotor.c: 46: unsigned char key, p1, p2, p3, p4;
  1497                           ;LockMotor.c: 49: lcd_init();
  1498  007A8E  ECD7  F037         	call	_lcd_init	;wreg free
  1499                           
  1500                           ;LockMotor.c: 50: UART_Init();
  1501  007A92  ECC6  F035         	call	_UART_Init	;wreg free
  1502                           
  1503                           ;LockMotor.c: 53: lcd_backlight_on();
  1504  007A96  EC9D  F035         	call	_lcd_backlight_on	;wreg free
  1505  007A9A                     l197:
  1506                           
  1507                           ;LockMotor.c: 56: lcd_write_cmd(0x01);
  1508  007A9A  0E01               	movlw	1
  1509  007A9C  EC9F  F037         	call	_lcd_write_cmd
  1510                           
  1511                           ;LockMotor.c: 59: lcd_write_cmd(0x80);
  1512  007AA0  0E80               	movlw	128
  1513  007AA2  EC9F  F037         	call	_lcd_write_cmd
  1514                           
  1515                           ;LockMotor.c: 60: char Message1[] = "Enter PIN number :  ";
  1516  007AA6  EE20  F0B7         	lfsr	2,LockMotor@F4628
  1517  007AAA  EE10  F081         	lfsr	1,LockMotor@Message1
  1518  007AAE  0E14               	movlw	20
  1519  007AB0                     u1921:
  1520  007AB0  CFDB FFE3          	movff	plusw2,plusw1
  1521  007AB4  06E8               	decf	wreg,f,c
  1522  007AB6  E2FC               	bc	u1921
  1523                           
  1524                           ;LockMotor.c: 61: for (int i = 0; Message1[i] != '\0'; i++) {
  1525  007AB8  0E00               	movlw	0
  1526  007ABA  0100               	movlb	0	; () banked
  1527  007ABC  6FB2               	movwf	(LockMotor@i+1)& (0+255),b
  1528  007ABE  0E00               	movlw	0
  1529  007AC0  6FB1               	movwf	LockMotor@i& (0+255),b
  1530  007AC2  D00E               	goto	l2474
  1531  007AC4                     l2470:
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;LockMotor.c: 62: lcd_write_data(Message1[i]);
  1535  007AC4  0E81               	movlw	low LockMotor@Message1
  1536  007AC6  0100               	movlb	0	; () banked
  1537  007AC8  25B1               	addwf	LockMotor@i& (0+255),w,b
  1538  007ACA  6ED9               	movwf	fsr2l,c
  1539  007ACC  0E00               	movlw	high LockMotor@Message1
  1540  007ACE  0100               	movlb	0	; () banked
  1541  007AD0  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
  1542  007AD2  6EDA               	movwf	fsr2h,c
  1543  007AD4  50DF               	movf	indf2,w,c
  1544  007AD6  EC4D  F039         	call	_lcd_write_data
  1545  007ADA  0100               	movlb	0	; () banked
  1546  007ADC  4BB1               	infsnz	LockMotor@i& (0+255),f,b
  1547  007ADE  2BB2               	incf	(LockMotor@i+1)& (0+255),f,b
  1548  007AE0                     l2474:
  1549                           
  1550                           ; BSR set to: 0
  1551  007AE0  0E81               	movlw	low LockMotor@Message1
  1552  007AE2  0100               	movlb	0	; () banked
  1553  007AE4  25B1               	addwf	LockMotor@i& (0+255),w,b
  1554  007AE6  6ED9               	movwf	fsr2l,c
  1555  007AE8  0E00               	movlw	high LockMotor@Message1
  1556  007AEA  0100               	movlb	0	; () banked
  1557  007AEC  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
  1558  007AEE  6EDA               	movwf	fsr2h,c
  1559  007AF0  50DF               	movf	indf2,w,c
  1560  007AF2  A4D8               	btfss	status,2,c
  1561  007AF4  D7E7               	goto	l2470
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;LockMotor.c: 63: }
  1565                           ;LockMotor.c: 66: lcd_write_cmd(0xC0);
  1566                           
  1567                           ; BSR set to: 0
  1568  007AF6  0EC0               	movlw	192
  1569  007AF8  EC9F  F037         	call	_lcd_write_cmd
  1570                           
  1571                           ;LockMotor.c: 67: p1 = getkey(); lcd_write_data('*');
  1572  007AFC  EC39  F036         	call	_getkey	;wreg free
  1573  007B00  0100               	movlb	0	; () banked
  1574  007B02  6FAD               	movwf	LockMotor@p1& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577  007B04  0E2A               	movlw	42
  1578  007B06  EC4D  F039         	call	_lcd_write_data
  1579                           
  1580                           ;LockMotor.c: 68: p2 = getkey(); lcd_write_data('*');
  1581  007B0A  EC39  F036         	call	_getkey	;wreg free
  1582  007B0E  0100               	movlb	0	; () banked
  1583  007B10  6FAE               	movwf	LockMotor@p2& (0+255),b
  1584                           
  1585                           ; BSR set to: 0
  1586  007B12  0E2A               	movlw	42
  1587  007B14  EC4D  F039         	call	_lcd_write_data
  1588                           
  1589                           ;LockMotor.c: 69: p3 = getkey(); lcd_write_data('*');
  1590  007B18  EC39  F036         	call	_getkey	;wreg free
  1591  007B1C  0100               	movlb	0	; () banked
  1592  007B1E  6FAF               	movwf	LockMotor@p3& (0+255),b
  1593  007B20  0E2A               	movlw	42
  1594  007B22  EC4D  F039         	call	_lcd_write_data
  1595                           
  1596                           ;LockMotor.c: 70: p4 = getkey(); lcd_write_data('*');
  1597  007B26  EC39  F036         	call	_getkey	;wreg free
  1598  007B2A  0100               	movlb	0	; () banked
  1599  007B2C  6FB0               	movwf	LockMotor@p4& (0+255),b
  1600                           
  1601                           ; BSR set to: 0
  1602  007B2E  0E2A               	movlw	42
  1603  007B30  EC4D  F039         	call	_lcd_write_data
  1604                           
  1605                           ;LockMotor.c: 73: if (p1 == '4' && p2 == '5' && p3 == '5' && p4 == '0') {
  1606  007B34  0E34               	movlw	52
  1607  007B36  0100               	movlb	0	; () banked
  1608  007B38  19AD               	xorwf	LockMotor@p1& (0+255),w,b
  1609  007B3A  A4D8               	btfss	status,2,c
  1610  007B3C  D057               	goto	l2526
  1611                           
  1612                           ; BSR set to: 0
  1613  007B3E  0E35               	movlw	53
  1614  007B40  0100               	movlb	0	; () banked
  1615  007B42  19AE               	xorwf	LockMotor@p2& (0+255),w,b
  1616  007B44  A4D8               	btfss	status,2,c
  1617  007B46  D052               	goto	l2526
  1618                           
  1619                           ; BSR set to: 0
  1620  007B48  0E35               	movlw	53
  1621  007B4A  0100               	movlb	0	; () banked
  1622  007B4C  19AF               	xorwf	LockMotor@p3& (0+255),w,b
  1623  007B4E  A4D8               	btfss	status,2,c
  1624  007B50  D04D               	goto	l2526
  1625                           
  1626                           ; BSR set to: 0
  1627  007B52  0E30               	movlw	48
  1628  007B54  0100               	movlb	0	; () banked
  1629  007B56  19B0               	xorwf	LockMotor@p4& (0+255),w,b
  1630  007B58  A4D8               	btfss	status,2,c
  1631  007B5A  D048               	goto	l2526
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;LockMotor.c: 75: lcd_write_cmd(0x01);
  1635  007B5C  0E01               	movlw	1
  1636  007B5E  EC9F  F037         	call	_lcd_write_cmd
  1637                           
  1638                           ;LockMotor.c: 76: lcd_write_cmd(0x80);
  1639  007B62  0E80               	movlw	128
  1640  007B64  EC9F  F037         	call	_lcd_write_cmd
  1641                           
  1642                           ;LockMotor.c: 77: char openMsg[] = "OPENING LOCK";
  1643  007B68  EE20  F0CC         	lfsr	2,LockMotor@F4631
  1644  007B6C  EE10  F096         	lfsr	1,LockMotor@openMsg
  1645  007B70  0E0C               	movlw	12
  1646  007B72                     u1981:
  1647  007B72  CFDB FFE3          	movff	plusw2,plusw1
  1648  007B76  06E8               	decf	wreg,f,c
  1649  007B78  E2FC               	bc	u1981
  1650                           
  1651                           ;LockMotor.c: 78: for (int i = 0; openMsg[i] != '\0'; i++) {
  1652  007B7A  0E00               	movlw	0
  1653  007B7C  0100               	movlb	0	; () banked
  1654  007B7E  6FB4               	movwf	(LockMotor@i_594+1)& (0+255),b
  1655  007B80  0E00               	movlw	0
  1656  007B82  6FB3               	movwf	LockMotor@i_594& (0+255),b
  1657  007B84  D00E               	goto	l2508
  1658  007B86                     l2504:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;LockMotor.c: 79: lcd_write_data(openMsg[i]);
  1662  007B86  0E96               	movlw	low LockMotor@openMsg
  1663  007B88  0100               	movlb	0	; () banked
  1664  007B8A  25B3               	addwf	LockMotor@i_594& (0+255),w,b
  1665  007B8C  6ED9               	movwf	fsr2l,c
  1666  007B8E  0E00               	movlw	high LockMotor@openMsg
  1667  007B90  0100               	movlb	0	; () banked
  1668  007B92  21B4               	addwfc	(LockMotor@i_594+1)& (0+255),w,b
  1669  007B94  6EDA               	movwf	fsr2h,c
  1670  007B96  50DF               	movf	indf2,w,c
  1671  007B98  EC4D  F039         	call	_lcd_write_data
  1672  007B9C  0100               	movlb	0	; () banked
  1673  007B9E  4BB3               	infsnz	LockMotor@i_594& (0+255),f,b
  1674  007BA0  2BB4               	incf	(LockMotor@i_594+1)& (0+255),f,b
  1675  007BA2                     l2508:
  1676                           
  1677                           ; BSR set to: 0
  1678  007BA2  0E96               	movlw	low LockMotor@openMsg
  1679  007BA4  0100               	movlb	0	; () banked
  1680  007BA6  25B3               	addwf	LockMotor@i_594& (0+255),w,b
  1681  007BA8  6ED9               	movwf	fsr2l,c
  1682  007BAA  0E00               	movlw	high LockMotor@openMsg
  1683  007BAC  0100               	movlb	0	; () banked
  1684  007BAE  21B4               	addwfc	(LockMotor@i_594+1)& (0+255),w,b
  1685  007BB0  6EDA               	movwf	fsr2h,c
  1686  007BB2  50DF               	movf	indf2,w,c
  1687  007BB4  A4D8               	btfss	status,2,c
  1688  007BB6  D7E7               	goto	l2504
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;LockMotor.c: 80: }
  1692                           ;LockMotor.c: 81: delay_ms(1000);
  1693                           
  1694                           ; BSR set to: 0
  1695  007BB8  0E03               	movlw	3
  1696  007BBA  6E02               	movwf	delay_ms@i+1,c
  1697  007BBC  0EE8               	movlw	232
  1698  007BBE  6E01               	movwf	delay_ms@i,c
  1699  007BC0  EC1F  F036         	call	_delay_ms	;wreg free
  1700                           
  1701                           ;LockMotor.c: 82: motorlock_unlock();
  1702  007BC4  ECF7  F036         	call	_motorlock_unlock	;wreg free
  1703                           
  1704                           ;LockMotor.c: 83: motordoor_open();
  1705  007BC8  ECAF  F036         	call	_motordoor_open	;wreg free
  1706                           
  1707                           ;LockMotor.c: 84: lcd_write_cmd(0x01);
  1708  007BCC  0E01               	movlw	1
  1709  007BCE  EC9F  F037         	call	_lcd_write_cmd
  1710  007BD2                     l2516:
  1711                           
  1712                           ;LockMotor.c: 86: if (PORTAbits.RA0 == 0) {
  1713  007BD2  A080               	btfss	3968,0,c	;volatile
  1714  007BD4  D7FE               	goto	l2516
  1715                           
  1716                           ;LockMotor.c: 90: motordoor_close();
  1717                           
  1718                           ;LockMotor.c: 89: } else {
  1719  007BD6  EC8B  F036         	call	_motordoor_close	;wreg free
  1720                           
  1721                           ;LockMotor.c: 91: motorlock_lock();
  1722  007BDA  ECD3  F036         	call	_motorlock_lock	;wreg free
  1723                           
  1724                           ;LockMotor.c: 92: delay_ms(1000);
  1725  007BDE  0E03               	movlw	3
  1726  007BE0  6E02               	movwf	delay_ms@i+1,c
  1727  007BE2  0EE8               	movlw	232
  1728  007BE4  6E01               	movwf	delay_ms@i,c
  1729  007BE6  EC1F  F036         	call	_delay_ms	;wreg free
  1730                           
  1731                           ;LockMotor.c: 93: break;
  1732  007BEA  0012               	return	
  1733  007BEC                     l2526:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;LockMotor.c: 101: wrong++;
  1737  007BEC  0100               	movlb	0	; () banked
  1738  007BEE  4BE5               	infsnz	_wrong& (0+255),f,b
  1739  007BF0  2BE6               	incf	(_wrong+1)& (0+255),f,b
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;LockMotor.c: 102: lcd_write_cmd(0x01);
  1743  007BF2  0E01               	movlw	1
  1744  007BF4  EC9F  F037         	call	_lcd_write_cmd
  1745                           
  1746                           ;LockMotor.c: 103: lcd_write_cmd(0x80);
  1747  007BF8  0E80               	movlw	128
  1748  007BFA  EC9F  F037         	call	_lcd_write_cmd
  1749                           
  1750                           ;LockMotor.c: 104: char errorMsg[] = "WRONG PIN";
  1751  007BFE  EE20  F0D9         	lfsr	2,LockMotor@F4638
  1752  007C02  EE10  F0A3         	lfsr	1,LockMotor@errorMsg
  1753  007C06  0E09               	movlw	9
  1754  007C08                     u2011:
  1755  007C08  CFDB FFE3          	movff	plusw2,plusw1
  1756  007C0C  06E8               	decf	wreg,f,c
  1757  007C0E  E2FC               	bc	u2011
  1758                           
  1759                           ;LockMotor.c: 105: for (int i = 0; errorMsg[i] != '\0'; i++) {
  1760  007C10  0E00               	movlw	0
  1761  007C12  0100               	movlb	0	; () banked
  1762  007C14  6FB6               	movwf	(LockMotor@i_597+1)& (0+255),b
  1763  007C16  0E00               	movlw	0
  1764  007C18  6FB5               	movwf	LockMotor@i_597& (0+255),b
  1765  007C1A  D00E               	goto	l2540
  1766  007C1C                     l2536:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;LockMotor.c: 106: lcd_write_data(errorMsg[i]);
  1770  007C1C  0EA3               	movlw	low LockMotor@errorMsg
  1771  007C1E  0100               	movlb	0	; () banked
  1772  007C20  25B5               	addwf	LockMotor@i_597& (0+255),w,b
  1773  007C22  6ED9               	movwf	fsr2l,c
  1774  007C24  0E00               	movlw	high LockMotor@errorMsg
  1775  007C26  0100               	movlb	0	; () banked
  1776  007C28  21B6               	addwfc	(LockMotor@i_597+1)& (0+255),w,b
  1777  007C2A  6EDA               	movwf	fsr2h,c
  1778  007C2C  50DF               	movf	indf2,w,c
  1779  007C2E  EC4D  F039         	call	_lcd_write_data
  1780  007C32  0100               	movlb	0	; () banked
  1781  007C34  4BB5               	infsnz	LockMotor@i_597& (0+255),f,b
  1782  007C36  2BB6               	incf	(LockMotor@i_597+1)& (0+255),f,b
  1783  007C38                     l2540:
  1784                           
  1785                           ; BSR set to: 0
  1786  007C38  0EA3               	movlw	low LockMotor@errorMsg
  1787  007C3A  0100               	movlb	0	; () banked
  1788  007C3C  25B5               	addwf	LockMotor@i_597& (0+255),w,b
  1789  007C3E  6ED9               	movwf	fsr2l,c
  1790  007C40  0E00               	movlw	high LockMotor@errorMsg
  1791  007C42  0100               	movlb	0	; () banked
  1792  007C44  21B6               	addwfc	(LockMotor@i_597+1)& (0+255),w,b
  1793  007C46  6EDA               	movwf	fsr2h,c
  1794  007C48  50DF               	movf	indf2,w,c
  1795  007C4A  A4D8               	btfss	status,2,c
  1796  007C4C  D7E7               	goto	l2536
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;LockMotor.c: 107: }
  1800                           ;LockMotor.c: 108: lcd_write_data(wrong);
  1801                           
  1802                           ; BSR set to: 0
  1803  007C4E  0100               	movlb	0	; () banked
  1804  007C50  51E5               	movf	_wrong& (0+255),w,b
  1805  007C52  EC4D  F039         	call	_lcd_write_data
  1806                           
  1807                           ;LockMotor.c: 110: delay_ms(2000);
  1808  007C56  0E07               	movlw	7
  1809  007C58  6E02               	movwf	delay_ms@i+1,c
  1810  007C5A  0ED0               	movlw	208
  1811  007C5C  6E01               	movwf	delay_ms@i,c
  1812  007C5E  EC1F  F036         	call	_delay_ms	;wreg free
  1813                           
  1814                           ;LockMotor.c: 113: }
  1815                           ;LockMotor.c: 115: if (wrong >= 3) {
  1816  007C62  0100               	movlb	0	; () banked
  1817  007C64  BFE6               	btfsc	(_wrong+1)& (0+255),7,b
  1818  007C66  D719               	goto	l197
  1819  007C68  0100               	movlb	0	; () banked
  1820  007C6A  51E6               	movf	(_wrong+1)& (0+255),w,b
  1821  007C6C  E105               	bnz	u2030
  1822  007C6E  0E03               	movlw	3
  1823  007C70  0100               	movlb	0	; () banked
  1824  007C72  5DE5               	subwf	_wrong& (0+255),w,b
  1825  007C74  A0D8               	btfss	status,0,c
  1826  007C76  D711               	goto	l197
  1827  007C78                     u2030:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;LockMotor.c: 117: UART_Write('1');
  1831  007C78  0E31               	movlw	49
  1832  007C7A  ECA9  F035         	call	_UART_Write
  1833  007C7E  D70D               	goto	l197
  1834  007C80                     __end_of_LockMotor:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           plusw1	equ	0xFE3
  1844                           fsr1l	equ	0xFE1
  1845                           indf2	equ	0xFDF
  1846                           plusw2	equ	0xFDB
  1847                           fsr2h	equ	0xFDA
  1848                           fsr2l	equ	0xFD9
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _motorlock_unlock *****************
  1852 ;; Defined at:
  1853 ;;		line 94 in file "MotorFunction.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  Period          2   31[BANK0 ] int 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  2  161[None  ] int 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1867 ;;      Params:         0       0       0       0       0       0       0       0       0
  1868 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1870 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1871 ;;Total ram usage:        2 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    5
  1874 ;; This function calls:
  1875 ;;		_PWM_Init
  1876 ;;		_SetDutyCycleTo
  1877 ;;		_delay
  1878 ;;		_setPeriodTo
  1879 ;; This function is called by:
  1880 ;;		_LockMotor
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text7
  1885  006DEE                     __ptext7:
  1886                           	opt stack 0
  1887  006DEE                     _motorlock_unlock:
  1888                           	opt stack 24
  1889                           
  1890                           ;MotorFunction.c: 95: int Period;
  1891                           ;MotorFunction.c: 96: PWM_Init();
  1892                           
  1893                           ;incstack = 0
  1894  006DEE  ECA5  F035         	call	_PWM_Init	;wreg free
  1895                           
  1896                           ;MotorFunction.c: 97: Period = setPeriodTo(50);
  1897  006DF2  0E32               	movlw	50
  1898  006DF4  0100               	movlb	0	; () banked
  1899  006DF6  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1900  006DF8  0E00               	movlw	0
  1901  006DFA  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1902  006DFC  0E00               	movlw	0
  1903  006DFE  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1904  006E00  0E00               	movlw	0
  1905  006E02  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  1906  006E04  EC40  F03E         	call	_setPeriodTo	;wreg free
  1907  006E08  C066  F07F         	movff	?_setPeriodTo,motorlock_unlock@Period
  1908  006E0C  C067  F080         	movff	?_setPeriodTo+1,motorlock_unlock@Period+1
  1909                           
  1910                           ;MotorFunction.c: 98: SetDutyCycleTo(12.0, Period);
  1911  006E10  0E00               	movlw	0
  1912  006E12  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  1913  006E14  0E40               	movlw	64
  1914  006E16  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  1915  006E18  0E41               	movlw	65
  1916  006E1A  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  1917  006E1C  C07F  F04E         	movff	motorlock_unlock@Period,SetDutyCycleTo@Period
  1918  006E20  C080  F04F         	movff	motorlock_unlock@Period+1,SetDutyCycleTo@Period+1
  1919  006E24  ECA2  F03A         	call	_SetDutyCycleTo	;wreg free
  1920                           
  1921                           ;MotorFunction.c: 99: delay(7000);
  1922  006E28  0E1B               	movlw	27
  1923  006E2A  6E02               	movwf	delay@val+1,c
  1924  006E2C  0E58               	movlw	88
  1925  006E2E  6E01               	movwf	delay@val,c
  1926  006E30  EC54  F036         	call	_delay	;wreg free
  1927  006E34  0012               	return	
  1928  006E36                     __end_of_motorlock_unlock:
  1929                           	opt stack 0
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           plusw1	equ	0xFE3
  1938                           fsr1l	equ	0xFE1
  1939                           indf2	equ	0xFDF
  1940                           plusw2	equ	0xFDB
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _motorlock_lock *****************
  1946 ;; Defined at:
  1947 ;;		line 103 in file "MotorFunction.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  Period          2   31[BANK0 ] int 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  2   14[None  ] int 
  1954 ;; Registers used:
  1955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1961 ;;      Params:         0       0       0       0       0       0       0       0       0
  1962 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1964 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1965 ;;Total ram usage:        2 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    5
  1968 ;; This function calls:
  1969 ;;		_PWM_Init
  1970 ;;		_SetDutyCycleTo
  1971 ;;		_delay
  1972 ;;		_setPeriodTo
  1973 ;; This function is called by:
  1974 ;;		_LockMotor
  1975 ;;		_pir
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text8
  1980  006DA6                     __ptext8:
  1981                           	opt stack 0
  1982  006DA6                     _motorlock_lock:
  1983                           	opt stack 24
  1984                           
  1985                           ;MotorFunction.c: 104: int Period;
  1986                           ;MotorFunction.c: 105: PWM_Init();
  1987                           
  1988                           ;incstack = 0
  1989  006DA6  ECA5  F035         	call	_PWM_Init	;wreg free
  1990                           
  1991                           ;MotorFunction.c: 106: Period = setPeriodTo(50);
  1992  006DAA  0E32               	movlw	50
  1993  006DAC  0100               	movlb	0	; () banked
  1994  006DAE  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1995  006DB0  0E00               	movlw	0
  1996  006DB2  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1997  006DB4  0E00               	movlw	0
  1998  006DB6  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1999  006DB8  0E00               	movlw	0
  2000  006DBA  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  2001  006DBC  EC40  F03E         	call	_setPeriodTo	;wreg free
  2002  006DC0  C066  F07F         	movff	?_setPeriodTo,motorlock_lock@Period
  2003  006DC4  C067  F080         	movff	?_setPeriodTo+1,motorlock_lock@Period+1
  2004                           
  2005                           ;MotorFunction.c: 107: SetDutyCycleTo(7.0, Period);
  2006  006DC8  0E00               	movlw	0
  2007  006DCA  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  2008  006DCC  0EE0               	movlw	224
  2009  006DCE  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  2010  006DD0  0E40               	movlw	64
  2011  006DD2  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  2012  006DD4  C07F  F04E         	movff	motorlock_lock@Period,SetDutyCycleTo@Period
  2013  006DD8  C080  F04F         	movff	motorlock_lock@Period+1,SetDutyCycleTo@Period+1
  2014  006DDC  ECA2  F03A         	call	_SetDutyCycleTo	;wreg free
  2015                           
  2016                           ;MotorFunction.c: 108: delay(7000);
  2017  006DE0  0E1B               	movlw	27
  2018  006DE2  6E02               	movwf	delay@val+1,c
  2019  006DE4  0E58               	movlw	88
  2020  006DE6  6E01               	movwf	delay@val,c
  2021  006DE8  EC54  F036         	call	_delay	;wreg free
  2022  006DEC  0012               	return	
  2023  006DEE                     __end_of_motorlock_lock:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           plusw1	equ	0xFE3
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           plusw2	equ	0xFDB
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _SetDutyCycleTo *****************
  2041 ;; Defined at:
  2042 ;;		line 62 in file "MotorFunction.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;  Duty_cycle      3   74[COMRAM] float 
  2045 ;;  Period          2   77[COMRAM] int 
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;  PWM10BitValu    2   84[COMRAM] int 
  2048 ;; Return value:  Size  Location     Type
  2049 ;;		None               void
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2057 ;;      Params:         5       0       0       0       0       0       0       0       0
  2058 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2059 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2060 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2061 ;;Total ram usage:       12 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    2
  2064 ;; This function calls:
  2065 ;;		___awtoft
  2066 ;;		___ftadd
  2067 ;;		___ftdiv
  2068 ;;		___ftmul
  2069 ;;		___fttol
  2070 ;; This function is called by:
  2071 ;;		_motorlock_unlock
  2072 ;;		_motorlock_lock
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text9
  2077  007544                     __ptext9:
  2078                           	opt stack 0
  2079  007544                     _SetDutyCycleTo:
  2080                           	opt stack 26
  2081                           
  2082                           ;MotorFunction.c: 64: int PWM10BitValue;
  2083                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2084                           
  2085                           ;incstack = 0
  2086  007544  0E00               	movlw	0
  2087  007546  6E15               	movwf	___ftdiv@f2,c
  2088  007548  0EC8               	movlw	200
  2089  00754A  6E16               	movwf	___ftdiv@f2+1,c
  2090  00754C  0E42               	movlw	66
  2091  00754E  6E17               	movwf	___ftdiv@f2+2,c
  2092  007550  C04B  F012         	movff	SetDutyCycleTo@Duty_cycle,___ftdiv@f1
  2093  007554  C04C  F013         	movff	SetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  2094  007558  C04D  F014         	movff	SetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  2095  00755C  EC07  F03B         	call	___ftdiv	;wreg free
  2096  007560  C012  F030         	movff	?___ftdiv,___ftmul@f2
  2097  007564  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  2098  007568  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  2099  00756C  0E00               	movlw	0
  2100  00756E  6E24               	movwf	___ftadd@f2,c
  2101  007570  0E80               	movlw	128
  2102  007572  6E25               	movwf	___ftadd@f2+1,c
  2103  007574  0E3F               	movlw	63
  2104  007576  6E26               	movwf	___ftadd@f2+2,c
  2105  007578  C04E  F009         	movff	SetDutyCycleTo@Period,___awtoft@c
  2106  00757C  C04F  F00A         	movff	SetDutyCycleTo@Period+1,___awtoft@c+1
  2107  007580  EC6F  F036         	call	___awtoft	;wreg free
  2108  007584  C009  F021         	movff	?___awtoft,___ftadd@f1
  2109  007588  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  2110  00758C  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  2111  007590  EC6E  F03C         	call	___ftadd	;wreg free
  2112  007594  C021  F02D         	movff	?___ftadd,___ftmul@f1
  2113  007598  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  2114  00759C  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  2115  0075A0  EC7A  F03B         	call	___ftmul	;wreg free
  2116  0075A4  C02D  F052         	movff	?___ftmul,_SetDutyCycleTo$1532
  2117  0075A8  C02E  F053         	movff	?___ftmul+1,_SetDutyCycleTo$1532+1
  2118  0075AC  C02F  F054         	movff	?___ftmul+2,_SetDutyCycleTo$1532+2
  2119                           
  2120                           ;MotorFunction.c: 64: int PWM10BitValue;
  2121                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2122  0075B0  0E00               	movlw	0
  2123  0075B2  6E30               	movwf	___ftmul@f2,c
  2124  0075B4  0E80               	movlw	128
  2125  0075B6  6E31               	movwf	___ftmul@f2+1,c
  2126  0075B8  0E40               	movlw	64
  2127  0075BA  6E32               	movwf	___ftmul@f2+2,c
  2128  0075BC  C052  F02D         	movff	_SetDutyCycleTo$1532,___ftmul@f1
  2129  0075C0  C053  F02E         	movff	_SetDutyCycleTo$1532+1,___ftmul@f1+1
  2130  0075C4  C054  F02F         	movff	_SetDutyCycleTo$1532+2,___ftmul@f1+2
  2131  0075C8  EC7A  F03B         	call	___ftmul	;wreg free
  2132  0075CC  C02D  F03C         	movff	?___ftmul,___fttol@f1
  2133  0075D0  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  2134  0075D4  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  2135  0075D8  ECF4  F03B         	call	___fttol	;wreg free
  2136  0075DC  C03C  F055         	movff	?___fttol,SetDutyCycleTo@PWM10BitValue
  2137  0075E0  C03D  F056         	movff	?___fttol+1,SetDutyCycleTo@PWM10BitValue+1
  2138                           
  2139                           ;MotorFunction.c: 67: CCPR1L = (PWM10BitValue >> 2);
  2140  0075E4  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2141  0075E8  C056  F051         	movff	SetDutyCycleTo@PWM10BitValue+1,??_SetDutyCycleTo+1
  2142  0075EC  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  2143  0075EE  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  2144  0075F0  3250               	rrcf	??_SetDutyCycleTo,f,c
  2145  0075F2  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  2146  0075F4  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  2147  0075F6  3250               	rrcf	??_SetDutyCycleTo,f,c
  2148  0075F8  5050               	movf	??_SetDutyCycleTo,w,c
  2149  0075FA  6EBE               	movwf	4030,c	;volatile
  2150                           
  2151                           ;MotorFunction.c: 68: CCP1CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  2152  0075FC  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  2153  007600  0E03               	movlw	3
  2154  007602  1650               	andwf	??_SetDutyCycleTo,f,c
  2155  007604  3850               	swapf	??_SetDutyCycleTo,w,c
  2156  007606  0BF0               	andlw	240
  2157  007608  090C               	iorlw	12
  2158  00760A  6EBD               	movwf	4029,c	;volatile
  2159  00760C  0012               	return		;funcret
  2160  00760E                     __end_of_SetDutyCycleTo:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           plusw1	equ	0xFE3
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           plusw2	equ	0xFDB
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _PWM_Init *****************
  2178 ;; Defined at:
  2179 ;;		line 20 in file "MotorFunction.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;		None               void
  2186 ;; Registers used:
  2187 ;;		wreg, status,2
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2193 ;;      Params:         0       0       0       0       0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; This function calls:
  2200 ;;		Nothing
  2201 ;; This function is called by:
  2202 ;;		_motorlock_unlock
  2203 ;;		_motorlock_lock
  2204 ;;		_motor_init
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text10
  2209  006B4A                     __ptext10:
  2210                           	opt stack 0
  2211  006B4A                     _PWM_Init:
  2212                           	opt stack 28
  2213                           
  2214                           ;MotorFunction.c: 22: TRISCbits.TRISC2 = 0;
  2215                           
  2216                           ;incstack = 0
  2217  006B4A  9494               	bcf	3988,2,c	;volatile
  2218                           
  2219                           ;MotorFunction.c: 23: CCP1CON = 0x0C;
  2220  006B4C  0E0C               	movlw	12
  2221  006B4E  6EBD               	movwf	4029,c	;volatile
  2222  006B50  0012               	return		;funcret
  2223  006B52                     __end_of_PWM_Init:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           plusw1	equ	0xFE3
  2233                           fsr1l	equ	0xFE1
  2234                           indf2	equ	0xFDF
  2235                           plusw2	equ	0xFDB
  2236                           fsr2h	equ	0xFDA
  2237                           fsr2l	equ	0xFD9
  2238                           status	equ	0xFD8
  2239                           
  2240 ;; *************** function _motordoor_open *****************
  2241 ;; Defined at:
  2242 ;;		line 112 in file "MotorFunction.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;		None
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  Period          2   31[BANK0 ] int 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  2  163[None  ] int 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2256 ;;      Params:         0       0       0       0       0       0       0       0       0
  2257 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2259 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2260 ;;Total ram usage:        2 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    5
  2263 ;; This function calls:
  2264 ;;		_PWMdoor_Init
  2265 ;;		_delay
  2266 ;;		_doorSetDutyCycleTo
  2267 ;;		_setPeriodTo
  2268 ;; This function is called by:
  2269 ;;		_LockMotor
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text11
  2274  006D5E                     __ptext11:
  2275                           	opt stack 0
  2276  006D5E                     _motordoor_open:
  2277                           	opt stack 24
  2278                           
  2279                           ;MotorFunction.c: 113: int Period;
  2280                           ;MotorFunction.c: 114: PWMdoor_Init();
  2281                           
  2282                           ;incstack = 0
  2283  006D5E  ECA1  F035         	call	_PWMdoor_Init	;wreg free
  2284                           
  2285                           ;MotorFunction.c: 115: Period = setPeriodTo(50);
  2286  006D62  0E32               	movlw	50
  2287  006D64  0100               	movlb	0	; () banked
  2288  006D66  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  2289  006D68  0E00               	movlw	0
  2290  006D6A  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  2291  006D6C  0E00               	movlw	0
  2292  006D6E  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  2293  006D70  0E00               	movlw	0
  2294  006D72  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  2295  006D74  EC40  F03E         	call	_setPeriodTo	;wreg free
  2296  006D78  C066  F07F         	movff	?_setPeriodTo,motordoor_open@Period
  2297  006D7C  C067  F080         	movff	?_setPeriodTo+1,motordoor_open@Period+1
  2298                           
  2299                           ;MotorFunction.c: 116: doorSetDutyCycleTo(12.0, Period);
  2300  006D80  0E00               	movlw	0
  2301  006D82  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  2302  006D84  0E40               	movlw	64
  2303  006D86  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  2304  006D88  0E41               	movlw	65
  2305  006D8A  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  2306  006D8C  C07F  F04E         	movff	motordoor_open@Period,doorSetDutyCycleTo@Period
  2307  006D90  C080  F04F         	movff	motordoor_open@Period+1,doorSetDutyCycleTo@Period+1
  2308  006D94  EC3D  F03A         	call	_doorSetDutyCycleTo	;wreg free
  2309                           
  2310                           ;MotorFunction.c: 117: delay(7000);
  2311  006D98  0E1B               	movlw	27
  2312  006D9A  6E02               	movwf	delay@val+1,c
  2313  006D9C  0E58               	movlw	88
  2314  006D9E  6E01               	movwf	delay@val,c
  2315  006DA0  EC54  F036         	call	_delay	;wreg free
  2316  006DA4  0012               	return	
  2317  006DA6                     __end_of_motordoor_open:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           postdec1	equ	0xFE5
  2326                           plusw1	equ	0xFE3
  2327                           fsr1l	equ	0xFE1
  2328                           indf2	equ	0xFDF
  2329                           plusw2	equ	0xFDB
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function _motordoor_close *****************
  2335 ;; Defined at:
  2336 ;;		line 121 in file "MotorFunction.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;		None
  2339 ;; Auto vars:     Size  Location     Type
  2340 ;;  Period          2   31[BANK0 ] int 
  2341 ;; Return value:  Size  Location     Type
  2342 ;;                  2   12[None  ] int 
  2343 ;; Registers used:
  2344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2345 ;; Tracked objects:
  2346 ;;		On entry : 0/0
  2347 ;;		On exit  : 0/0
  2348 ;;		Unchanged: 0/0
  2349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2350 ;;      Params:         0       0       0       0       0       0       0       0       0
  2351 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2352 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2353 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2354 ;;Total ram usage:        2 bytes
  2355 ;; Hardware stack levels used:    1
  2356 ;; Hardware stack levels required when called:    5
  2357 ;; This function calls:
  2358 ;;		_PWMdoor_Init
  2359 ;;		_delay
  2360 ;;		_doorSetDutyCycleTo
  2361 ;;		_setPeriodTo
  2362 ;; This function is called by:
  2363 ;;		_LockMotor
  2364 ;;		_pir
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           	psect	text12
  2369  006D16                     __ptext12:
  2370                           	opt stack 0
  2371  006D16                     _motordoor_close:
  2372                           	opt stack 24
  2373                           
  2374                           ;MotorFunction.c: 122: int Period;
  2375                           ;MotorFunction.c: 123: PWMdoor_Init();
  2376                           
  2377                           ;incstack = 0
  2378  006D16  ECA1  F035         	call	_PWMdoor_Init	;wreg free
  2379                           
  2380                           ;MotorFunction.c: 124: Period = setPeriodTo(50);
  2381  006D1A  0E32               	movlw	50
  2382  006D1C  0100               	movlb	0	; () banked
  2383  006D1E  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  2384  006D20  0E00               	movlw	0
  2385  006D22  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  2386  006D24  0E00               	movlw	0
  2387  006D26  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  2388  006D28  0E00               	movlw	0
  2389  006D2A  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  2390  006D2C  EC40  F03E         	call	_setPeriodTo	;wreg free
  2391  006D30  C066  F07F         	movff	?_setPeriodTo,motordoor_close@Period
  2392  006D34  C067  F080         	movff	?_setPeriodTo+1,motordoor_close@Period+1
  2393                           
  2394                           ;MotorFunction.c: 126: doorSetDutyCycleTo(3.0, Period);
  2395  006D38  0E00               	movlw	0
  2396  006D3A  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  2397  006D3C  0E40               	movlw	64
  2398  006D3E  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  2399  006D40  0E40               	movlw	64
  2400  006D42  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  2401  006D44  C07F  F04E         	movff	motordoor_close@Period,doorSetDutyCycleTo@Period
  2402  006D48  C080  F04F         	movff	motordoor_close@Period+1,doorSetDutyCycleTo@Period+1
  2403  006D4C  EC3D  F03A         	call	_doorSetDutyCycleTo	;wreg free
  2404                           
  2405                           ;MotorFunction.c: 127: delay(7000);
  2406  006D50  0E1B               	movlw	27
  2407  006D52  6E02               	movwf	delay@val+1,c
  2408  006D54  0E58               	movlw	88
  2409  006D56  6E01               	movwf	delay@val,c
  2410  006D58  EC54  F036         	call	_delay	;wreg free
  2411  006D5C  0012               	return	
  2412  006D5E                     __end_of_motordoor_close:
  2413                           	opt stack 0
  2414                           tblptru	equ	0xFF8
  2415                           tblptrh	equ	0xFF7
  2416                           tblptrl	equ	0xFF6
  2417                           tablat	equ	0xFF5
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           postdec1	equ	0xFE5
  2421                           plusw1	equ	0xFE3
  2422                           fsr1l	equ	0xFE1
  2423                           indf2	equ	0xFDF
  2424                           plusw2	equ	0xFDB
  2425                           fsr2h	equ	0xFDA
  2426                           fsr2l	equ	0xFD9
  2427                           status	equ	0xFD8
  2428                           
  2429 ;; *************** function _setPeriodTo *****************
  2430 ;; Defined at:
  2431 ;;		line 32 in file "MotorFunction.c"
  2432 ;; Parameters:    Size  Location     Type
  2433 ;;  FPWM            4    6[BANK0 ] unsigned long 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  _resolution     4   27[BANK0 ] unsigned long 
  2436 ;;  FOSC            4   18[BANK0 ] unsigned long 
  2437 ;;  period          3   24[BANK0 ] float 
  2438 ;;  clockSelectB    2   22[BANK0 ] int 
  2439 ;;  TimerPrescal    2   16[BANK0 ] int 
  2440 ;;  TimerPrescal    2   14[BANK0 ] int 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  2    6[BANK0 ] int 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         0       4       0       0       0       0       0       0       0
  2451 ;;      Locals:         0      20       0       0       0       0       0       0       0
  2452 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2453 ;;      Totals:         0      25       0       0       0       0       0       0       0
  2454 ;;Total ram usage:       25 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    4
  2457 ;; This function calls:
  2458 ;;		___awtoft
  2459 ;;		___ftadd
  2460 ;;		___ftdiv
  2461 ;;		___ftmul
  2462 ;;		___fttol
  2463 ;;		___lltoft
  2464 ;;		_round
  2465 ;; This function is called by:
  2466 ;;		_motorlock_unlock
  2467 ;;		_motorlock_lock
  2468 ;;		_motordoor_open
  2469 ;;		_motordoor_close
  2470 ;;		_motor_init
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text13
  2475  007C80                     __ptext13:
  2476                           	opt stack 0
  2477  007C80                     _setPeriodTo:
  2478                           	opt stack 24
  2479                           
  2480                           ;MotorFunction.c: 34: int clockSelectBits, TimerPrescaleBits;
  2481                           ;MotorFunction.c: 35: int TimerPrescaleValue;
  2482                           ;MotorFunction.c: 36: float period;
  2483                           ;MotorFunction.c: 37: unsigned long FOSC, _resolution = 488;
  2484                           
  2485                           ;incstack = 0
  2486  007C80  0EE8               	movlw	232
  2487  007C82  0100               	movlb	0	; () banked
  2488  007C84  6F7B               	movwf	setPeriodTo@_resolution& (0+255),b
  2489  007C86  0E01               	movlw	1
  2490  007C88  6F7C               	movwf	(setPeriodTo@_resolution+1)& (0+255),b
  2491  007C8A  0E00               	movlw	0
  2492  007C8C  6F7D               	movwf	(setPeriodTo@_resolution+2)& (0+255),b
  2493  007C8E  0E00               	movlw	0
  2494  007C90  6F7E               	movwf	(setPeriodTo@_resolution+3)& (0+255),b
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;MotorFunction.c: 39: if (FPWM < 8000) {TimerPrescaleBits = 2; TimerPrescaleValue = 16;}
  2498  007C92  0100               	movlb	0	; () banked
  2499  007C94  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2500  007C96  0100               	movlb	0	; () banked
  2501  007C98  1168               	iorwf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2502  007C9A  E112               	bnz	l2170
  2503  007C9C  0E40               	movlw	64
  2504  007C9E  0100               	movlb	0	; () banked
  2505  007CA0  5D66               	subwf	setPeriodTo@FPWM& (0+255),w,b
  2506  007CA2  0E1F               	movlw	31
  2507  007CA4  0100               	movlb	0	; () banked
  2508  007CA6  5967               	subwfb	(setPeriodTo@FPWM+1)& (0+255),w,b
  2509  007CA8  B0D8               	btfsc	status,0,c
  2510  007CAA  D00A               	goto	l2170
  2511                           
  2512                           ; BSR set to: 0
  2513  007CAC  0E00               	movlw	0
  2514  007CAE  0100               	movlb	0	; () banked
  2515  007CB0  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  2516  007CB2  0E02               	movlw	2
  2517  007CB4  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  2518  007CB6  0E00               	movlw	0
  2519  007CB8  0100               	movlb	0	; () banked
  2520  007CBA  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  2521  007CBC  0E10               	movlw	16
  2522  007CBE  D009               	goto	L1
  2523  007CC0                     l2170:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;MotorFunction.c: 40: else {TimerPrescaleBits = 0; TimerPrescaleValue = 1;}
  2527  007CC0  0E00               	movlw	0
  2528  007CC2  0100               	movlb	0	; () banked
  2529  007CC4  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  2530  007CC6  0E00               	movlw	0
  2531  007CC8  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  2532  007CCA  0E00               	movlw	0
  2533  007CCC  0100               	movlb	0	; () banked
  2534  007CCE  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  2535  007CD0  0E01               	movlw	1
  2536  007CD2                     L1:
  2537  007CD2  6F70               	movwf	setPeriodTo@TimerPrescaleValue& (0+255),b
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;MotorFunction.c: 42: if (FPWM > _resolution) {clockSelectBits = 7; FOSC = 8000000;}
  2541                           
  2542                           ; BSR set to: 0
  2543  007CD4  0100               	movlb	0	; () banked
  2544  007CD6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2545  007CD8  0100               	movlb	0	; () banked
  2546  007CDA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2547  007CDC  0100               	movlb	0	; () banked
  2548  007CDE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2549  007CE0  0100               	movlb	0	; () banked
  2550  007CE2  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2551  007CE4  0100               	movlb	0	; () banked
  2552  007CE6  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2553  007CE8  0100               	movlb	0	; () banked
  2554  007CEA  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2555  007CEC  0100               	movlb	0	; () banked
  2556  007CEE  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2557  007CF0  0100               	movlb	0	; () banked
  2558  007CF2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2559  007CF4  B0D8               	btfsc	status,0,c
  2560  007CF6  D00C               	goto	l2176
  2561                           
  2562                           ; BSR set to: 0
  2563  007CF8  0E00               	movlw	0
  2564  007CFA  0100               	movlb	0	; () banked
  2565  007CFC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2566  007CFE  0E07               	movlw	7
  2567  007D00  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2568  007D02  0E00               	movlw	0
  2569  007D04  0100               	movlb	0	; () banked
  2570  007D06  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2571  007D08  0E12               	movlw	18
  2572  007D0A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2573  007D0C  0E7A               	movlw	122
  2574  007D0E  D0E3               	goto	L8
  2575  007D10                     l2176:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;MotorFunction.c: 43: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 6; FOSC = 
      +                          4000000;}
  2579  007D10  0100               	movlb	0	; () banked
  2580  007D12  90D8               	bcf	status,0,c
  2581  007D14  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2582  007D16  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2583  007D18  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2584  007D1A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2585  007D1C  0100               	movlb	0	; () banked
  2586  007D1E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2587  007D20  0100               	movlb	0	; () banked
  2588  007D22  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2589  007D24  0100               	movlb	0	; () banked
  2590  007D26  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2591  007D28  0100               	movlb	0	; () banked
  2592  007D2A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2593  007D2C  0100               	movlb	0	; () banked
  2594  007D2E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2595  007D30  0100               	movlb	0	; () banked
  2596  007D32  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2597  007D34  0100               	movlb	0	; () banked
  2598  007D36  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2599  007D38  0100               	movlb	0	; () banked
  2600  007D3A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2601  007D3C  B0D8               	btfsc	status,0,c
  2602  007D3E  D00C               	goto	l2180
  2603                           
  2604                           ; BSR set to: 0
  2605  007D40  0E00               	movlw	0
  2606  007D42  0100               	movlb	0	; () banked
  2607  007D44  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2608  007D46  0E06               	movlw	6
  2609  007D48  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2610  007D4A  0E00               	movlw	0
  2611  007D4C  0100               	movlb	0	; () banked
  2612  007D4E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2613  007D50  0E09               	movlw	9
  2614  007D52  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2615  007D54  0E3D               	movlw	61
  2616  007D56  D0BF               	goto	L8
  2617  007D58                     l2180:
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;MotorFunction.c: 44: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 5; FOSC = 
      +                          2000000;}
  2621  007D58  0100               	movlb	0	; () banked
  2622  007D5A  90D8               	bcf	status,0,c
  2623  007D5C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2624  007D5E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2625  007D60  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2626  007D62  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2627  007D64  0100               	movlb	0	; () banked
  2628  007D66  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2629  007D68  0100               	movlb	0	; () banked
  2630  007D6A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2631  007D6C  0100               	movlb	0	; () banked
  2632  007D6E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2633  007D70  0100               	movlb	0	; () banked
  2634  007D72  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2635  007D74  0100               	movlb	0	; () banked
  2636  007D76  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2637  007D78  0100               	movlb	0	; () banked
  2638  007D7A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2639  007D7C  0100               	movlb	0	; () banked
  2640  007D7E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2641  007D80  0100               	movlb	0	; () banked
  2642  007D82  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2643  007D84  B0D8               	btfsc	status,0,c
  2644  007D86  D00C               	goto	l2184
  2645                           
  2646                           ; BSR set to: 0
  2647  007D88  0E00               	movlw	0
  2648  007D8A  0100               	movlb	0	; () banked
  2649  007D8C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2650  007D8E  0E05               	movlw	5
  2651  007D90  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2652  007D92  0E80               	movlw	128
  2653  007D94  0100               	movlb	0	; () banked
  2654  007D96  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2655  007D98  0E84               	movlw	132
  2656  007D9A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2657  007D9C  0E1E               	movlw	30
  2658  007D9E  D09B               	goto	L8
  2659  007DA0                     l2184:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;MotorFunction.c: 45: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 4; FOSC = 
      +                          1000000;}
  2663  007DA0  0100               	movlb	0	; () banked
  2664  007DA2  90D8               	bcf	status,0,c
  2665  007DA4  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2666  007DA6  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2667  007DA8  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2668  007DAA  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2669  007DAC  0100               	movlb	0	; () banked
  2670  007DAE  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2671  007DB0  0100               	movlb	0	; () banked
  2672  007DB2  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2673  007DB4  0100               	movlb	0	; () banked
  2674  007DB6  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2675  007DB8  0100               	movlb	0	; () banked
  2676  007DBA  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2677  007DBC  0100               	movlb	0	; () banked
  2678  007DBE  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2679  007DC0  0100               	movlb	0	; () banked
  2680  007DC2  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2681  007DC4  0100               	movlb	0	; () banked
  2682  007DC6  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2683  007DC8  0100               	movlb	0	; () banked
  2684  007DCA  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2685  007DCC  B0D8               	btfsc	status,0,c
  2686  007DCE  D00C               	goto	l2188
  2687                           
  2688                           ; BSR set to: 0
  2689  007DD0  0E00               	movlw	0
  2690  007DD2  0100               	movlb	0	; () banked
  2691  007DD4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2692  007DD6  0E04               	movlw	4
  2693  007DD8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2694  007DDA  0E40               	movlw	64
  2695  007DDC  0100               	movlb	0	; () banked
  2696  007DDE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2697  007DE0  0E42               	movlw	66
  2698  007DE2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2699  007DE4  0E0F               	movlw	15
  2700  007DE6  D077               	goto	L8
  2701  007DE8                     l2188:
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;MotorFunction.c: 46: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 3; FOSC = 
      +                          500000;}
  2705  007DE8  0100               	movlb	0	; () banked
  2706  007DEA  90D8               	bcf	status,0,c
  2707  007DEC  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2708  007DEE  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2709  007DF0  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2710  007DF2  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2711  007DF4  0100               	movlb	0	; () banked
  2712  007DF6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2713  007DF8  0100               	movlb	0	; () banked
  2714  007DFA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2715  007DFC  0100               	movlb	0	; () banked
  2716  007DFE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2717  007E00  0100               	movlb	0	; () banked
  2718  007E02  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2719  007E04  0100               	movlb	0	; () banked
  2720  007E06  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2721  007E08  0100               	movlb	0	; () banked
  2722  007E0A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2723  007E0C  0100               	movlb	0	; () banked
  2724  007E0E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2725  007E10  0100               	movlb	0	; () banked
  2726  007E12  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2727  007E14  B0D8               	btfsc	status,0,c
  2728  007E16  D00C               	goto	l2192
  2729                           
  2730                           ; BSR set to: 0
  2731  007E18  0E00               	movlw	0
  2732  007E1A  0100               	movlb	0	; () banked
  2733  007E1C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2734  007E1E  0E03               	movlw	3
  2735  007E20  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2736  007E22  0E20               	movlw	32
  2737  007E24  0100               	movlb	0	; () banked
  2738  007E26  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2739  007E28  0EA1               	movlw	161
  2740  007E2A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2741  007E2C  0E07               	movlw	7
  2742  007E2E  D053               	goto	L8
  2743  007E30                     l2192:
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;MotorFunction.c: 47: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 2; FOSC = 
      +                          250000;}
  2747  007E30  0100               	movlb	0	; () banked
  2748  007E32  90D8               	bcf	status,0,c
  2749  007E34  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2750  007E36  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2751  007E38  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2752  007E3A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2753  007E3C  0100               	movlb	0	; () banked
  2754  007E3E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2755  007E40  0100               	movlb	0	; () banked
  2756  007E42  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2757  007E44  0100               	movlb	0	; () banked
  2758  007E46  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2759  007E48  0100               	movlb	0	; () banked
  2760  007E4A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2761  007E4C  0100               	movlb	0	; () banked
  2762  007E4E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2763  007E50  0100               	movlb	0	; () banked
  2764  007E52  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2765  007E54  0100               	movlb	0	; () banked
  2766  007E56  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2767  007E58  0100               	movlb	0	; () banked
  2768  007E5A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2769  007E5C  B0D8               	btfsc	status,0,c
  2770  007E5E  D00C               	goto	l2196
  2771                           
  2772                           ; BSR set to: 0
  2773  007E60  0E00               	movlw	0
  2774  007E62  0100               	movlb	0	; () banked
  2775  007E64  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2776  007E66  0E02               	movlw	2
  2777  007E68  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2778  007E6A  0E90               	movlw	144
  2779  007E6C  0100               	movlb	0	; () banked
  2780  007E6E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2781  007E70  0ED0               	movlw	208
  2782  007E72  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2783  007E74  0E03               	movlw	3
  2784  007E76  D02F               	goto	L8
  2785  007E78                     l2196:
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;MotorFunction.c: 48: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 1; FOSC = 
      +                          125000;}
  2789  007E78  0100               	movlb	0	; () banked
  2790  007E7A  90D8               	bcf	status,0,c
  2791  007E7C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2792  007E7E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2793  007E80  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2794  007E82  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2795  007E84  0100               	movlb	0	; () banked
  2796  007E86  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2797  007E88  0100               	movlb	0	; () banked
  2798  007E8A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2799  007E8C  0100               	movlb	0	; () banked
  2800  007E8E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2801  007E90  0100               	movlb	0	; () banked
  2802  007E92  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2803  007E94  0100               	movlb	0	; () banked
  2804  007E96  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2805  007E98  0100               	movlb	0	; () banked
  2806  007E9A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2807  007E9C  0100               	movlb	0	; () banked
  2808  007E9E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2809  007EA0  0100               	movlb	0	; () banked
  2810  007EA2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2811  007EA4  B0D8               	btfsc	status,0,c
  2812  007EA6  D00C               	goto	l2200
  2813                           
  2814                           ; BSR set to: 0
  2815  007EA8  0E00               	movlw	0
  2816  007EAA  0100               	movlb	0	; () banked
  2817  007EAC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2818  007EAE  0E01               	movlw	1
  2819  007EB0  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2820  007EB2  0E48               	movlw	72
  2821  007EB4  0100               	movlb	0	; () banked
  2822  007EB6  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2823  007EB8  0EE8               	movlw	232
  2824  007EBA  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2825  007EBC  0E01               	movlw	1
  2826  007EBE  D00B               	goto	L8
  2827  007EC0                     l2200:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;MotorFunction.c: 49: else {clockSelectBits = 0; FOSC = 31000;}
  2831  007EC0  0E00               	movlw	0
  2832  007EC2  0100               	movlb	0	; () banked
  2833  007EC4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2834  007EC6  0E00               	movlw	0
  2835  007EC8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2836  007ECA  0E18               	movlw	24
  2837  007ECC  0100               	movlb	0	; () banked
  2838  007ECE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2839  007ED0  0E79               	movlw	121
  2840  007ED2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2841  007ED4  0E00               	movlw	0
  2842  007ED6                     L8:
  2843  007ED6  6F74               	movwf	(setPeriodTo@FOSC+2)& (0+255),b
  2844  007ED8  0E00               	movlw	0
  2845  007EDA  6F75               	movwf	(setPeriodTo@FOSC+3)& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2849                           
  2850                           ; BSR set to: 0
  2851                           
  2852                           ; BSR set to: 0
  2853                           
  2854                           ; BSR set to: 0
  2855                           
  2856                           ; BSR set to: 0
  2857                           
  2858                           ; BSR set to: 0
  2859                           
  2860                           ; BSR set to: 0
  2861                           
  2862                           ; BSR set to: 0
  2863  007EDC  C066  F009         	movff	setPeriodTo@FPWM,___lltoft@c
  2864  007EE0  C067  F00A         	movff	setPeriodTo@FPWM+1,___lltoft@c+1
  2865  007EE4  C068  F00B         	movff	setPeriodTo@FPWM+2,___lltoft@c+2
  2866  007EE8  C069  F00C         	movff	setPeriodTo@FPWM+3,___lltoft@c+3
  2867  007EEC  EC71  F037         	call	___lltoft	;wreg free
  2868  007EF0  C009  F030         	movff	?___lltoft,___ftmul@f2
  2869  007EF4  C00A  F031         	movff	?___lltoft+1,___ftmul@f2+1
  2870  007EF8  C00B  F032         	movff	?___lltoft+2,___ftmul@f2+2
  2871  007EFC  C070  F009         	movff	setPeriodTo@TimerPrescaleValue,___awtoft@c
  2872  007F00  C071  F00A         	movff	setPeriodTo@TimerPrescaleValue+1,___awtoft@c+1
  2873  007F04  EC6F  F036         	call	___awtoft	;wreg free
  2874  007F08  C009  F02D         	movff	?___awtoft,___ftmul@f1
  2875  007F0C  C00A  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  2876  007F10  C00B  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  2877  007F14  EC7A  F03B         	call	___ftmul	;wreg free
  2878  007F18  C02D  F06B         	movff	?___ftmul,_setPeriodTo$1531
  2879  007F1C  C02E  F06C         	movff	?___ftmul+1,_setPeriodTo$1531+1
  2880  007F20  C02F  F06D         	movff	?___ftmul+2,_setPeriodTo$1531+2
  2881                           
  2882                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2883  007F24  0E00               	movlw	0
  2884  007F26  6E30               	movwf	___ftmul@f2,c
  2885  007F28  0E80               	movlw	128
  2886  007F2A  6E31               	movwf	___ftmul@f2+1,c
  2887  007F2C  0E40               	movlw	64
  2888  007F2E  6E32               	movwf	___ftmul@f2+2,c
  2889  007F30  C06B  F02D         	movff	_setPeriodTo$1531,___ftmul@f1
  2890  007F34  C06C  F02E         	movff	_setPeriodTo$1531+1,___ftmul@f1+1
  2891  007F38  C06D  F02F         	movff	_setPeriodTo$1531+2,___ftmul@f1+2
  2892  007F3C  EC7A  F03B         	call	___ftmul	;wreg free
  2893  007F40  C02D  F015         	movff	?___ftmul,___ftdiv@f2
  2894  007F44  C02E  F016         	movff	?___ftmul+1,___ftdiv@f2+1
  2895  007F48  C02F  F017         	movff	?___ftmul+2,___ftdiv@f2+2
  2896  007F4C  C072  F009         	movff	setPeriodTo@FOSC,___lltoft@c
  2897  007F50  C073  F00A         	movff	setPeriodTo@FOSC+1,___lltoft@c+1
  2898  007F54  C074  F00B         	movff	setPeriodTo@FOSC+2,___lltoft@c+2
  2899  007F58  C075  F00C         	movff	setPeriodTo@FOSC+3,___lltoft@c+3
  2900  007F5C  EC71  F037         	call	___lltoft	;wreg free
  2901  007F60  C009  F012         	movff	?___lltoft,___ftdiv@f1
  2902  007F64  C00A  F013         	movff	?___lltoft+1,___ftdiv@f1+1
  2903  007F68  C00B  F014         	movff	?___lltoft+2,___ftdiv@f1+2
  2904  007F6C  EC07  F03B         	call	___ftdiv	;wreg free
  2905  007F70  C012  F021         	movff	?___ftdiv,___ftadd@f1
  2906  007F74  C013  F022         	movff	?___ftdiv+1,___ftadd@f1+1
  2907  007F78  C014  F023         	movff	?___ftdiv+2,___ftadd@f1+2
  2908  007F7C  0E00               	movlw	0
  2909  007F7E  6E24               	movwf	___ftadd@f2,c
  2910  007F80  0E80               	movlw	128
  2911  007F82  6E25               	movwf	___ftadd@f2+1,c
  2912  007F84  0EBF               	movlw	191
  2913  007F86  6E26               	movwf	___ftadd@f2+2,c
  2914  007F88  EC6E  F03C         	call	___ftadd	;wreg free
  2915  007F8C  C021  F078         	movff	?___ftadd,setPeriodTo@period
  2916  007F90  C022  F079         	movff	?___ftadd+1,setPeriodTo@period+1
  2917  007F94  C023  F07A         	movff	?___ftadd+2,setPeriodTo@period+2
  2918                           
  2919                           ;MotorFunction.c: 52: period = round(period);
  2920  007F98  C078  F060         	movff	setPeriodTo@period,round@x
  2921  007F9C  C079  F061         	movff	setPeriodTo@period+1,round@x+1
  2922  007FA0  C07A  F062         	movff	setPeriodTo@period+2,round@x+2
  2923  007FA4  EC06  F039         	call	_round	;wreg free
  2924  007FA8  C060  F078         	movff	?_round,setPeriodTo@period
  2925  007FAC  C061  F079         	movff	?_round+1,setPeriodTo@period+1
  2926  007FB0  C062  F07A         	movff	?_round+2,setPeriodTo@period+2
  2927                           
  2928                           ;MotorFunction.c: 54: OSCCON = ((clockSelectBits & 0x07) << 4) | 0x02;
  2929  007FB4  C076  F06A         	movff	setPeriodTo@clockSelectBits,??_setPeriodTo
  2930  007FB8  0E07               	movlw	7
  2931  007FBA  0100               	movlb	0	; () banked
  2932  007FBC  176A               	andwf	??_setPeriodTo& (0+255),f,b
  2933  007FBE  0100               	movlb	0	; () banked
  2934  007FC0  396A               	swapf	??_setPeriodTo& (0+255),w,b
  2935  007FC2  0BF0               	andlw	240
  2936  007FC4  0902               	iorlw	2
  2937  007FC6  6ED3               	movwf	4051,c	;volatile
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;MotorFunction.c: 55: PR2 = (int)period;
  2941  007FC8  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2942  007FCC  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2943  007FD0  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2944  007FD4  ECF4  F03B         	call	___fttol	;wreg free
  2945  007FD8  503C               	movf	?___fttol,w,c
  2946  007FDA  6ECB               	movwf	4043,c	;volatile
  2947                           
  2948                           ;MotorFunction.c: 56: T2CON = TimerPrescaleBits;
  2949  007FDC  C06E  FFCA         	movff	setPeriodTo@TimerPrescaleBits,4042	;volatile
  2950                           
  2951                           ;MotorFunction.c: 57: TMR2 = 0;
  2952  007FE0  0E00               	movlw	0
  2953  007FE2  6ECC               	movwf	4044,c	;volatile
  2954                           
  2955                           ;MotorFunction.c: 58: T2CONbits.TMR2ON = 1;
  2956  007FE4  84CA               	bsf	4042,2,c	;volatile
  2957                           
  2958                           ;MotorFunction.c: 59: return (int)period;
  2959  007FE6  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2960  007FEA  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2961  007FEE  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2962  007FF2  ECF4  F03B         	call	___fttol	;wreg free
  2963  007FF6  C03C  F066         	movff	?___fttol,?_setPeriodTo
  2964  007FFA  C03D  F067         	movff	?___fttol+1,?_setPeriodTo+1
  2965  007FFE  0012               	return	
  2966  008000                     __end_of_setPeriodTo:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           postdec1	equ	0xFE5
  2975                           plusw1	equ	0xFE3
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           plusw2	equ	0xFDB
  2979                           fsr2h	equ	0xFDA
  2980                           fsr2l	equ	0xFD9
  2981                           status	equ	0xFD8
  2982                           
  2983 ;; *************** function _round *****************
  2984 ;; Defined at:
  2985 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\round.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;  x               3    0[BANK0 ] int 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  f               3    3[BANK0 ] int 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  3    0[BANK0 ] int 
  2992 ;; Registers used:
  2993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2999 ;;      Params:         0       3       0       0       0       0       0       0       0
  3000 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3002 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3003 ;;Total ram usage:        6 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    3
  3006 ;; This function calls:
  3007 ;;		___ftadd
  3008 ;;		___ftneg
  3009 ;;		_trunc
  3010 ;; This function is called by:
  3011 ;;		_setPeriodTo
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text14
  3016  00720C                     __ptext14:
  3017                           	opt stack 0
  3018  00720C                     _round:
  3019                           	opt stack 24
  3020                           
  3021                           ;incstack = 0
  3022  00720C  C060  F055         	movff	round@x,trunc@x
  3023  007210  C061  F056         	movff	round@x+1,trunc@x+1
  3024  007214  C062  F057         	movff	round@x+2,trunc@x+2
  3025  007218  ECC5  F038         	call	_trunc	;wreg free
  3026  00721C  C055  F05D         	movff	?_trunc,___ftneg@f1
  3027  007220  C056  F05E         	movff	?_trunc+1,___ftneg@f1+1
  3028  007224  C057  F05F         	movff	?_trunc+2,___ftneg@f1+2
  3029  007228  ECE5  F035         	call	___ftneg	;wreg free
  3030  00722C  C05D  F021         	movff	?___ftneg,___ftadd@f1
  3031  007230  C05E  F022         	movff	?___ftneg+1,___ftadd@f1+1
  3032  007234  C05F  F023         	movff	?___ftneg+2,___ftadd@f1+2
  3033  007238  C060  F024         	movff	round@x,___ftadd@f2
  3034  00723C  C061  F025         	movff	round@x+1,___ftadd@f2+1
  3035  007240  C062  F026         	movff	round@x+2,___ftadd@f2+2
  3036  007244  EC6E  F03C         	call	___ftadd	;wreg free
  3037  007248  C021  F063         	movff	?___ftadd,round@f
  3038  00724C  C022  F064         	movff	?___ftadd+1,round@f+1
  3039  007250  C023  F065         	movff	?___ftadd+2,round@f+2
  3040  007254  C060  F021         	movff	round@x,___ftadd@f1
  3041  007258  C061  F022         	movff	round@x+1,___ftadd@f1+1
  3042  00725C  C062  F023         	movff	round@x+2,___ftadd@f1+2
  3043  007260  C063  F024         	movff	round@f,___ftadd@f2
  3044  007264  C064  F025         	movff	round@f+1,___ftadd@f2+1
  3045  007268  C065  F026         	movff	round@f+2,___ftadd@f2+2
  3046  00726C  EC6E  F03C         	call	___ftadd	;wreg free
  3047  007270  C021  F060         	movff	?___ftadd,round@x
  3048  007274  C022  F061         	movff	?___ftadd+1,round@x+1
  3049  007278  C023  F062         	movff	?___ftadd+2,round@x+2
  3050  00727C  C060  F055         	movff	round@x,trunc@x
  3051  007280  C061  F056         	movff	round@x+1,trunc@x+1
  3052  007284  C062  F057         	movff	round@x+2,trunc@x+2
  3053  007288  ECC5  F038         	call	_trunc	;wreg free
  3054  00728C  C055  F060         	movff	?_trunc,?_round
  3055  007290  C056  F061         	movff	?_trunc+1,?_round+1
  3056  007294  C057  F062         	movff	?_trunc+2,?_round+2
  3057  007298  0012               	return	
  3058  00729A                     __end_of_round:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           postdec1	equ	0xFE5
  3067                           plusw1	equ	0xFE3
  3068                           fsr1l	equ	0xFE1
  3069                           indf2	equ	0xFDF
  3070                           plusw2	equ	0xFDB
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _trunc *****************
  3076 ;; Defined at:
  3077 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\trunc.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  x               3   84[COMRAM] int 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  i               3   87[COMRAM] int 
  3082 ;;  expon           2   90[COMRAM] int 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  3   84[COMRAM] int 
  3085 ;; Registers used:
  3086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3087 ;; Tracked objects:
  3088 ;;		On entry : 0/0
  3089 ;;		On exit  : 0/0
  3090 ;;		Unchanged: 0/0
  3091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3092 ;;      Params:         3       0       0       0       0       0       0       0       0
  3093 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3095 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3096 ;;Total ram usage:        8 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    2
  3099 ;; This function calls:
  3100 ;;		___altoft
  3101 ;;		___fttol
  3102 ;;		_frexp
  3103 ;; This function is called by:
  3104 ;;		_round
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text15
  3109  00718A                     __ptext15:
  3110                           	opt stack 0
  3111  00718A                     _trunc:
  3112                           	opt stack 24
  3113                           
  3114                           ;incstack = 0
  3115  00718A  C055  F001         	movff	trunc@x,frexp@value
  3116  00718E  C056  F002         	movff	trunc@x+1,frexp@value+1
  3117  007192  C057  F003         	movff	trunc@x+2,frexp@value+2
  3118  007196  0E5B               	movlw	low trunc@expon
  3119  007198  6E04               	movwf	frexp@eptr,c
  3120  00719A  0E00               	movlw	high trunc@expon
  3121  00719C  6E05               	movwf	frexp@eptr+1,c
  3122  00719E  EC4C  F038         	call	_frexp	;wreg free
  3123  0071A2  AE5C               	btfss	trunc@expon+1,7,c
  3124  0071A4  D007               	goto	l1990
  3125  0071A6  0E00               	movlw	0
  3126  0071A8  6E55               	movwf	?_trunc,c
  3127  0071AA  0E00               	movlw	0
  3128  0071AC  6E56               	movwf	?_trunc+1,c
  3129  0071AE  0E00               	movlw	0
  3130  0071B0  6E57               	movwf	?_trunc+2,c
  3131  0071B2  0012               	return	
  3132  0071B4                     l1990:
  3133  0071B4  505C               	movf	trunc@expon+1,w,c
  3134  0071B6  E104               	bnz	u1470
  3135  0071B8  0E15               	movlw	21
  3136  0071BA  5C5B               	subwf	trunc@expon,w,c
  3137  0071BC  A0D8               	btfss	status,0,c
  3138  0071BE  D007               	goto	l1994
  3139  0071C0                     u1470:
  3140  0071C0  C055  F055         	movff	trunc@x,?_trunc
  3141  0071C4  C056  F056         	movff	trunc@x+1,?_trunc+1
  3142  0071C8  C057  F057         	movff	trunc@x+2,?_trunc+2
  3143  0071CC  0012               	return	
  3144  0071CE                     l1994:
  3145  0071CE  C055  F03C         	movff	trunc@x,___fttol@f1
  3146  0071D2  C056  F03D         	movff	trunc@x+1,___fttol@f1+1
  3147  0071D6  C057  F03E         	movff	trunc@x+2,___fttol@f1+2
  3148  0071DA  ECF4  F03B         	call	___fttol	;wreg free
  3149  0071DE  C03C  F04B         	movff	?___fttol,___altoft@c
  3150  0071E2  C03D  F04C         	movff	?___fttol+1,___altoft@c+1
  3151  0071E6  C03E  F04D         	movff	?___fttol+2,___altoft@c+2
  3152  0071EA  C03F  F04E         	movff	?___fttol+3,___altoft@c+3
  3153  0071EE  EC10  F038         	call	___altoft	;wreg free
  3154  0071F2  C04B  F058         	movff	?___altoft,trunc@i
  3155  0071F6  C04C  F059         	movff	?___altoft+1,trunc@i+1
  3156  0071FA  C04D  F05A         	movff	?___altoft+2,trunc@i+2
  3157  0071FE  C058  F055         	movff	trunc@i,?_trunc
  3158  007202  C059  F056         	movff	trunc@i+1,?_trunc+1
  3159  007206  C05A  F057         	movff	trunc@i+2,?_trunc+2
  3160  00720A  0012               	return	
  3161  00720C                     __end_of_trunc:
  3162                           	opt stack 0
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           postinc0	equ	0xFEE
  3168                           wreg	equ	0xFE8
  3169                           postdec1	equ	0xFE5
  3170                           plusw1	equ	0xFE3
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           plusw2	equ	0xFDB
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _frexp *****************
  3179 ;; Defined at:
  3180 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  value           3    0[COMRAM] int 
  3183 ;;  eptr            2    3[COMRAM] PTR int 
  3184 ;;		 -> trunc@expon(2), 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  3    0[COMRAM] PTR int 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3196 ;;      Params:         5       0       0       0       0       0       0       0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3198 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3199 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3200 ;;Total ram usage:        7 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; This function calls:
  3203 ;;		Nothing
  3204 ;; This function is called by:
  3205 ;;		_trunc
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text16
  3210  007098                     __ptext16:
  3211                           	opt stack 0
  3212  007098                     _frexp:
  3213                           	opt stack 25
  3214                           
  3215                           ;incstack = 0
  3216  007098  5001               	movf	frexp@value,w,c
  3217  00709A  1002               	iorwf	frexp@value+1,w,c
  3218  00709C  1003               	iorwf	frexp@value+2,w,c
  3219  00709E  A4D8               	btfss	status,2,c
  3220  0070A0  D009               	goto	l1898
  3221  0070A2  C004  FFD9         	movff	frexp@eptr,fsr2l
  3222  0070A6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3223  0070AA  0E00               	movlw	0
  3224  0070AC  6EDE               	movwf	postinc2,c
  3225  0070AE  0E00               	movlw	0
  3226  0070B0  6EDD               	movwf	postdec2,c
  3227                           
  3228                           ;	Return value of _frexp is never used
  3229  0070B2  0012               	return	
  3230  0070B4                     l1898:
  3231  0070B4  5003               	movf	frexp@value+2,w,c
  3232  0070B6  0B7F               	andlw	127
  3233  0070B8  6E06               	movwf	??_frexp& (0+255),c
  3234  0070BA  6A07               	clrf	(??_frexp+1)& (0+255),c
  3235  0070BC  90D8               	bcf	status,0,c
  3236  0070BE  3606               	rlcf	??_frexp,f,c
  3237  0070C0  3607               	rlcf	??_frexp+1,f,c
  3238  0070C2  C004  FFD9         	movff	frexp@eptr,fsr2l
  3239  0070C6  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3240  0070CA  C006  FFDE         	movff	??_frexp,postinc2
  3241  0070CE  C007  FFDD         	movff	??_frexp+1,postdec2
  3242  0070D2  AE02               	btfss	frexp@value+1,7,c
  3243  0070D4  D003               	goto	u1230
  3244  0070D6  6A06               	clrf	??_frexp& (0+255),c
  3245  0070D8  2A06               	incf	??_frexp& (0+255),f,c
  3246  0070DA  D001               	goto	u1238
  3247  0070DC                     u1230:
  3248  0070DC  6A06               	clrf	??_frexp& (0+255),c
  3249  0070DE                     u1238:
  3250  0070DE  5006               	movf	??_frexp,w,c
  3251  0070E0  C004  FFD9         	movff	frexp@eptr,fsr2l
  3252  0070E4  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3253  0070E8  12DE               	iorwf	postinc2,f,c
  3254  0070EA  0E00               	movlw	0
  3255  0070EC  12DD               	iorwf	postdec2,f,c
  3256  0070EE  C004  FFD9         	movff	frexp@eptr,fsr2l
  3257  0070F2  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  3258  0070F6  0E82               	movlw	130
  3259  0070F8  26DE               	addwf	postinc2,f,c
  3260  0070FA  0EFF               	movlw	255
  3261  0070FC  22DD               	addwfc	postdec2,f,c
  3262  0070FE  8003               	bsf	frexp@value+2,0,c
  3263  007100  8203               	bsf	frexp@value+2,1,c
  3264  007102  8403               	bsf	frexp@value+2,2,c
  3265  007104  8603               	bsf	frexp@value+2,3,c
  3266  007106  8803               	bsf	frexp@value+2,4,c
  3267  007108  8A03               	bsf	frexp@value+2,5,c
  3268  00710A  9C03               	bcf	frexp@value+2,6,c
  3269  00710C  9E02               	bcf	frexp@value+1,7,c
  3270  00710E  0012               	return	
  3271  007110                     __end_of_frexp:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           tblptrh	equ	0xFF7
  3275                           tblptrl	equ	0xFF6
  3276                           tablat	equ	0xFF5
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           plusw1	equ	0xFE3
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           plusw2	equ	0xFDB
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function ___altoft *****************
  3291 ;; Defined at:
  3292 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  c               4   74[COMRAM] long 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  sign            1   83[COMRAM] unsigned char 
  3297 ;;  exp             1   82[COMRAM] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  3   74[COMRAM] float 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3307 ;;      Params:         4       0       0       0       0       0       0       0       0
  3308 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3309 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3310 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3311 ;;Total ram usage:       10 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    1
  3314 ;; This function calls:
  3315 ;;		___ftpack
  3316 ;; This function is called by:
  3317 ;;		_trunc
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text17
  3322  007020                     __ptext17:
  3323                           	opt stack 0
  3324  007020                     ___altoft:
  3325                           	opt stack 24
  3326                           
  3327                           ;incstack = 0
  3328  007020  0E00               	movlw	0
  3329  007022  6E54               	movwf	___altoft@sign,c
  3330  007024  0E8E               	movlw	142
  3331  007026  6E53               	movwf	___altoft@exp,c
  3332  007028  AE4E               	btfss	___altoft@c+3,7,c
  3333  00702A  D011               	goto	l1840
  3334  00702C  1E4E               	comf	___altoft@c+3,f,c
  3335  00702E  1E4D               	comf	___altoft@c+2,f,c
  3336  007030  1E4C               	comf	___altoft@c+1,f,c
  3337  007032  6C4B               	negf	___altoft@c,c
  3338  007034  0E00               	movlw	0
  3339  007036  224C               	addwfc	___altoft@c+1,f,c
  3340  007038  224D               	addwfc	___altoft@c+2,f,c
  3341  00703A  224E               	addwfc	___altoft@c+3,f,c
  3342  00703C  0E01               	movlw	1
  3343  00703E  6E54               	movwf	___altoft@sign,c
  3344  007040  D006               	goto	l1840
  3345  007042                     l1838:
  3346  007042  90D8               	bcf	status,0,c
  3347  007044  324E               	rrcf	___altoft@c+3,f,c
  3348  007046  324D               	rrcf	___altoft@c+2,f,c
  3349  007048  324C               	rrcf	___altoft@c+1,f,c
  3350  00704A  324B               	rrcf	___altoft@c,f,c
  3351  00704C  2A53               	incf	___altoft@exp,f,c
  3352  00704E                     l1840:
  3353  00704E  0E00               	movlw	0
  3354  007050  144B               	andwf	___altoft@c,w,c
  3355  007052  6E4F               	movwf	??___altoft& (0+255),c
  3356  007054  0E00               	movlw	0
  3357  007056  144C               	andwf	___altoft@c+1,w,c
  3358  007058  6E50               	movwf	(??___altoft+1)& (0+255),c
  3359  00705A  0E00               	movlw	0
  3360  00705C  144D               	andwf	___altoft@c+2,w,c
  3361  00705E  6E51               	movwf	(??___altoft+2)& (0+255),c
  3362  007060  0EFF               	movlw	255
  3363  007062  144E               	andwf	___altoft@c+3,w,c
  3364  007064  6E52               	movwf	(??___altoft+3)& (0+255),c
  3365  007066  504F               	movf	??___altoft,w,c
  3366  007068  1050               	iorwf	??___altoft+1,w,c
  3367  00706A  1051               	iorwf	??___altoft+2,w,c
  3368  00706C  1052               	iorwf	??___altoft+3,w,c
  3369  00706E  A4D8               	btfss	status,2,c
  3370  007070  D7E8               	goto	l1838
  3371  007072  C04B  F001         	movff	___altoft@c,___ftpack@arg
  3372  007076  C04C  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3373  00707A  C04D  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3374  00707E  C053  F004         	movff	___altoft@exp,___ftpack@exp
  3375  007082  C054  F005         	movff	___altoft@sign,___ftpack@sign
  3376  007086  ECE6  F039         	call	___ftpack	;wreg free
  3377  00708A  C001  F04B         	movff	?___ftpack,?___altoft
  3378  00708E  C002  F04C         	movff	?___ftpack+1,?___altoft+1
  3379  007092  C003  F04D         	movff	?___ftpack+2,?___altoft+2
  3380  007096  0012               	return	
  3381  007098                     __end_of___altoft:
  3382                           	opt stack 0
  3383                           tblptru	equ	0xFF8
  3384                           tblptrh	equ	0xFF7
  3385                           tblptrl	equ	0xFF6
  3386                           tablat	equ	0xFF5
  3387                           postinc0	equ	0xFEE
  3388                           wreg	equ	0xFE8
  3389                           postdec1	equ	0xFE5
  3390                           plusw1	equ	0xFE3
  3391                           fsr1l	equ	0xFE1
  3392                           indf2	equ	0xFDF
  3393                           postinc2	equ	0xFDE
  3394                           postdec2	equ	0xFDD
  3395                           plusw2	equ	0xFDB
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           status	equ	0xFD8
  3399                           
  3400 ;; *************** function ___ftneg *****************
  3401 ;; Defined at:
  3402 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  3403 ;; Parameters:    Size  Location     Type
  3404 ;;  f1              3   92[COMRAM] float 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;		None
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  3   92[COMRAM] float 
  3409 ;; Registers used:
  3410 ;;		wreg, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3416 ;;      Params:         3       0       0       0       0       0       0       0       0
  3417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3419 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3420 ;;Total ram usage:        3 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_round
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text18
  3430  006BCA                     __ptext18:
  3431                           	opt stack 0
  3432  006BCA                     ___ftneg:
  3433                           	opt stack 26
  3434                           
  3435                           ;incstack = 0
  3436  006BCA  505D               	movf	___ftneg@f1,w,c
  3437  006BCC  105E               	iorwf	___ftneg@f1+1,w,c
  3438  006BCE  105F               	iorwf	___ftneg@f1+2,w,c
  3439  006BD0  B4D8               	btfsc	status,2,c
  3440  006BD2  D006               	goto	l651
  3441  006BD4  0E00               	movlw	0
  3442  006BD6  1A5D               	xorwf	___ftneg@f1,f,c
  3443  006BD8  0E00               	movlw	0
  3444  006BDA  1A5E               	xorwf	___ftneg@f1+1,f,c
  3445  006BDC  0E80               	movlw	128
  3446  006BDE  1A5F               	xorwf	___ftneg@f1+2,f,c
  3447  006BE0                     l651:
  3448  006BE0  C05D  F05D         	movff	___ftneg@f1,?___ftneg
  3449  006BE4  C05E  F05E         	movff	___ftneg@f1+1,?___ftneg+1
  3450  006BE8  C05F  F05F         	movff	___ftneg@f1+2,?___ftneg+2
  3451  006BEC  0012               	return		;funcret
  3452  006BEE                     __end_of___ftneg:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           plusw1	equ	0xFE3
  3462                           fsr1l	equ	0xFE1
  3463                           indf2	equ	0xFDF
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           plusw2	equ	0xFDB
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function ___lltoft *****************
  3472 ;; Defined at:
  3473 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  c               4    8[COMRAM] unsigned long 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  exp             1   16[COMRAM] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  3    8[COMRAM] float 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3487 ;;      Params:         4       0       0       0       0       0       0       0       0
  3488 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3489 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3490 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3491 ;;Total ram usage:        9 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    1
  3494 ;; This function calls:
  3495 ;;		___ftpack
  3496 ;; This function is called by:
  3497 ;;		_setPeriodTo
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text19
  3502  006EE2                     __ptext19:
  3503                           	opt stack 0
  3504  006EE2                     ___lltoft:
  3505                           	opt stack 26
  3506                           
  3507                           ;incstack = 0
  3508  006EE2  0E8E               	movlw	142
  3509  006EE4  6E11               	movwf	___lltoft@exp,c
  3510  006EE6  D006               	goto	l2124
  3511  006EE8                     l2122:
  3512  006EE8  90D8               	bcf	status,0,c
  3513  006EEA  320C               	rrcf	___lltoft@c+3,f,c
  3514  006EEC  320B               	rrcf	___lltoft@c+2,f,c
  3515  006EEE  320A               	rrcf	___lltoft@c+1,f,c
  3516  006EF0  3209               	rrcf	___lltoft@c,f,c
  3517  006EF2  2A11               	incf	___lltoft@exp,f,c
  3518  006EF4                     l2124:
  3519  006EF4  0E00               	movlw	0
  3520  006EF6  1409               	andwf	___lltoft@c,w,c
  3521  006EF8  6E0D               	movwf	??___lltoft& (0+255),c
  3522  006EFA  0E00               	movlw	0
  3523  006EFC  140A               	andwf	___lltoft@c+1,w,c
  3524  006EFE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3525  006F00  0E00               	movlw	0
  3526  006F02  140B               	andwf	___lltoft@c+2,w,c
  3527  006F04  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3528  006F06  0EFF               	movlw	255
  3529  006F08  140C               	andwf	___lltoft@c+3,w,c
  3530  006F0A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3531  006F0C  500D               	movf	??___lltoft,w,c
  3532  006F0E  100E               	iorwf	??___lltoft+1,w,c
  3533  006F10  100F               	iorwf	??___lltoft+2,w,c
  3534  006F12  1010               	iorwf	??___lltoft+3,w,c
  3535  006F14  A4D8               	btfss	status,2,c
  3536  006F16  D7E8               	goto	l2122
  3537  006F18  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3538  006F1C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3539  006F20  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3540  006F24  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3541  006F28  0E00               	movlw	0
  3542  006F2A  6E05               	movwf	___ftpack@sign,c
  3543  006F2C  ECE6  F039         	call	___ftpack	;wreg free
  3544  006F30  C001  F009         	movff	?___ftpack,?___lltoft
  3545  006F34  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3546  006F38  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3547  006F3C  0012               	return	
  3548  006F3E                     __end_of___lltoft:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           plusw1	equ	0xFE3
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           postdec2	equ	0xFDD
  3562                           plusw2	equ	0xFDB
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function _doorSetDutyCycleTo *****************
  3568 ;; Defined at:
  3569 ;;		line 71 in file "MotorFunction.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  Duty_cycle      3   74[COMRAM] float 
  3572 ;;  Period          2   77[COMRAM] int 
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  PWM10BitValu    2   84[COMRAM] int 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;		None               void
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3584 ;;      Params:         5       0       0       0       0       0       0       0       0
  3585 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3586 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3587 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3588 ;;Total ram usage:       12 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    2
  3591 ;; This function calls:
  3592 ;;		___awtoft
  3593 ;;		___ftadd
  3594 ;;		___ftdiv
  3595 ;;		___ftmul
  3596 ;;		___fttol
  3597 ;; This function is called by:
  3598 ;;		_motordoor_open
  3599 ;;		_motordoor_close
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603                           	psect	text20
  3604  00747A                     __ptext20:
  3605                           	opt stack 0
  3606  00747A                     _doorSetDutyCycleTo:
  3607                           	opt stack 26
  3608                           
  3609                           ;MotorFunction.c: 73: int PWM10BitValue;
  3610                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  3611                           
  3612                           ;incstack = 0
  3613  00747A  0E00               	movlw	0
  3614  00747C  6E15               	movwf	___ftdiv@f2,c
  3615  00747E  0EC8               	movlw	200
  3616  007480  6E16               	movwf	___ftdiv@f2+1,c
  3617  007482  0E42               	movlw	66
  3618  007484  6E17               	movwf	___ftdiv@f2+2,c
  3619  007486  C04B  F012         	movff	doorSetDutyCycleTo@Duty_cycle,___ftdiv@f1
  3620  00748A  C04C  F013         	movff	doorSetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  3621  00748E  C04D  F014         	movff	doorSetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  3622  007492  EC07  F03B         	call	___ftdiv	;wreg free
  3623  007496  C012  F030         	movff	?___ftdiv,___ftmul@f2
  3624  00749A  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  3625  00749E  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  3626  0074A2  0E00               	movlw	0
  3627  0074A4  6E24               	movwf	___ftadd@f2,c
  3628  0074A6  0E80               	movlw	128
  3629  0074A8  6E25               	movwf	___ftadd@f2+1,c
  3630  0074AA  0E3F               	movlw	63
  3631  0074AC  6E26               	movwf	___ftadd@f2+2,c
  3632  0074AE  C04E  F009         	movff	doorSetDutyCycleTo@Period,___awtoft@c
  3633  0074B2  C04F  F00A         	movff	doorSetDutyCycleTo@Period+1,___awtoft@c+1
  3634  0074B6  EC6F  F036         	call	___awtoft	;wreg free
  3635  0074BA  C009  F021         	movff	?___awtoft,___ftadd@f1
  3636  0074BE  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  3637  0074C2  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  3638  0074C6  EC6E  F03C         	call	___ftadd	;wreg free
  3639  0074CA  C021  F02D         	movff	?___ftadd,___ftmul@f1
  3640  0074CE  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  3641  0074D2  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  3642  0074D6  EC7A  F03B         	call	___ftmul	;wreg free
  3643  0074DA  C02D  F052         	movff	?___ftmul,_doorSetDutyCycleTo$1533
  3644  0074DE  C02E  F053         	movff	?___ftmul+1,_doorSetDutyCycleTo$1533+1
  3645  0074E2  C02F  F054         	movff	?___ftmul+2,_doorSetDutyCycleTo$1533+2
  3646                           
  3647                           ;MotorFunction.c: 73: int PWM10BitValue;
  3648                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  3649  0074E6  0E00               	movlw	0
  3650  0074E8  6E30               	movwf	___ftmul@f2,c
  3651  0074EA  0E80               	movlw	128
  3652  0074EC  6E31               	movwf	___ftmul@f2+1,c
  3653  0074EE  0E40               	movlw	64
  3654  0074F0  6E32               	movwf	___ftmul@f2+2,c
  3655  0074F2  C052  F02D         	movff	_doorSetDutyCycleTo$1533,___ftmul@f1
  3656  0074F6  C053  F02E         	movff	_doorSetDutyCycleTo$1533+1,___ftmul@f1+1
  3657  0074FA  C054  F02F         	movff	_doorSetDutyCycleTo$1533+2,___ftmul@f1+2
  3658  0074FE  EC7A  F03B         	call	___ftmul	;wreg free
  3659  007502  C02D  F03C         	movff	?___ftmul,___fttol@f1
  3660  007506  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  3661  00750A  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  3662  00750E  ECF4  F03B         	call	___fttol	;wreg free
  3663  007512  C03C  F055         	movff	?___fttol,doorSetDutyCycleTo@PWM10BitValue
  3664  007516  C03D  F056         	movff	?___fttol+1,doorSetDutyCycleTo@PWM10BitValue+1
  3665                           
  3666                           ;MotorFunction.c: 76: CCPR2L = (PWM10BitValue >> 2);
  3667  00751A  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  3668  00751E  C056  F051         	movff	doorSetDutyCycleTo@PWM10BitValue+1,??_doorSetDutyCycleTo+1
  3669  007522  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  3670  007524  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  3671  007526  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  3672  007528  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  3673  00752A  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  3674  00752C  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  3675  00752E  5050               	movf	??_doorSetDutyCycleTo,w,c
  3676  007530  6EBB               	movwf	4027,c	;volatile
  3677                           
  3678                           ;MotorFunction.c: 77: CCP2CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  3679  007532  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  3680  007536  0E03               	movlw	3
  3681  007538  1650               	andwf	??_doorSetDutyCycleTo,f,c
  3682  00753A  3850               	swapf	??_doorSetDutyCycleTo,w,c
  3683  00753C  0BF0               	andlw	240
  3684  00753E  090C               	iorlw	12
  3685  007540  6EBA               	movwf	4026,c	;volatile
  3686  007542  0012               	return		;funcret
  3687  007544                     __end_of_doorSetDutyCycleTo:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           plusw1	equ	0xFE3
  3697                           fsr1l	equ	0xFE1
  3698                           indf2	equ	0xFDF
  3699                           postinc2	equ	0xFDE
  3700                           postdec2	equ	0xFDD
  3701                           plusw2	equ	0xFDB
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706 ;; *************** function ___fttol *****************
  3707 ;; Defined at:
  3708 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  f1              3   59[COMRAM] float 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  lval            4   69[COMRAM] unsigned long 
  3713 ;;  exp1            1   73[COMRAM] unsigned char 
  3714 ;;  sign1           1   68[COMRAM] unsigned char 
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  4   59[COMRAM] long 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3724 ;;      Params:         4       0       0       0       0       0       0       0       0
  3725 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3726 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3727 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3728 ;;Total ram usage:       15 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; This function calls:
  3731 ;;		Nothing
  3732 ;; This function is called by:
  3733 ;;		_setPeriodTo
  3734 ;;		_SetDutyCycleTo
  3735 ;;		_doorSetDutyCycleTo
  3736 ;;		_trunc
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text21
  3741  0077E8                     __ptext21:
  3742                           	opt stack 0
  3743  0077E8                     ___fttol:
  3744                           	opt stack 25
  3745                           
  3746                           ;incstack = 0
  3747  0077E8  C03E  F040         	movff	___fttol@f1+2,??___fttol
  3748  0077EC  6A41               	clrf	(??___fttol+1)& (0+255),c
  3749  0077EE  6A42               	clrf	(??___fttol+2)& (0+255),c
  3750  0077F0  343D               	rlcf	___fttol@f1+1,w,c
  3751  0077F2  3640               	rlcf	??___fttol& (0+255),f,c
  3752  0077F4  E301               	bnc	u1141
  3753  0077F6  8041               	bsf	(??___fttol+1)& (0+255),0,c
  3754  0077F8                     u1141:
  3755  0077F8  5040               	movf	??___fttol,w,c
  3756  0077FA  6E4A               	movwf	___fttol@exp1,c
  3757  0077FC  504A               	movf	___fttol@exp1,w,c
  3758  0077FE  A4D8               	btfss	status,2,c
  3759  007800  D009               	goto	l1852
  3760  007802  0E00               	movlw	0
  3761  007804  6E3C               	movwf	?___fttol,c
  3762  007806  0E00               	movlw	0
  3763  007808  6E3D               	movwf	?___fttol+1,c
  3764  00780A  0E00               	movlw	0
  3765  00780C  6E3E               	movwf	?___fttol+2,c
  3766  00780E  0E00               	movlw	0
  3767  007810  6E3F               	movwf	?___fttol+3,c
  3768  007812  0012               	return	
  3769  007814                     l1852:
  3770  007814  0E17               	movlw	23
  3771  007816  6E40               	movwf	??___fttol& (0+255),c
  3772  007818  C03C  F041         	movff	___fttol@f1,??___fttol+1
  3773  00781C  C03D  F042         	movff	___fttol@f1+1,??___fttol+2
  3774  007820  C03E  F043         	movff	___fttol@f1+2,??___fttol+3
  3775  007824  2840               	incf	??___fttol,w,c
  3776  007826  6E44               	movwf	(??___fttol+4)& (0+255),c
  3777  007828  D004               	goto	u1160
  3778  00782A                     u1165:
  3779  00782A  90D8               	bcf	status,0,c
  3780  00782C  3243               	rrcf	??___fttol+3,f,c
  3781  00782E  3242               	rrcf	??___fttol+2,f,c
  3782  007830  3241               	rrcf	??___fttol+1,f,c
  3783  007832                     u1160:
  3784  007832  2E44               	decfsz	(??___fttol+4)& (0+255),f,c
  3785  007834  D7FA               	goto	u1165
  3786  007836  5041               	movf	??___fttol+1,w,c
  3787  007838  6E45               	movwf	___fttol@sign1,c
  3788  00783A  8E3D               	bsf	___fttol@f1+1,7,c
  3789  00783C  0EFF               	movlw	255
  3790  00783E  163C               	andwf	___fttol@f1,f,c
  3791  007840  0EFF               	movlw	255
  3792  007842  163D               	andwf	___fttol@f1+1,f,c
  3793  007844  0E00               	movlw	0
  3794  007846  163E               	andwf	___fttol@f1+2,f,c
  3795  007848  503C               	movf	___fttol@f1,w,c
  3796  00784A  6E46               	movwf	___fttol@lval,c
  3797  00784C  503D               	movf	___fttol@f1+1,w,c
  3798  00784E  6E47               	movwf	___fttol@lval+1,c
  3799  007850  503E               	movf	___fttol@f1+2,w,c
  3800  007852  6E48               	movwf	___fttol@lval+2,c
  3801  007854  6A49               	clrf	___fttol@lval+3,c
  3802  007856  0E8E               	movlw	142
  3803  007858  5E4A               	subwf	___fttol@exp1,f,c
  3804  00785A  AE4A               	btfss	___fttol@exp1,7,c
  3805  00785C  D016               	goto	l1874
  3806  00785E  504A               	movf	___fttol@exp1,w,c
  3807  007860  0A80               	xorlw	128
  3808  007862  0F8F               	addlw	143
  3809  007864  B0D8               	btfsc	status,0,c
  3810  007866  D009               	goto	l1870
  3811  007868  0E00               	movlw	0
  3812  00786A  6E3C               	movwf	?___fttol,c
  3813  00786C  0E00               	movlw	0
  3814  00786E  6E3D               	movwf	?___fttol+1,c
  3815  007870  0E00               	movlw	0
  3816  007872  6E3E               	movwf	?___fttol+2,c
  3817  007874  0E00               	movlw	0
  3818  007876  6E3F               	movwf	?___fttol+3,c
  3819  007878  0012               	return	
  3820  00787A                     l1870:
  3821  00787A  90D8               	bcf	status,0,c
  3822  00787C  3249               	rrcf	___fttol@lval+3,f,c
  3823  00787E  3248               	rrcf	___fttol@lval+2,f,c
  3824  007880  3247               	rrcf	___fttol@lval+1,f,c
  3825  007882  3246               	rrcf	___fttol@lval,f,c
  3826  007884  3E4A               	incfsz	___fttol@exp1,f,c
  3827  007886  D7F9               	goto	l1870
  3828  007888  D015               	goto	l1884
  3829  00788A                     l1874:
  3830  00788A  0E17               	movlw	23
  3831  00788C  644A               	cpfsgt	___fttol@exp1,c
  3832  00788E  D00F               	goto	l1882
  3833  007890  0E00               	movlw	0
  3834  007892  6E3C               	movwf	?___fttol,c
  3835  007894  0E00               	movlw	0
  3836  007896  6E3D               	movwf	?___fttol+1,c
  3837  007898  0E00               	movlw	0
  3838  00789A  6E3E               	movwf	?___fttol+2,c
  3839  00789C  0E00               	movlw	0
  3840  00789E  6E3F               	movwf	?___fttol+3,c
  3841  0078A0  0012               	return	
  3842  0078A2                     l1880:
  3843  0078A2  90D8               	bcf	status,0,c
  3844  0078A4  3646               	rlcf	___fttol@lval,f,c
  3845  0078A6  3647               	rlcf	___fttol@lval+1,f,c
  3846  0078A8  3648               	rlcf	___fttol@lval+2,f,c
  3847  0078AA  3649               	rlcf	___fttol@lval+3,f,c
  3848  0078AC  064A               	decf	___fttol@exp1,f,c
  3849  0078AE                     l1882:
  3850  0078AE  504A               	movf	___fttol@exp1,w,c
  3851  0078B0  A4D8               	btfss	status,2,c
  3852  0078B2  D7F7               	goto	l1880
  3853  0078B4                     l1884:
  3854  0078B4  5045               	movf	___fttol@sign1,w,c
  3855  0078B6  B4D8               	btfsc	status,2,c
  3856  0078B8  D008               	goto	l1888
  3857  0078BA  1E49               	comf	___fttol@lval+3,f,c
  3858  0078BC  1E48               	comf	___fttol@lval+2,f,c
  3859  0078BE  1E47               	comf	___fttol@lval+1,f,c
  3860  0078C0  6C46               	negf	___fttol@lval,c
  3861  0078C2  0E00               	movlw	0
  3862  0078C4  2247               	addwfc	___fttol@lval+1,f,c
  3863  0078C6  2248               	addwfc	___fttol@lval+2,f,c
  3864  0078C8  2249               	addwfc	___fttol@lval+3,f,c
  3865  0078CA                     l1888:
  3866  0078CA  C046  F03C         	movff	___fttol@lval,?___fttol
  3867  0078CE  C047  F03D         	movff	___fttol@lval+1,?___fttol+1
  3868  0078D2  C048  F03E         	movff	___fttol@lval+2,?___fttol+2
  3869  0078D6  C049  F03F         	movff	___fttol@lval+3,?___fttol+3
  3870  0078DA  0012               	return	
  3871  0078DC                     __end_of___fttol:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           plusw1	equ	0xFE3
  3881                           fsr1l	equ	0xFE1
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           plusw2	equ	0xFDB
  3886                           fsr2h	equ	0xFDA
  3887                           fsr2l	equ	0xFD9
  3888                           status	equ	0xFD8
  3889                           
  3890 ;; *************** function ___ftmul *****************
  3891 ;; Defined at:
  3892 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;  f1              3   44[COMRAM] float 
  3895 ;;  f2              3   47[COMRAM] float 
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  f3_as_produc    3   54[COMRAM] unsigned um
  3898 ;;  sign            1   58[COMRAM] unsigned char 
  3899 ;;  cntr            1   57[COMRAM] unsigned char 
  3900 ;;  exp             1   53[COMRAM] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  3   44[COMRAM] float 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3910 ;;      Params:         6       0       0       0       0       0       0       0       0
  3911 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3912 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3913 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3914 ;;Total ram usage:       15 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    1
  3917 ;; This function calls:
  3918 ;;		___ftpack
  3919 ;; This function is called by:
  3920 ;;		_setPeriodTo
  3921 ;;		_SetDutyCycleTo
  3922 ;;		_doorSetDutyCycleTo
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text22
  3927  0076F4                     __ptext22:
  3928                           	opt stack 0
  3929  0076F4                     ___ftmul:
  3930                           	opt stack 26
  3931                           
  3932                           ;incstack = 0
  3933  0076F4  C02F  F033         	movff	___ftmul@f1+2,??___ftmul
  3934  0076F8  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3935  0076FA  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3936  0076FC  342E               	rlcf	___ftmul@f1+1,w,c
  3937  0076FE  3633               	rlcf	??___ftmul& (0+255),f,c
  3938  007700  E301               	bnc	u1531
  3939  007702  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3940  007704                     u1531:
  3941  007704  5033               	movf	??___ftmul,w,c
  3942  007706  6E36               	movwf	___ftmul@exp,c
  3943  007708  5036               	movf	___ftmul@exp,w,c
  3944  00770A  A4D8               	btfss	status,2,c
  3945  00770C  D007               	goto	l2066
  3946  00770E  0E00               	movlw	0
  3947  007710  6E2D               	movwf	?___ftmul,c
  3948  007712  0E00               	movlw	0
  3949  007714  6E2E               	movwf	?___ftmul+1,c
  3950  007716  0E00               	movlw	0
  3951  007718  6E2F               	movwf	?___ftmul+2,c
  3952  00771A  0012               	return	
  3953  00771C                     l2066:
  3954  00771C  C032  F033         	movff	___ftmul@f2+2,??___ftmul
  3955  007720  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3956  007722  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3957  007724  3431               	rlcf	___ftmul@f2+1,w,c
  3958  007726  3633               	rlcf	??___ftmul& (0+255),f,c
  3959  007728  E301               	bnc	u1551
  3960  00772A  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3961  00772C                     u1551:
  3962  00772C  5033               	movf	??___ftmul,w,c
  3963  00772E  6E3B               	movwf	___ftmul@sign,c
  3964  007730  503B               	movf	___ftmul@sign,w,c
  3965  007732  A4D8               	btfss	status,2,c
  3966  007734  D007               	goto	l2072
  3967  007736  0E00               	movlw	0
  3968  007738  6E2D               	movwf	?___ftmul,c
  3969  00773A  0E00               	movlw	0
  3970  00773C  6E2E               	movwf	?___ftmul+1,c
  3971  00773E  0E00               	movlw	0
  3972  007740  6E2F               	movwf	?___ftmul+2,c
  3973  007742  0012               	return	
  3974  007744                     l2072:
  3975  007744  503B               	movf	___ftmul@sign,w,c
  3976  007746  0F7B               	addlw	123
  3977  007748  2636               	addwf	___ftmul@exp,f,c
  3978  00774A  C02F  F03B         	movff	___ftmul@f1+2,___ftmul@sign
  3979  00774E  5032               	movf	___ftmul@f2+2,w,c
  3980  007750  1A3B               	xorwf	___ftmul@sign,f,c
  3981  007752  0E80               	movlw	128
  3982  007754  163B               	andwf	___ftmul@sign,f,c
  3983  007756  8E2E               	bsf	___ftmul@f1+1,7,c
  3984  007758  8E31               	bsf	___ftmul@f2+1,7,c
  3985  00775A  0EFF               	movlw	255
  3986  00775C  1630               	andwf	___ftmul@f2,f,c
  3987  00775E  0EFF               	movlw	255
  3988  007760  1631               	andwf	___ftmul@f2+1,f,c
  3989  007762  0E00               	movlw	0
  3990  007764  1632               	andwf	___ftmul@f2+2,f,c
  3991  007766  0E00               	movlw	0
  3992  007768  6E37               	movwf	___ftmul@f3_as_product,c
  3993  00776A  0E00               	movlw	0
  3994  00776C  6E38               	movwf	___ftmul@f3_as_product+1,c
  3995  00776E  0E00               	movlw	0
  3996  007770  6E39               	movwf	___ftmul@f3_as_product+2,c
  3997  007772  0E07               	movlw	7
  3998  007774  6E3A               	movwf	___ftmul@cntr,c
  3999  007776                     l2086:
  4000  007776  A02D               	btfss	___ftmul@f1,0,c
  4001  007778  D006               	goto	l2090
  4002  00777A  5030               	movf	___ftmul@f2,w,c
  4003  00777C  2637               	addwf	___ftmul@f3_as_product,f,c
  4004  00777E  5031               	movf	___ftmul@f2+1,w,c
  4005  007780  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  4006  007782  5032               	movf	___ftmul@f2+2,w,c
  4007  007784  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  4008  007786                     l2090:
  4009  007786  90D8               	bcf	status,0,c
  4010  007788  322F               	rrcf	___ftmul@f1+2,f,c
  4011  00778A  322E               	rrcf	___ftmul@f1+1,f,c
  4012  00778C  322D               	rrcf	___ftmul@f1,f,c
  4013  00778E  90D8               	bcf	status,0,c
  4014  007790  3630               	rlcf	___ftmul@f2,f,c
  4015  007792  3631               	rlcf	___ftmul@f2+1,f,c
  4016  007794  3632               	rlcf	___ftmul@f2+2,f,c
  4017  007796  2E3A               	decfsz	___ftmul@cntr,f,c
  4018  007798  D7EE               	goto	l2086
  4019  00779A  0E09               	movlw	9
  4020  00779C  6E3A               	movwf	___ftmul@cntr,c
  4021  00779E                     l2096:
  4022  00779E  A02D               	btfss	___ftmul@f1,0,c
  4023  0077A0  D006               	goto	l2100
  4024  0077A2  5030               	movf	___ftmul@f2,w,c
  4025  0077A4  2637               	addwf	___ftmul@f3_as_product,f,c
  4026  0077A6  5031               	movf	___ftmul@f2+1,w,c
  4027  0077A8  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  4028  0077AA  5032               	movf	___ftmul@f2+2,w,c
  4029  0077AC  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  4030  0077AE                     l2100:
  4031  0077AE  90D8               	bcf	status,0,c
  4032  0077B0  322F               	rrcf	___ftmul@f1+2,f,c
  4033  0077B2  322E               	rrcf	___ftmul@f1+1,f,c
  4034  0077B4  322D               	rrcf	___ftmul@f1,f,c
  4035  0077B6  90D8               	bcf	status,0,c
  4036  0077B8  3239               	rrcf	___ftmul@f3_as_product+2,f,c
  4037  0077BA  3238               	rrcf	___ftmul@f3_as_product+1,f,c
  4038  0077BC  3237               	rrcf	___ftmul@f3_as_product,f,c
  4039  0077BE  2E3A               	decfsz	___ftmul@cntr,f,c
  4040  0077C0  D7EE               	goto	l2096
  4041  0077C2  C037  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4042  0077C6  C038  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4043  0077CA  C039  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4044  0077CE  C036  F004         	movff	___ftmul@exp,___ftpack@exp
  4045  0077D2  C03B  F005         	movff	___ftmul@sign,___ftpack@sign
  4046  0077D6  ECE6  F039         	call	___ftpack	;wreg free
  4047  0077DA  C001  F02D         	movff	?___ftpack,?___ftmul
  4048  0077DE  C002  F02E         	movff	?___ftpack+1,?___ftmul+1
  4049  0077E2  C003  F02F         	movff	?___ftpack+2,?___ftmul+2
  4050  0077E6  0012               	return	
  4051  0077E8                     __end_of___ftmul:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           postdec1	equ	0xFE5
  4060                           plusw1	equ	0xFE3
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function ___ftdiv *****************
  4071 ;; Defined at:
  4072 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  f1              3   17[COMRAM] float 
  4075 ;;  f2              3   20[COMRAM] float 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  f3              3   27[COMRAM] float 
  4078 ;;  sign            1   31[COMRAM] unsigned char 
  4079 ;;  exp             1   30[COMRAM] unsigned char 
  4080 ;;  cntr            1   26[COMRAM] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  3   17[COMRAM] float 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4090 ;;      Params:         6       0       0       0       0       0       0       0       0
  4091 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4092 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4093 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4094 ;;Total ram usage:       15 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    1
  4097 ;; This function calls:
  4098 ;;		___ftpack
  4099 ;; This function is called by:
  4100 ;;		_setPeriodTo
  4101 ;;		_SetDutyCycleTo
  4102 ;;		_doorSetDutyCycleTo
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text23
  4107  00760E                     __ptext23:
  4108                           	opt stack 0
  4109  00760E                     ___ftdiv:
  4110                           	opt stack 26
  4111                           
  4112                           ;incstack = 0
  4113  00760E  C014  F018         	movff	___ftdiv@f1+2,??___ftdiv
  4114  007612  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  4115  007614  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  4116  007616  3413               	rlcf	___ftdiv@f1+1,w,c
  4117  007618  3618               	rlcf	??___ftdiv& (0+255),f,c
  4118  00761A  E301               	bnc	u1481
  4119  00761C  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  4120  00761E                     u1481:
  4121  00761E  5018               	movf	??___ftdiv,w,c
  4122  007620  6E1F               	movwf	___ftdiv@exp,c
  4123  007622  501F               	movf	___ftdiv@exp,w,c
  4124  007624  A4D8               	btfss	status,2,c
  4125  007626  D007               	goto	l2020
  4126  007628  0E00               	movlw	0
  4127  00762A  6E12               	movwf	?___ftdiv,c
  4128  00762C  0E00               	movlw	0
  4129  00762E  6E13               	movwf	?___ftdiv+1,c
  4130  007630  0E00               	movlw	0
  4131  007632  6E14               	movwf	?___ftdiv+2,c
  4132  007634  0012               	return	
  4133  007636                     l2020:
  4134  007636  C017  F018         	movff	___ftdiv@f2+2,??___ftdiv
  4135  00763A  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  4136  00763C  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  4137  00763E  3416               	rlcf	___ftdiv@f2+1,w,c
  4138  007640  3618               	rlcf	??___ftdiv& (0+255),f,c
  4139  007642  E301               	bnc	u1501
  4140  007644  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  4141  007646                     u1501:
  4142  007646  5018               	movf	??___ftdiv,w,c
  4143  007648  6E20               	movwf	___ftdiv@sign,c
  4144  00764A  5020               	movf	___ftdiv@sign,w,c
  4145  00764C  A4D8               	btfss	status,2,c
  4146  00764E  D007               	goto	l2026
  4147  007650  0E00               	movlw	0
  4148  007652  6E12               	movwf	?___ftdiv,c
  4149  007654  0E00               	movlw	0
  4150  007656  6E13               	movwf	?___ftdiv+1,c
  4151  007658  0E00               	movlw	0
  4152  00765A  6E14               	movwf	?___ftdiv+2,c
  4153  00765C  0012               	return	
  4154  00765E                     l2026:
  4155  00765E  0E00               	movlw	0
  4156  007660  6E1C               	movwf	___ftdiv@f3,c
  4157  007662  0E00               	movlw	0
  4158  007664  6E1D               	movwf	___ftdiv@f3+1,c
  4159  007666  0E00               	movlw	0
  4160  007668  6E1E               	movwf	___ftdiv@f3+2,c
  4161  00766A  5020               	movf	___ftdiv@sign,w,c
  4162  00766C  0F89               	addlw	137
  4163  00766E  5E1F               	subwf	___ftdiv@exp,f,c
  4164  007670  C014  F020         	movff	___ftdiv@f1+2,___ftdiv@sign
  4165  007674  5017               	movf	___ftdiv@f2+2,w,c
  4166  007676  1A20               	xorwf	___ftdiv@sign,f,c
  4167  007678  0E80               	movlw	128
  4168  00767A  1620               	andwf	___ftdiv@sign,f,c
  4169  00767C  8E13               	bsf	___ftdiv@f1+1,7,c
  4170  00767E  0EFF               	movlw	255
  4171  007680  1612               	andwf	___ftdiv@f1,f,c
  4172  007682  0EFF               	movlw	255
  4173  007684  1613               	andwf	___ftdiv@f1+1,f,c
  4174  007686  0E00               	movlw	0
  4175  007688  1614               	andwf	___ftdiv@f1+2,f,c
  4176  00768A  8E16               	bsf	___ftdiv@f2+1,7,c
  4177  00768C  0EFF               	movlw	255
  4178  00768E  1615               	andwf	___ftdiv@f2,f,c
  4179  007690  0EFF               	movlw	255
  4180  007692  1616               	andwf	___ftdiv@f2+1,f,c
  4181  007694  0E00               	movlw	0
  4182  007696  1617               	andwf	___ftdiv@f2+2,f,c
  4183  007698  0E18               	movlw	24
  4184  00769A  6E1B               	movwf	___ftdiv@cntr,c
  4185  00769C                     l2046:
  4186  00769C  90D8               	bcf	status,0,c
  4187  00769E  361C               	rlcf	___ftdiv@f3,f,c
  4188  0076A0  361D               	rlcf	___ftdiv@f3+1,f,c
  4189  0076A2  361E               	rlcf	___ftdiv@f3+2,f,c
  4190  0076A4  5015               	movf	___ftdiv@f2,w,c
  4191  0076A6  5C12               	subwf	___ftdiv@f1,w,c
  4192  0076A8  5016               	movf	___ftdiv@f2+1,w,c
  4193  0076AA  5813               	subwfb	___ftdiv@f1+1,w,c
  4194  0076AC  5017               	movf	___ftdiv@f2+2,w,c
  4195  0076AE  5814               	subwfb	___ftdiv@f1+2,w,c
  4196  0076B0  A0D8               	btfss	status,0,c
  4197  0076B2  D007               	goto	l629
  4198  0076B4  5015               	movf	___ftdiv@f2,w,c
  4199  0076B6  5E12               	subwf	___ftdiv@f1,f,c
  4200  0076B8  5016               	movf	___ftdiv@f2+1,w,c
  4201  0076BA  5A13               	subwfb	___ftdiv@f1+1,f,c
  4202  0076BC  5017               	movf	___ftdiv@f2+2,w,c
  4203  0076BE  5A14               	subwfb	___ftdiv@f1+2,f,c
  4204  0076C0  801C               	bsf	___ftdiv@f3,0,c
  4205  0076C2                     l629:
  4206  0076C2  90D8               	bcf	status,0,c
  4207  0076C4  3612               	rlcf	___ftdiv@f1,f,c
  4208  0076C6  3613               	rlcf	___ftdiv@f1+1,f,c
  4209  0076C8  3614               	rlcf	___ftdiv@f1+2,f,c
  4210  0076CA  2E1B               	decfsz	___ftdiv@cntr,f,c
  4211  0076CC  D7E7               	goto	l2046
  4212  0076CE  C01C  F001         	movff	___ftdiv@f3,___ftpack@arg
  4213  0076D2  C01D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4214  0076D6  C01E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4215  0076DA  C01F  F004         	movff	___ftdiv@exp,___ftpack@exp
  4216  0076DE  C020  F005         	movff	___ftdiv@sign,___ftpack@sign
  4217  0076E2  ECE6  F039         	call	___ftpack	;wreg free
  4218  0076E6  C001  F012         	movff	?___ftpack,?___ftdiv
  4219  0076EA  C002  F013         	movff	?___ftpack+1,?___ftdiv+1
  4220  0076EE  C003  F014         	movff	?___ftpack+2,?___ftdiv+2
  4221  0076F2  0012               	return	
  4222  0076F4                     __end_of___ftdiv:
  4223                           	opt stack 0
  4224                           tblptru	equ	0xFF8
  4225                           tblptrh	equ	0xFF7
  4226                           tblptrl	equ	0xFF6
  4227                           tablat	equ	0xFF5
  4228                           postinc0	equ	0xFEE
  4229                           wreg	equ	0xFE8
  4230                           postdec1	equ	0xFE5
  4231                           plusw1	equ	0xFE3
  4232                           fsr1l	equ	0xFE1
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           plusw2	equ	0xFDB
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function ___ftadd *****************
  4242 ;; Defined at:
  4243 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  f1              3   32[COMRAM] float 
  4246 ;;  f2              3   35[COMRAM] float 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  exp1            1   43[COMRAM] unsigned char 
  4249 ;;  exp2            1   42[COMRAM] unsigned char 
  4250 ;;  sign            1   41[COMRAM] unsigned char 
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  3   32[COMRAM] float 
  4253 ;; Registers used:
  4254 ;;		wreg, status,2, status,0, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4260 ;;      Params:         6       0       0       0       0       0       0       0       0
  4261 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4262 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4263 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4264 ;;Total ram usage:       12 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    1
  4267 ;; This function calls:
  4268 ;;		___ftpack
  4269 ;; This function is called by:
  4270 ;;		_setPeriodTo
  4271 ;;		_SetDutyCycleTo
  4272 ;;		_doorSetDutyCycleTo
  4273 ;;		_round
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text24
  4278  0078DC                     __ptext24:
  4279                           	opt stack 0
  4280  0078DC                     ___ftadd:
  4281                           	opt stack 25
  4282                           
  4283                           ;incstack = 0
  4284  0078DC  C023  F027         	movff	___ftadd@f1+2,??___ftadd
  4285  0078E0  6A28               	clrf	(??___ftadd+1)& (0+255),c
  4286  0078E2  6A29               	clrf	(??___ftadd+2)& (0+255),c
  4287  0078E4  3422               	rlcf	___ftadd@f1+1,w,c
  4288  0078E6  3627               	rlcf	??___ftadd& (0+255),f,c
  4289  0078E8  E301               	bnc	u1241
  4290  0078EA  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  4291  0078EC                     u1241:
  4292  0078EC  5027               	movf	??___ftadd,w,c
  4293  0078EE  6E2C               	movwf	___ftadd@exp1,c
  4294  0078F0  C026  F027         	movff	___ftadd@f2+2,??___ftadd
  4295  0078F4  6A28               	clrf	(??___ftadd+1)& (0+255),c
  4296  0078F6  6A29               	clrf	(??___ftadd+2)& (0+255),c
  4297  0078F8  3425               	rlcf	___ftadd@f2+1,w,c
  4298  0078FA  3627               	rlcf	??___ftadd& (0+255),f,c
  4299  0078FC  E301               	bnc	u1251
  4300  0078FE  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  4301  007900                     u1251:
  4302  007900  5027               	movf	??___ftadd,w,c
  4303  007902  6E2B               	movwf	___ftadd@exp2,c
  4304  007904  502C               	movf	___ftadd@exp1,w,c
  4305  007906  B4D8               	btfsc	status,2,c
  4306  007908  D00B               	goto	l594
  4307  00790A  502B               	movf	___ftadd@exp2,w,c
  4308  00790C  5C2C               	subwf	___ftadd@exp1,w,c
  4309  00790E  B0D8               	btfsc	status,0,c
  4310  007910  D00E               	goto	l1916
  4311  007912  502C               	movf	___ftadd@exp1,w,c
  4312  007914  0800               	sublw	0
  4313  007916  242B               	addwf	___ftadd@exp2,w,c
  4314  007918  6E27               	movwf	??___ftadd& (0+255),c
  4315  00791A  0E18               	movlw	24
  4316  00791C  6427               	cpfsgt	??___ftadd,c
  4317  00791E  D007               	goto	l1916
  4318  007920                     l594:
  4319  007920  C024  F021         	movff	___ftadd@f2,?___ftadd
  4320  007924  C025  F022         	movff	___ftadd@f2+1,?___ftadd+1
  4321  007928  C026  F023         	movff	___ftadd@f2+2,?___ftadd+2
  4322  00792C  0012               	return	
  4323  00792E                     l1916:
  4324  00792E  502B               	movf	___ftadd@exp2,w,c
  4325  007930  B4D8               	btfsc	status,2,c
  4326  007932  D00B               	goto	l598
  4327  007934  502C               	movf	___ftadd@exp1,w,c
  4328  007936  5C2B               	subwf	___ftadd@exp2,w,c
  4329  007938  B0D8               	btfsc	status,0,c
  4330  00793A  D00E               	goto	l1922
  4331  00793C  502B               	movf	___ftadd@exp2,w,c
  4332  00793E  0800               	sublw	0
  4333  007940  242C               	addwf	___ftadd@exp1,w,c
  4334  007942  6E27               	movwf	??___ftadd& (0+255),c
  4335  007944  0E18               	movlw	24
  4336  007946  6427               	cpfsgt	??___ftadd,c
  4337  007948  D007               	goto	l1922
  4338  00794A                     l598:
  4339  00794A  C021  F021         	movff	___ftadd@f1,?___ftadd
  4340  00794E  C022  F022         	movff	___ftadd@f1+1,?___ftadd+1
  4341  007952  C023  F023         	movff	___ftadd@f1+2,?___ftadd+2
  4342  007956  0012               	return	
  4343  007958                     l1922:
  4344  007958  0E06               	movlw	6
  4345  00795A  6E2A               	movwf	___ftadd@sign,c
  4346  00795C  BE23               	btfsc	___ftadd@f1+2,7,c
  4347  00795E  8E2A               	bsf	___ftadd@sign,7,c
  4348  007960  BE26               	btfsc	___ftadd@f2+2,7,c
  4349  007962  8C2A               	bsf	___ftadd@sign,6,c
  4350  007964  8E22               	bsf	___ftadd@f1+1,7,c
  4351  007966  0EFF               	movlw	255
  4352  007968  1621               	andwf	___ftadd@f1,f,c
  4353  00796A  0EFF               	movlw	255
  4354  00796C  1622               	andwf	___ftadd@f1+1,f,c
  4355  00796E  0E00               	movlw	0
  4356  007970  1623               	andwf	___ftadd@f1+2,f,c
  4357  007972  8E25               	bsf	___ftadd@f2+1,7,c
  4358  007974  0EFF               	movlw	255
  4359  007976  1624               	andwf	___ftadd@f2,f,c
  4360  007978  0EFF               	movlw	255
  4361  00797A  1625               	andwf	___ftadd@f2+1,f,c
  4362  00797C  0E00               	movlw	0
  4363  00797E  1626               	andwf	___ftadd@f2+2,f,c
  4364  007980  502B               	movf	___ftadd@exp2,w,c
  4365  007982  5C2C               	subwf	___ftadd@exp1,w,c
  4366  007984  B0D8               	btfsc	status,0,c
  4367  007986  D01B               	goto	l1948
  4368  007988                     l1938:
  4369  007988  90D8               	bcf	status,0,c
  4370  00798A  3624               	rlcf	___ftadd@f2,f,c
  4371  00798C  3625               	rlcf	___ftadd@f2+1,f,c
  4372  00798E  3626               	rlcf	___ftadd@f2+2,f,c
  4373  007990  062B               	decf	___ftadd@exp2,f,c
  4374  007992  502C               	movf	___ftadd@exp1,w,c
  4375  007994  182B               	xorwf	___ftadd@exp2,w,c
  4376  007996  B4D8               	btfsc	status,2,c
  4377  007998  D00D               	goto	l1946
  4378  00799A  062A               	decf	___ftadd@sign,f,c
  4379  00799C  C02A  F027         	movff	___ftadd@sign,??___ftadd
  4380  0079A0  0E07               	movlw	7
  4381  0079A2  1627               	andwf	??___ftadd,f,c
  4382  0079A4  B4D8               	btfsc	status,2,c
  4383  0079A6  D006               	goto	l1946
  4384  0079A8  D7EF               	goto	l1938
  4385  0079AA                     l1944:
  4386  0079AA  90D8               	bcf	status,0,c
  4387  0079AC  3223               	rrcf	___ftadd@f1+2,f,c
  4388  0079AE  3222               	rrcf	___ftadd@f1+1,f,c
  4389  0079B0  3221               	rrcf	___ftadd@f1,f,c
  4390  0079B2  2A2C               	incf	___ftadd@exp1,f,c
  4391  0079B4                     l1946:
  4392  0079B4  502B               	movf	___ftadd@exp2,w,c
  4393  0079B6  182C               	xorwf	___ftadd@exp1,w,c
  4394  0079B8  B4D8               	btfsc	status,2,c
  4395  0079BA  D01F               	goto	l609
  4396  0079BC  D7F6               	goto	l1944
  4397  0079BE                     l1948:
  4398  0079BE  502C               	movf	___ftadd@exp1,w,c
  4399  0079C0  5C2B               	subwf	___ftadd@exp2,w,c
  4400  0079C2  B0D8               	btfsc	status,0,c
  4401  0079C4  D01A               	goto	l609
  4402  0079C6                     l1950:
  4403  0079C6  90D8               	bcf	status,0,c
  4404  0079C8  3621               	rlcf	___ftadd@f1,f,c
  4405  0079CA  3622               	rlcf	___ftadd@f1+1,f,c
  4406  0079CC  3623               	rlcf	___ftadd@f1+2,f,c
  4407  0079CE  062C               	decf	___ftadd@exp1,f,c
  4408  0079D0  502C               	movf	___ftadd@exp1,w,c
  4409  0079D2  182B               	xorwf	___ftadd@exp2,w,c
  4410  0079D4  B4D8               	btfsc	status,2,c
  4411  0079D6  D00D               	goto	l1958
  4412  0079D8  062A               	decf	___ftadd@sign,f,c
  4413  0079DA  C02A  F027         	movff	___ftadd@sign,??___ftadd
  4414  0079DE  0E07               	movlw	7
  4415  0079E0  1627               	andwf	??___ftadd,f,c
  4416  0079E2  B4D8               	btfsc	status,2,c
  4417  0079E4  D006               	goto	l1958
  4418  0079E6  D7EF               	goto	l1950
  4419  0079E8                     l1956:
  4420  0079E8  90D8               	bcf	status,0,c
  4421  0079EA  3226               	rrcf	___ftadd@f2+2,f,c
  4422  0079EC  3225               	rrcf	___ftadd@f2+1,f,c
  4423  0079EE  3224               	rrcf	___ftadd@f2,f,c
  4424  0079F0  2A2B               	incf	___ftadd@exp2,f,c
  4425  0079F2                     l1958:
  4426  0079F2  502B               	movf	___ftadd@exp2,w,c
  4427  0079F4  182C               	xorwf	___ftadd@exp1,w,c
  4428  0079F6  A4D8               	btfss	status,2,c
  4429  0079F8  D7F7               	goto	l1956
  4430  0079FA                     l609:
  4431  0079FA  AE2A               	btfss	___ftadd@sign,7,c
  4432  0079FC  D00C               	goto	l618
  4433  0079FE  0EFF               	movlw	255
  4434  007A00  1A21               	xorwf	___ftadd@f1,f,c
  4435  007A02  0EFF               	movlw	255
  4436  007A04  1A22               	xorwf	___ftadd@f1+1,f,c
  4437  007A06  0EFF               	movlw	255
  4438  007A08  1A23               	xorwf	___ftadd@f1+2,f,c
  4439  007A0A  0E01               	movlw	1
  4440  007A0C  2621               	addwf	___ftadd@f1,f,c
  4441  007A0E  0E00               	movlw	0
  4442  007A10  2222               	addwfc	___ftadd@f1+1,f,c
  4443  007A12  0E00               	movlw	0
  4444  007A14  2223               	addwfc	___ftadd@f1+2,f,c
  4445  007A16                     l618:
  4446  007A16  AC2A               	btfss	___ftadd@sign,6,c
  4447  007A18  D00C               	goto	l1964
  4448  007A1A  0EFF               	movlw	255
  4449  007A1C  1A24               	xorwf	___ftadd@f2,f,c
  4450  007A1E  0EFF               	movlw	255
  4451  007A20  1A25               	xorwf	___ftadd@f2+1,f,c
  4452  007A22  0EFF               	movlw	255
  4453  007A24  1A26               	xorwf	___ftadd@f2+2,f,c
  4454  007A26  0E01               	movlw	1
  4455  007A28  2624               	addwf	___ftadd@f2,f,c
  4456  007A2A  0E00               	movlw	0
  4457  007A2C  2225               	addwfc	___ftadd@f2+1,f,c
  4458  007A2E  0E00               	movlw	0
  4459  007A30  2226               	addwfc	___ftadd@f2+2,f,c
  4460  007A32                     l1964:
  4461  007A32  0E00               	movlw	0
  4462  007A34  6E2A               	movwf	___ftadd@sign,c
  4463  007A36  5021               	movf	___ftadd@f1,w,c
  4464  007A38  2624               	addwf	___ftadd@f2,f,c
  4465  007A3A  5022               	movf	___ftadd@f1+1,w,c
  4466  007A3C  2225               	addwfc	___ftadd@f2+1,f,c
  4467  007A3E  5023               	movf	___ftadd@f1+2,w,c
  4468  007A40  2226               	addwfc	___ftadd@f2+2,f,c
  4469  007A42  AE26               	btfss	___ftadd@f2+2,7,c
  4470  007A44  D00E               	goto	l1974
  4471  007A46  0EFF               	movlw	255
  4472  007A48  1A24               	xorwf	___ftadd@f2,f,c
  4473  007A4A  0EFF               	movlw	255
  4474  007A4C  1A25               	xorwf	___ftadd@f2+1,f,c
  4475  007A4E  0EFF               	movlw	255
  4476  007A50  1A26               	xorwf	___ftadd@f2+2,f,c
  4477  007A52  0E01               	movlw	1
  4478  007A54  2624               	addwf	___ftadd@f2,f,c
  4479  007A56  0E00               	movlw	0
  4480  007A58  2225               	addwfc	___ftadd@f2+1,f,c
  4481  007A5A  0E00               	movlw	0
  4482  007A5C  2226               	addwfc	___ftadd@f2+2,f,c
  4483  007A5E  0E01               	movlw	1
  4484  007A60  6E2A               	movwf	___ftadd@sign,c
  4485  007A62                     l1974:
  4486  007A62  C024  F001         	movff	___ftadd@f2,___ftpack@arg
  4487  007A66  C025  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4488  007A6A  C026  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4489  007A6E  C02C  F004         	movff	___ftadd@exp1,___ftpack@exp
  4490  007A72  C02A  F005         	movff	___ftadd@sign,___ftpack@sign
  4491  007A76  ECE6  F039         	call	___ftpack	;wreg free
  4492  007A7A  C001  F021         	movff	?___ftpack,?___ftadd
  4493  007A7E  C002  F022         	movff	?___ftpack+1,?___ftadd+1
  4494  007A82  C003  F023         	movff	?___ftpack+2,?___ftadd+2
  4495  007A86  0012               	return	
  4496  007A88                     __end_of___ftadd:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           tblptrh	equ	0xFF7
  4500                           tblptrl	equ	0xFF6
  4501                           tablat	equ	0xFF5
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           plusw1	equ	0xFE3
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           plusw2	equ	0xFDB
  4511                           fsr2h	equ	0xFDA
  4512                           fsr2l	equ	0xFD9
  4513                           status	equ	0xFD8
  4514                           
  4515 ;; *************** function ___awtoft *****************
  4516 ;; Defined at:
  4517 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  c               2    8[COMRAM] int 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  sign            1   11[COMRAM] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  3    8[COMRAM] float 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4531 ;;      Params:         3       0       0       0       0       0       0       0       0
  4532 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4534 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4535 ;;Total ram usage:        4 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    1
  4538 ;; This function calls:
  4539 ;;		___ftpack
  4540 ;; This function is called by:
  4541 ;;		_setPeriodTo
  4542 ;;		_SetDutyCycleTo
  4543 ;;		_doorSetDutyCycleTo
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text25
  4548  006CDE                     __ptext25:
  4549                           	opt stack 0
  4550  006CDE                     ___awtoft:
  4551                           	opt stack 26
  4552                           
  4553                           ;incstack = 0
  4554  006CDE  0E00               	movlw	0
  4555  006CE0  6E0C               	movwf	___awtoft@sign,c
  4556  006CE2  AE0A               	btfss	___awtoft@c+1,7,c
  4557  006CE4  D006               	goto	l2116
  4558  006CE6  6C09               	negf	___awtoft@c,c
  4559  006CE8  1E0A               	comf	___awtoft@c+1,f,c
  4560  006CEA  B0D8               	btfsc	status,0,c
  4561  006CEC  2A0A               	incf	___awtoft@c+1,f,c
  4562  006CEE  0E01               	movlw	1
  4563  006CF0  6E0C               	movwf	___awtoft@sign,c
  4564  006CF2                     l2116:
  4565  006CF2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4566  006CF6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4567  006CFA  6A03               	clrf	___ftpack@arg+2,c
  4568  006CFC  0E8E               	movlw	142
  4569  006CFE  6E04               	movwf	___ftpack@exp,c
  4570  006D00  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4571  006D04  ECE6  F039         	call	___ftpack	;wreg free
  4572  006D08  C001  F009         	movff	?___ftpack,?___awtoft
  4573  006D0C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4574  006D10  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4575  006D14  0012               	return	
  4576  006D16                     __end_of___awtoft:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           postinc0	equ	0xFEE
  4583                           wreg	equ	0xFE8
  4584                           postdec1	equ	0xFE5
  4585                           plusw1	equ	0xFE3
  4586                           fsr1l	equ	0xFE1
  4587                           indf2	equ	0xFDF
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           plusw2	equ	0xFDB
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function ___ftpack *****************
  4596 ;; Defined at:
  4597 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  arg             3    0[COMRAM] unsigned um
  4600 ;;  exp             1    3[COMRAM] unsigned char 
  4601 ;;  sign            1    4[COMRAM] unsigned char 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;		None
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  3    0[COMRAM] float 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2, status,0
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4613 ;;      Params:         5       0       0       0       0       0       0       0       0
  4614 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4615 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4616 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4617 ;;Total ram usage:        8 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		___altoft
  4623 ;;		___awtoft
  4624 ;;		___ftadd
  4625 ;;		___ftdiv
  4626 ;;		___ftmul
  4627 ;;		___lltoft
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text26
  4632  0073CC                     __ptext26:
  4633                           	opt stack 0
  4634  0073CC                     ___ftpack:
  4635                           	opt stack 24
  4636                           
  4637                           ;incstack = 0
  4638  0073CC  5004               	movf	___ftpack@exp,w,c
  4639  0073CE  B4D8               	btfsc	status,2,c
  4640  0073D0  D005               	goto	l1798
  4641  0073D2  5001               	movf	___ftpack@arg,w,c
  4642  0073D4  1002               	iorwf	___ftpack@arg+1,w,c
  4643  0073D6  1003               	iorwf	___ftpack@arg+2,w,c
  4644  0073D8  A4D8               	btfss	status,2,c
  4645  0073DA  D00C               	goto	l1804
  4646  0073DC                     l1798:
  4647  0073DC  0E00               	movlw	0
  4648  0073DE  6E01               	movwf	?___ftpack,c
  4649  0073E0  0E00               	movlw	0
  4650  0073E2  6E02               	movwf	?___ftpack+1,c
  4651  0073E4  0E00               	movlw	0
  4652  0073E6  6E03               	movwf	?___ftpack+2,c
  4653  0073E8  0012               	return	
  4654  0073EA                     l1802:
  4655  0073EA  2A04               	incf	___ftpack@exp,f,c
  4656  0073EC  90D8               	bcf	status,0,c
  4657  0073EE  3203               	rrcf	___ftpack@arg+2,f,c
  4658  0073F0  3202               	rrcf	___ftpack@arg+1,f,c
  4659  0073F2  3201               	rrcf	___ftpack@arg,f,c
  4660  0073F4                     l1804:
  4661  0073F4  0E00               	movlw	0
  4662  0073F6  1401               	andwf	___ftpack@arg,w,c
  4663  0073F8  6E06               	movwf	??___ftpack& (0+255),c
  4664  0073FA  0E00               	movlw	0
  4665  0073FC  1402               	andwf	___ftpack@arg+1,w,c
  4666  0073FE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4667  007400  0EFE               	movlw	254
  4668  007402  1403               	andwf	___ftpack@arg+2,w,c
  4669  007404  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4670  007406  5006               	movf	??___ftpack,w,c
  4671  007408  1007               	iorwf	??___ftpack+1,w,c
  4672  00740A  1008               	iorwf	??___ftpack+2,w,c
  4673  00740C  B4D8               	btfsc	status,2,c
  4674  00740E  D00C               	goto	l1810
  4675  007410  D7EC               	goto	l1802
  4676  007412                     l1806:
  4677  007412  2A04               	incf	___ftpack@exp,f,c
  4678  007414  0E01               	movlw	1
  4679  007416  2601               	addwf	___ftpack@arg,f,c
  4680  007418  0E00               	movlw	0
  4681  00741A  2202               	addwfc	___ftpack@arg+1,f,c
  4682  00741C  0E00               	movlw	0
  4683  00741E  2203               	addwfc	___ftpack@arg+2,f,c
  4684  007420  90D8               	bcf	status,0,c
  4685  007422  3203               	rrcf	___ftpack@arg+2,f,c
  4686  007424  3202               	rrcf	___ftpack@arg+1,f,c
  4687  007426  3201               	rrcf	___ftpack@arg,f,c
  4688  007428                     l1810:
  4689  007428  0E00               	movlw	0
  4690  00742A  1401               	andwf	___ftpack@arg,w,c
  4691  00742C  6E06               	movwf	??___ftpack& (0+255),c
  4692  00742E  0E00               	movlw	0
  4693  007430  1402               	andwf	___ftpack@arg+1,w,c
  4694  007432  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4695  007434  0EFF               	movlw	255
  4696  007436  1403               	andwf	___ftpack@arg+2,w,c
  4697  007438  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4698  00743A  5006               	movf	??___ftpack,w,c
  4699  00743C  1007               	iorwf	??___ftpack+1,w,c
  4700  00743E  1008               	iorwf	??___ftpack+2,w,c
  4701  007440  B4D8               	btfsc	status,2,c
  4702  007442  D006               	goto	l1814
  4703  007444  D7E6               	goto	l1806
  4704  007446                     l1812:
  4705  007446  0604               	decf	___ftpack@exp,f,c
  4706  007448  90D8               	bcf	status,0,c
  4707  00744A  3601               	rlcf	___ftpack@arg,f,c
  4708  00744C  3602               	rlcf	___ftpack@arg+1,f,c
  4709  00744E  3603               	rlcf	___ftpack@arg+2,f,c
  4710  007450                     l1814:
  4711  007450  BE02               	btfsc	___ftpack@arg+1,7,c
  4712  007452  D003               	goto	l571
  4713  007454  0E02               	movlw	2
  4714  007456  6004               	cpfslt	___ftpack@exp,c
  4715  007458  D7F6               	goto	l1812
  4716  00745A                     l571:
  4717  00745A  A004               	btfss	___ftpack@exp,0,c
  4718  00745C  9E02               	bcf	___ftpack@arg+1,7,c
  4719  00745E  90D8               	bcf	status,0,c
  4720  007460  3204               	rrcf	___ftpack@exp,f,c
  4721  007462  5004               	movf	___ftpack@exp,w,c
  4722  007464  1203               	iorwf	___ftpack@arg+2,f,c
  4723  007466  5005               	movf	___ftpack@sign,w,c
  4724  007468  A4D8               	btfss	status,2,c
  4725  00746A  8E03               	bsf	___ftpack@arg+2,7,c
  4726  00746C  C001  F001         	movff	___ftpack@arg,?___ftpack
  4727  007470  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4728  007474  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4729  007478  0012               	return	
  4730  00747A                     __end_of___ftpack:
  4731                           	opt stack 0
  4732                           tblptru	equ	0xFF8
  4733                           tblptrh	equ	0xFF7
  4734                           tblptrl	equ	0xFF6
  4735                           tablat	equ	0xFF5
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           plusw1	equ	0xFE3
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           plusw2	equ	0xFDB
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _delay *****************
  4750 ;; Defined at:
  4751 ;;		line 81 in file "MotorFunction.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  val             2    0[COMRAM] unsigned int 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  j               2    4[COMRAM] unsigned int 
  4756 ;;  i               2    2[COMRAM] unsigned int 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;		None               void
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4766 ;;      Params:         2       0       0       0       0       0       0       0       0
  4767 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4769 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4770 ;;Total ram usage:        6 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; This function calls:
  4773 ;;		Nothing
  4774 ;; This function is called by:
  4775 ;;		_motorlock_unlock
  4776 ;;		_motorlock_lock
  4777 ;;		_motordoor_open
  4778 ;;		_motordoor_close
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text27
  4783  006CA8                     __ptext27:
  4784                           	opt stack 0
  4785  006CA8                     _delay:
  4786                           	opt stack 28
  4787                           
  4788                           ;MotorFunction.c: 83: unsigned int i,j;
  4789                           ;MotorFunction.c: 84: for(i=0;i<val;i++)
  4790                           
  4791                           ;incstack = 0
  4792  006CA8  0E00               	movlw	0
  4793  006CAA  6E04               	movwf	delay@i+1,c
  4794  006CAC  0E00               	movlw	0
  4795  006CAE  6E03               	movwf	delay@i,c
  4796  006CB0  D00F               	goto	l2248
  4797  006CB2                     l2236:
  4798                           
  4799                           ;MotorFunction.c: 85: for(j=0;j<10;j++);
  4800  006CB2  0E00               	movlw	0
  4801  006CB4  6E06               	movwf	delay@j+1,c
  4802  006CB6  0E00               	movlw	0
  4803  006CB8  6E05               	movwf	delay@j,c
  4804  006CBA                     l2238:
  4805  006CBA  5006               	movf	delay@j+1,w,c
  4806  006CBC  E107               	bnz	l2246
  4807  006CBE  0E0A               	movlw	10
  4808  006CC0  5C05               	subwf	delay@j,w,c
  4809  006CC2  B0D8               	btfsc	status,0,c
  4810  006CC4  D003               	goto	l2246
  4811  006CC6  4A05               	infsnz	delay@j,f,c
  4812  006CC8  2A06               	incf	delay@j+1,f,c
  4813  006CCA  D7F7               	goto	l2238
  4814  006CCC                     l2246:
  4815  006CCC  4A03               	infsnz	delay@i,f,c
  4816  006CCE  2A04               	incf	delay@i+1,f,c
  4817  006CD0                     l2248:
  4818  006CD0  5001               	movf	delay@val,w,c
  4819  006CD2  5C03               	subwf	delay@i,w,c
  4820  006CD4  5002               	movf	delay@val+1,w,c
  4821  006CD6  5804               	subwfb	delay@i+1,w,c
  4822  006CD8  B0D8               	btfsc	status,0,c
  4823  006CDA  0012               	return	
  4824  006CDC  D7EA               	goto	l2236
  4825  006CDE                     __end_of_delay:
  4826                           	opt stack 0
  4827                           tblptru	equ	0xFF8
  4828                           tblptrh	equ	0xFF7
  4829                           tblptrl	equ	0xFF6
  4830                           tablat	equ	0xFF5
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           postdec1	equ	0xFE5
  4834                           plusw1	equ	0xFE3
  4835                           fsr1l	equ	0xFE1
  4836                           indf2	equ	0xFDF
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           plusw2	equ	0xFDB
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _PWMdoor_Init *****************
  4845 ;; Defined at:
  4846 ;;		line 26 in file "MotorFunction.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, status,2
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_motordoor_open
  4870 ;;		_motordoor_close
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text28
  4875  006B42                     __ptext28:
  4876                           	opt stack 0
  4877  006B42                     _PWMdoor_Init:
  4878                           	opt stack 28
  4879                           
  4880                           ;MotorFunction.c: 27: TRISCbits.TRISC1 = 0;
  4881                           
  4882                           ;incstack = 0
  4883  006B42  9294               	bcf	3988,1,c	;volatile
  4884                           
  4885                           ;MotorFunction.c: 28: CCP1CON = 0x0C;
  4886  006B44  0E0C               	movlw	12
  4887  006B46  6EBD               	movwf	4029,c	;volatile
  4888  006B48  0012               	return		;funcret
  4889  006B4A                     __end_of_PWMdoor_Init:
  4890                           	opt stack 0
  4891                           tblptru	equ	0xFF8
  4892                           tblptrh	equ	0xFF7
  4893                           tblptrl	equ	0xFF6
  4894                           tablat	equ	0xFF5
  4895                           postinc0	equ	0xFEE
  4896                           wreg	equ	0xFE8
  4897                           postdec1	equ	0xFE5
  4898                           plusw1	equ	0xFE3
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           plusw2	equ	0xFDB
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _lcd_write_data *****************
  4909 ;; Defined at:
  4910 ;;		line 54 in file "lcd_utilities.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  data            1    wreg     unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  data            1    2[COMRAM] unsigned char 
  4915 ;;  temp1           1    3[COMRAM] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4925 ;;      Params:         0       0       0       0       0       0       0       0       0
  4926 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4927 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4928 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4929 ;;Total ram usage:        3 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    1
  4932 ;; This function calls:
  4933 ;;		_lcd_strobe
  4934 ;; This function is called by:
  4935 ;;		_LockMotor
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text29
  4940  00729A                     __ptext29:
  4941                           	opt stack 0
  4942  00729A                     _lcd_write_data:
  4943                           	opt stack 28
  4944                           
  4945                           ;incstack = 0
  4946                           ;lcd_write_data@data stored from wreg
  4947  00729A  6E03               	movwf	lcd_write_data@data,c
  4948                           
  4949                           ;lcd_utilities.c: 56: char temp1;
  4950                           ;lcd_utilities.c: 58: PORTDbits.RD6 = 1;
  4951  00729C  8C83               	bsf	3971,6,c	;volatile
  4952                           
  4953                           ;lcd_utilities.c: 59: _delay((unsigned long)((4)*(48000000/4000.0)));
  4954  00729E  0E3F               	movlw	63
  4955  0072A0  6E02               	movwf	??_lcd_write_data& (0+255),c
  4956  0072A2  0E55               	movlw	85
  4957  0072A4                     u2107:
  4958  0072A4  2EE8               	decfsz	wreg,f,c
  4959  0072A6  D7FE               	goto	u2107
  4960  0072A8  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4961  0072AA  D7FC               	goto	u2107
  4962  0072AC  F000               	nop	
  4963                           
  4964                           ;lcd_utilities.c: 61: temp1 = data;
  4965  0072AE  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4966                           
  4967                           ;lcd_utilities.c: 62: temp1 = temp1 >> 4;
  4968  0072B2  3804               	swapf	lcd_write_data@temp1,w,c
  4969  0072B4  0B0F               	andlw	15
  4970  0072B6  6E04               	movwf	lcd_write_data@temp1,c
  4971                           
  4972                           ;lcd_utilities.c: 63: PORTD = temp1 & 0x0F;
  4973  0072B8  5004               	movf	lcd_write_data@temp1,w,c
  4974  0072BA  0B0F               	andlw	15
  4975  0072BC  6E83               	movwf	3971,c	;volatile
  4976                           
  4977                           ;lcd_utilities.c: 64: _delay((unsigned long)((8)*(48000000/4000.0)));
  4978  0072BE  0E7D               	movlw	125
  4979  0072C0  6E02               	movwf	??_lcd_write_data& (0+255),c
  4980  0072C2  0EAC               	movlw	172
  4981  0072C4                     u2117:
  4982  0072C4  2EE8               	decfsz	wreg,f,c
  4983  0072C6  D7FE               	goto	u2117
  4984  0072C8  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4985  0072CA  D7FC               	goto	u2117
  4986                           
  4987                           ;lcd_utilities.c: 65: PORTDbits.RD6 = 1;
  4988  0072CC  8C83               	bsf	3971,6,c	;volatile
  4989                           
  4990                           ;lcd_utilities.c: 66: _delay((unsigned long)((8)*(48000000/4000.0)));
  4991  0072CE  0E7D               	movlw	125
  4992  0072D0  6E02               	movwf	??_lcd_write_data& (0+255),c
  4993  0072D2  0EAC               	movlw	172
  4994  0072D4                     u2127:
  4995  0072D4  2EE8               	decfsz	wreg,f,c
  4996  0072D6  D7FE               	goto	u2127
  4997  0072D8  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4998  0072DA  D7FC               	goto	u2127
  4999                           
  5000                           ;lcd_utilities.c: 68: lcd_strobe();
  5001  0072DC  ECD4  F035         	call	_lcd_strobe	;wreg free
  5002                           
  5003                           ;lcd_utilities.c: 69: _delay((unsigned long)((8)*(48000000/4000.0)));
  5004  0072E0  0E7D               	movlw	125
  5005  0072E2  6E02               	movwf	??_lcd_write_data& (0+255),c
  5006  0072E4  0EAC               	movlw	172
  5007  0072E6                     u2137:
  5008  0072E6  2EE8               	decfsz	wreg,f,c
  5009  0072E8  D7FE               	goto	u2137
  5010  0072EA  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  5011  0072EC  D7FC               	goto	u2137
  5012                           
  5013                           ;lcd_utilities.c: 71: temp1 = data;
  5014  0072EE  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  5015                           
  5016                           ;lcd_utilities.c: 72: PORTD = temp1 & 0x0F;
  5017  0072F2  5004               	movf	lcd_write_data@temp1,w,c
  5018  0072F4  0B0F               	andlw	15
  5019  0072F6  6E83               	movwf	3971,c	;volatile
  5020                           
  5021                           ;lcd_utilities.c: 73: _delay((unsigned long)((8)*(48000000/4000.0)));
  5022  0072F8  0E7D               	movlw	125
  5023  0072FA  6E02               	movwf	??_lcd_write_data& (0+255),c
  5024  0072FC  0EAC               	movlw	172
  5025  0072FE                     u2147:
  5026  0072FE  2EE8               	decfsz	wreg,f,c
  5027  007300  D7FE               	goto	u2147
  5028  007302  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  5029  007304  D7FC               	goto	u2147
  5030                           
  5031                           ;lcd_utilities.c: 74: PORTDbits.RD6 = 1;
  5032  007306  8C83               	bsf	3971,6,c	;volatile
  5033                           
  5034                           ;lcd_utilities.c: 75: _delay((unsigned long)((10)*(48000000/4000.0)));
  5035  007308  0E9C               	movlw	156
  5036  00730A  6E02               	movwf	??_lcd_write_data& (0+255),c
  5037  00730C  0ED7               	movlw	215
  5038  00730E                     u2157:
  5039  00730E  2EE8               	decfsz	wreg,f,c
  5040  007310  D7FE               	goto	u2157
  5041  007312  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  5042  007314  D7FC               	goto	u2157
  5043  007316  F000               	nop	
  5044                           
  5045                           ;lcd_utilities.c: 77: lcd_strobe();
  5046  007318  ECD4  F035         	call	_lcd_strobe	;wreg free
  5047                           
  5048                           ;lcd_utilities.c: 78: _delay((unsigned long)((10)*(48000000/4000.0)));
  5049  00731C  0E9C               	movlw	156
  5050  00731E  6E02               	movwf	??_lcd_write_data& (0+255),c
  5051  007320  0ED7               	movlw	215
  5052  007322                     u2167:
  5053  007322  2EE8               	decfsz	wreg,f,c
  5054  007324  D7FE               	goto	u2167
  5055  007326  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  5056  007328  D7FC               	goto	u2167
  5057  00732A  F000               	nop	
  5058  00732C  0012               	return		;funcret
  5059  00732E                     __end_of_lcd_write_data:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           tblptrh	equ	0xFF7
  5063                           tblptrl	equ	0xFF6
  5064                           tablat	equ	0xFF5
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           postdec1	equ	0xFE5
  5068                           plusw1	equ	0xFE3
  5069                           fsr1l	equ	0xFE1
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           plusw2	equ	0xFDB
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _lcd_init *****************
  5079 ;; Defined at:
  5080 ;;		line 94 in file "lcd_utilities.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;  i               2    5[COMRAM] int 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;		None               void
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5094 ;;      Params:         0       0       0       0       0       0       0       0       0
  5095 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5096 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5097 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5098 ;;Total ram usage:        3 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    2
  5101 ;; This function calls:
  5102 ;;		_lcd_write_cmd
  5103 ;; This function is called by:
  5104 ;;		_ultra
  5105 ;;		_LockMotor
  5106 ;;		_pir
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text30
  5111  006FAE                     __ptext30:
  5112                           	opt stack 0
  5113  006FAE                     _lcd_init:
  5114                           	opt stack 27
  5115                           
  5116                           ;lcd_utilities.c: 96: int i;
  5117                           ;lcd_utilities.c: 97: TRISD = 0x00;
  5118                           
  5119                           ;incstack = 0
  5120  006FAE  0E00               	movlw	0
  5121  006FB0  6E95               	movwf	3989,c	;volatile
  5122                           
  5123                           ;lcd_utilities.c: 98: PORTD = 0x00;
  5124  006FB2  0E00               	movlw	0
  5125  006FB4  6E83               	movwf	3971,c	;volatile
  5126                           
  5127                           ;lcd_utilities.c: 99: PORTDbits.RD4 = 0;
  5128  006FB6  9883               	bcf	3971,4,c	;volatile
  5129                           
  5130                           ;lcd_utilities.c: 100: PORTDbits.RD6 = 0;
  5131  006FB8  9C83               	bcf	3971,6,c	;volatile
  5132                           
  5133                           ;lcd_utilities.c: 101: PORTDbits.RD5 = 0;
  5134  006FBA  9A83               	bcf	3971,5,c	;volatile
  5135                           
  5136                           ;lcd_utilities.c: 103: for(i=0;i<100;i++)
  5137  006FBC  0E00               	movlw	0
  5138  006FBE  6E07               	movwf	lcd_init@i+1,c
  5139  006FC0  0E00               	movlw	0
  5140  006FC2  6E06               	movwf	lcd_init@i,c
  5141  006FC4                     l2280:
  5142  006FC4  BE07               	btfsc	lcd_init@i+1,7,c
  5143  006FC6  D006               	goto	l2284
  5144  006FC8  5007               	movf	lcd_init@i+1,w,c
  5145  006FCA  E10F               	bnz	l2288
  5146  006FCC  0E64               	movlw	100
  5147  006FCE  5C06               	subwf	lcd_init@i,w,c
  5148  006FD0  B0D8               	btfsc	status,0,c
  5149  006FD2  D00B               	goto	l2288
  5150  006FD4                     l2284:
  5151                           
  5152                           ;lcd_utilities.c: 104: _delay((unsigned long)((10)*(48000000/4000.0)));
  5153  006FD4  0E9C               	movlw	156
  5154  006FD6  6E05               	movwf	??_lcd_init& (0+255),c
  5155  006FD8  0ED7               	movlw	215
  5156  006FDA                     u2177:
  5157  006FDA  2EE8               	decfsz	wreg,f,c
  5158  006FDC  D7FE               	goto	u2177
  5159  006FDE  2E05               	decfsz	??_lcd_init& (0+255),f,c
  5160  006FE0  D7FC               	goto	u2177
  5161  006FE2  F000               	nop	
  5162  006FE4  4A06               	infsnz	lcd_init@i,f,c
  5163  006FE6  2A07               	incf	lcd_init@i+1,f,c
  5164  006FE8  D7ED               	goto	l2280
  5165  006FEA                     l2288:
  5166                           
  5167                           ;lcd_utilities.c: 117: lcd_write_cmd(0x33);
  5168  006FEA  0E33               	movlw	51
  5169  006FEC  EC9F  F037         	call	_lcd_write_cmd
  5170                           
  5171                           ;lcd_utilities.c: 118: lcd_write_cmd(0x32);
  5172  006FF0  0E32               	movlw	50
  5173  006FF2  EC9F  F037         	call	_lcd_write_cmd
  5174                           
  5175                           ;lcd_utilities.c: 120: lcd_write_cmd(0x28);
  5176  006FF6  0E28               	movlw	40
  5177  006FF8  EC9F  F037         	call	_lcd_write_cmd
  5178                           
  5179                           ;lcd_utilities.c: 123: lcd_write_cmd(0x0E);
  5180  006FFC  0E0E               	movlw	14
  5181  006FFE  EC9F  F037         	call	_lcd_write_cmd
  5182                           
  5183                           ;lcd_utilities.c: 126: lcd_write_cmd(0x06);
  5184  007002  0E06               	movlw	6
  5185  007004  EC9F  F037         	call	_lcd_write_cmd
  5186                           
  5187                           ;lcd_utilities.c: 130: lcd_write_cmd(0x01);
  5188  007008  0E01               	movlw	1
  5189  00700A  EC9F  F037         	call	_lcd_write_cmd
  5190                           
  5191                           ;lcd_utilities.c: 132: _delay((unsigned long)((10)*(48000000/4000.0)));
  5192  00700E  0E9C               	movlw	156
  5193  007010  6E05               	movwf	??_lcd_init& (0+255),c
  5194  007012  0ED7               	movlw	215
  5195  007014                     u2187:
  5196  007014  2EE8               	decfsz	wreg,f,c
  5197  007016  D7FE               	goto	u2187
  5198  007018  2E05               	decfsz	??_lcd_init& (0+255),f,c
  5199  00701A  D7FC               	goto	u2187
  5200  00701C  F000               	nop	
  5201  00701E  0012               	return		;funcret
  5202  007020                     __end_of_lcd_init:
  5203                           	opt stack 0
  5204                           tblptru	equ	0xFF8
  5205                           tblptrh	equ	0xFF7
  5206                           tblptrl	equ	0xFF6
  5207                           tablat	equ	0xFF5
  5208                           postinc0	equ	0xFEE
  5209                           wreg	equ	0xFE8
  5210                           postdec1	equ	0xFE5
  5211                           plusw1	equ	0xFE3
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           plusw2	equ	0xFDB
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function _lcd_write_cmd *****************
  5222 ;; Defined at:
  5223 ;;		line 29 in file "lcd_utilities.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  cmd             1    wreg     unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  cmd             1    2[COMRAM] unsigned char 
  5228 ;;  temp2           1    3[COMRAM] unsigned char 
  5229 ;; Return value:  Size  Location     Type
  5230 ;;		None               void
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5240 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5241 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5242 ;;Total ram usage:        3 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    1
  5245 ;; This function calls:
  5246 ;;		_lcd_strobe
  5247 ;; This function is called by:
  5248 ;;		_lcd_init
  5249 ;;		_LockMotor
  5250 ;;		_pir
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text31
  5255  006F3E                     __ptext31:
  5256                           	opt stack 0
  5257  006F3E                     _lcd_write_cmd:
  5258                           	opt stack 27
  5259                           
  5260                           ;incstack = 0
  5261                           ;lcd_write_cmd@cmd stored from wreg
  5262  006F3E  6E03               	movwf	lcd_write_cmd@cmd,c
  5263                           
  5264                           ;lcd_utilities.c: 31: unsigned char temp2;
  5265                           ;lcd_utilities.c: 32: PORTDbits.RD6 = 0;
  5266  006F40  9C83               	bcf	3971,6,c	;volatile
  5267                           
  5268                           ;lcd_utilities.c: 33: _delay((unsigned long)((4)*(48000000/4000.0)));
  5269  006F42  0E3F               	movlw	63
  5270  006F44  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5271  006F46  0E55               	movlw	85
  5272  006F48                     u2197:
  5273  006F48  2EE8               	decfsz	wreg,f,c
  5274  006F4A  D7FE               	goto	u2197
  5275  006F4C  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5276  006F4E  D7FC               	goto	u2197
  5277  006F50  F000               	nop	
  5278                           
  5279                           ;lcd_utilities.c: 34: temp2 = cmd;
  5280  006F52  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  5281                           
  5282                           ;lcd_utilities.c: 35: temp2 = temp2 >> 4;
  5283  006F56  3804               	swapf	lcd_write_cmd@temp2,w,c
  5284  006F58  0B0F               	andlw	15
  5285  006F5A  6E04               	movwf	lcd_write_cmd@temp2,c
  5286                           
  5287                           ;lcd_utilities.c: 36: PORTD = temp2 & 0x0F;
  5288  006F5C  5004               	movf	lcd_write_cmd@temp2,w,c
  5289  006F5E  0B0F               	andlw	15
  5290  006F60  6E83               	movwf	3971,c	;volatile
  5291                           
  5292                           ;lcd_utilities.c: 38: _delay((unsigned long)((8)*(48000000/4000.0)));
  5293  006F62  0E7D               	movlw	125
  5294  006F64  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5295  006F66  0EAC               	movlw	172
  5296  006F68                     u2207:
  5297  006F68  2EE8               	decfsz	wreg,f,c
  5298  006F6A  D7FE               	goto	u2207
  5299  006F6C  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5300  006F6E  D7FC               	goto	u2207
  5301                           
  5302                           ;lcd_utilities.c: 39: lcd_strobe();
  5303  006F70  ECD4  F035         	call	_lcd_strobe	;wreg free
  5304                           
  5305                           ;lcd_utilities.c: 41: _delay((unsigned long)((8)*(48000000/4000.0)));
  5306  006F74  0E7D               	movlw	125
  5307  006F76  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5308  006F78  0EAC               	movlw	172
  5309  006F7A                     u2217:
  5310  006F7A  2EE8               	decfsz	wreg,f,c
  5311  006F7C  D7FE               	goto	u2217
  5312  006F7E  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5313  006F80  D7FC               	goto	u2217
  5314                           
  5315                           ;lcd_utilities.c: 43: temp2 = cmd;
  5316  006F82  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  5317                           
  5318                           ;lcd_utilities.c: 44: PORTD = temp2 & 0x0F;
  5319  006F86  5004               	movf	lcd_write_cmd@temp2,w,c
  5320  006F88  0B0F               	andlw	15
  5321  006F8A  6E83               	movwf	3971,c	;volatile
  5322                           
  5323                           ;lcd_utilities.c: 46: _delay((unsigned long)((8)*(48000000/4000.0)));
  5324  006F8C  0E7D               	movlw	125
  5325  006F8E  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5326  006F90  0EAC               	movlw	172
  5327  006F92                     u2227:
  5328  006F92  2EE8               	decfsz	wreg,f,c
  5329  006F94  D7FE               	goto	u2227
  5330  006F96  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5331  006F98  D7FC               	goto	u2227
  5332                           
  5333                           ;lcd_utilities.c: 47: lcd_strobe();
  5334  006F9A  ECD4  F035         	call	_lcd_strobe	;wreg free
  5335                           
  5336                           ;lcd_utilities.c: 48: _delay((unsigned long)((8)*(48000000/4000.0)));
  5337  006F9E  0E7D               	movlw	125
  5338  006FA0  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  5339  006FA2  0EAC               	movlw	172
  5340  006FA4                     u2237:
  5341  006FA4  2EE8               	decfsz	wreg,f,c
  5342  006FA6  D7FE               	goto	u2237
  5343  006FA8  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  5344  006FAA  D7FC               	goto	u2237
  5345  006FAC  0012               	return		;funcret
  5346  006FAE                     __end_of_lcd_write_cmd:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           postinc0	equ	0xFEE
  5353                           wreg	equ	0xFE8
  5354                           postdec1	equ	0xFE5
  5355                           plusw1	equ	0xFE3
  5356                           fsr1l	equ	0xFE1
  5357                           indf2	equ	0xFDF
  5358                           postinc2	equ	0xFDE
  5359                           postdec2	equ	0xFDD
  5360                           plusw2	equ	0xFDB
  5361                           fsr2h	equ	0xFDA
  5362                           fsr2l	equ	0xFD9
  5363                           status	equ	0xFD8
  5364                           
  5365 ;; *************** function _lcd_strobe *****************
  5366 ;; Defined at:
  5367 ;;		line 84 in file "lcd_utilities.c"
  5368 ;; Parameters:    Size  Location     Type
  5369 ;;		None
  5370 ;; Auto vars:     Size  Location     Type
  5371 ;;		None
  5372 ;; Return value:  Size  Location     Type
  5373 ;;		None               void
  5374 ;; Registers used:
  5375 ;;		wreg
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5381 ;;      Params:         0       0       0       0       0       0       0       0       0
  5382 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5383 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5384 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5385 ;;Total ram usage:        1 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_lcd_write_cmd
  5391 ;;		_lcd_write_data
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text32
  5396  006BA8                     __ptext32:
  5397                           	opt stack 0
  5398  006BA8                     _lcd_strobe:
  5399                           	opt stack 27
  5400                           
  5401                           ;lcd_utilities.c: 86: PORTDbits.RD4 = 1;
  5402                           
  5403                           ;incstack = 0
  5404  006BA8  8883               	bsf	3971,4,c	;volatile
  5405                           
  5406                           ;lcd_utilities.c: 87: _delay((unsigned long)((8)*(48000000/4000.0)));
  5407  006BAA  0E7D               	movlw	125
  5408  006BAC  6E01               	movwf	??_lcd_strobe& (0+255),c
  5409  006BAE  0EAC               	movlw	172
  5410  006BB0                     u2247:
  5411  006BB0  2EE8               	decfsz	wreg,f,c
  5412  006BB2  D7FE               	goto	u2247
  5413  006BB4  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  5414  006BB6  D7FC               	goto	u2247
  5415                           
  5416                           ;lcd_utilities.c: 88: PORTDbits.RD4 = 0;
  5417  006BB8  9883               	bcf	3971,4,c	;volatile
  5418                           
  5419                           ;lcd_utilities.c: 89: _delay((unsigned long)((8)*(48000000/4000.0)));
  5420  006BBA  0E7D               	movlw	125
  5421  006BBC  6E01               	movwf	??_lcd_strobe& (0+255),c
  5422  006BBE  0EAC               	movlw	172
  5423  006BC0                     u2257:
  5424  006BC0  2EE8               	decfsz	wreg,f,c
  5425  006BC2  D7FE               	goto	u2257
  5426  006BC4  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  5427  006BC6  D7FC               	goto	u2257
  5428  006BC8  0012               	return		;funcret
  5429  006BCA                     __end_of_lcd_strobe:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           postinc0	equ	0xFEE
  5436                           wreg	equ	0xFE8
  5437                           postdec1	equ	0xFE5
  5438                           plusw1	equ	0xFE3
  5439                           fsr1l	equ	0xFE1
  5440                           indf2	equ	0xFDF
  5441                           postinc2	equ	0xFDE
  5442                           postdec2	equ	0xFDD
  5443                           plusw2	equ	0xFDB
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _lcd_backlight_on *****************
  5449 ;; Defined at:
  5450 ;;		line 18 in file "lcd_utilities.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		None
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_ultra
  5474 ;;		_LockMotor
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	text33
  5479  006B3A                     __ptext33:
  5480                           	opt stack 0
  5481  006B3A                     _lcd_backlight_on:
  5482                           	opt stack 29
  5483                           
  5484                           ;lcd_utilities.c: 19: PORTDbits.RD7 = 1;
  5485                           
  5486                           ;incstack = 0
  5487  006B3A  8E83               	bsf	3971,7,c	;volatile
  5488  006B3C  0012               	return		;funcret
  5489  006B3E                     __end_of_lcd_backlight_on:
  5490                           	opt stack 0
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           postinc0	equ	0xFEE
  5496                           wreg	equ	0xFE8
  5497                           postdec1	equ	0xFE5
  5498                           plusw1	equ	0xFE3
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           plusw2	equ	0xFDB
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function _getkey *****************
  5509 ;; Defined at:
  5510 ;;		line 17 in file "keypad_utilities.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;		None
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  lookup         18    0[COMRAM] const unsigned char [18]
  5515 ;;  keycode         1   18[COMRAM] unsigned char 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  1    wreg      unsigned char 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5525 ;;      Params:         0       0       0       0       0       0       0       0       0
  5526 ;;      Locals:        19       0       0       0       0       0       0       0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5528 ;;      Totals:        19       0       0       0       0       0       0       0       0
  5529 ;;Total ram usage:       19 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; This function calls:
  5532 ;;		Nothing
  5533 ;; This function is called by:
  5534 ;;		_LockMotor
  5535 ;; This function uses a non-reentrant model
  5536 ;;
  5537                           
  5538                           	psect	text34
  5539  006C72                     __ptext34:
  5540                           	opt stack 0
  5541  006C72                     _getkey:
  5542                           	opt stack 29
  5543                           
  5544                           ;keypad_utilities.c: 19: const unsigned char lookup[] = "123F456E789DA0BC ";
  5545                           
  5546                           ;incstack = 0
  5547  006C72  0E05               	movlw	low getkey@F4444
  5548  006C74  6EF6               	movwf	tblptrl,c
  5549  006C76                     	if	0	;There is only one active tblptr byte
  5550  006C76                     	endif
  5551  006C76                     	if	0	;There are less than 3 active tblptr bytes
  5552  006C76                     	endif
  5553  006C76  EE20  F001         	lfsr	2,getkey@lookup
  5554  006C7A  0E11               	movlw	17
  5555  006C7C                     u1830:
  5556  006C7C  0009               	tblrd		*+
  5557  006C7E  CFF5 FFDE          	movff	tablat,postinc2
  5558  006C82  06E8               	decf	wreg,f,c
  5559  006C84  E2FB               	bc	u1830
  5560  006C86                     l119:
  5561  006C86  AA81               	btfss	3969,5,c	;volatile
  5562  006C88  D7FE               	goto	l119
  5563                           
  5564                           ;keypad_utilities.c: 22: keycode=PORTB & 0x0F;
  5565  006C8A  5081               	movf	3969,w,c	;volatile
  5566  006C8C  0B0F               	andlw	15
  5567  006C8E  6E13               	movwf	getkey@keycode,c
  5568  006C90                     l122:
  5569  006C90  BA81               	btfsc	3969,5,c	;volatile
  5570  006C92  D7FE               	goto	l122
  5571                           
  5572                           ;keypad_utilities.c: 25: return(lookup[keycode]);
  5573  006C94  5013               	movf	getkey@keycode,w,c
  5574  006C96  0D01               	mullw	1
  5575  006C98  0E01               	movlw	low getkey@lookup
  5576  006C9A  24F3               	addwf	prodl,w,c
  5577  006C9C  6ED9               	movwf	fsr2l,c
  5578  006C9E  0E00               	movlw	high getkey@lookup
  5579  006CA0  20F4               	addwfc	prodh,w,c
  5580  006CA2  6EDA               	movwf	fsr2h,c
  5581  006CA4  50DF               	movf	indf2,w,c
  5582  006CA6  0012               	return	
  5583  006CA8                     __end_of_getkey:
  5584                           	opt stack 0
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodh	equ	0xFF4
  5590                           prodl	equ	0xFF3
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           plusw1	equ	0xFE3
  5595                           fsr1l	equ	0xFE1
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           plusw2	equ	0xFDB
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _delay_ms *****************
  5605 ;; Defined at:
  5606 ;;		line 10 in file "delays_utilities.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;  i               2    0[COMRAM] unsigned int 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  j               2    3[COMRAM] unsigned int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5620 ;;      Params:         2       0       0       0       0       0       0       0       0
  5621 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5622 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5623 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5624 ;;Total ram usage:        5 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; This function calls:
  5627 ;;		Nothing
  5628 ;; This function is called by:
  5629 ;;		_ultra
  5630 ;;		_LockMotor
  5631 ;;		_buzzer
  5632 ;;		_pir
  5633 ;;		_buzzer_but
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text35
  5638  006C3E                     __ptext35:
  5639                           	opt stack 0
  5640  006C3E                     _delay_ms:
  5641                           	opt stack 29
  5642                           
  5643                           ;delays_utilities.c: 12: if(i!=0)
  5644                           
  5645                           ;incstack = 0
  5646  006C3E  5001               	movf	delay_ms@i,w,c
  5647  006C40  1002               	iorwf	delay_ms@i+1,w,c
  5648  006C42  B4D8               	btfsc	status,2,c
  5649  006C44  0012               	return	
  5650                           
  5651                           ;delays_utilities.c: 13: for(j=0;j<i;j++)_delay((unsigned long)((1)*(48000000/4000.0)));
  5652  006C46  0E00               	movlw	0
  5653  006C48  6E05               	movwf	delay_ms@j+1,c
  5654  006C4A  0E00               	movlw	0
  5655  006C4C  6E04               	movwf	delay_ms@j,c
  5656  006C4E  D00A               	goto	l60
  5657  006C50                     l2316:
  5658  006C50  0E10               	movlw	16
  5659  006C52  6E03               	movwf	??_delay_ms& (0+255),c
  5660  006C54  0E94               	movlw	148
  5661  006C56                     u2267:
  5662  006C56  2EE8               	decfsz	wreg,f,c
  5663  006C58  D7FE               	goto	u2267
  5664  006C5A  2E03               	decfsz	??_delay_ms& (0+255),f,c
  5665  006C5C  D7FC               	goto	u2267
  5666  006C5E  D000               	nop2	
  5667  006C60  4A04               	infsnz	delay_ms@j,f,c
  5668  006C62  2A05               	incf	delay_ms@j+1,f,c
  5669  006C64                     l60:
  5670  006C64  5001               	movf	delay_ms@i,w,c
  5671  006C66  5C04               	subwf	delay_ms@j,w,c
  5672  006C68  5002               	movf	delay_ms@i+1,w,c
  5673  006C6A  5805               	subwfb	delay_ms@j+1,w,c
  5674  006C6C  B0D8               	btfsc	status,0,c
  5675  006C6E  0012               	return	
  5676  006C70  D7EF               	goto	l2316
  5677  006C72                     __end_of_delay_ms:
  5678                           	opt stack 0
  5679                           tblptru	equ	0xFF8
  5680                           tblptrh	equ	0xFF7
  5681                           tblptrl	equ	0xFF6
  5682                           tablat	equ	0xFF5
  5683                           prodh	equ	0xFF4
  5684                           prodl	equ	0xFF3
  5685                           postinc0	equ	0xFEE
  5686                           wreg	equ	0xFE8
  5687                           postdec1	equ	0xFE5
  5688                           plusw1	equ	0xFE3
  5689                           fsr1l	equ	0xFE1
  5690                           indf2	equ	0xFDF
  5691                           postinc2	equ	0xFDE
  5692                           postdec2	equ	0xFDD
  5693                           plusw2	equ	0xFDB
  5694                           fsr2h	equ	0xFDA
  5695                           fsr2l	equ	0xFD9
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _UART_Write *****************
  5699 ;; Defined at:
  5700 ;;		line 36 in file "LockMotor.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  data            1    wreg     unsigned char 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  data            1    0[COMRAM] unsigned char 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;		None               void
  5707 ;; Registers used:
  5708 ;;		wreg
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5714 ;;      Params:         0       0       0       0       0       0       0       0       0
  5715 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5717 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5718 ;;Total ram usage:        1 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; This function calls:
  5721 ;;		Nothing
  5722 ;; This function is called by:
  5723 ;;		_LockMotor
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text36
  5728  006B52                     __ptext36:
  5729                           	opt stack 0
  5730  006B52                     _UART_Write:
  5731                           	opt stack 29
  5732                           
  5733                           ;incstack = 0
  5734                           ;UART_Write@data stored from wreg
  5735  006B52  6E01               	movwf	UART_Write@data,c
  5736  006B54                     l191:
  5737  006B54  A2AC               	btfss	4012,1,c	;volatile
  5738  006B56  D7FE               	goto	l191
  5739                           
  5740                           ;LockMotor.c: 38: TXREG = data;
  5741  006B58  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  5742  006B5C  0012               	return		;funcret
  5743  006B5E                     __end_of_UART_Write:
  5744                           	opt stack 0
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           postinc0	equ	0xFEE
  5752                           wreg	equ	0xFE8
  5753                           postdec1	equ	0xFE5
  5754                           plusw1	equ	0xFE3
  5755                           fsr1l	equ	0xFE1
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           plusw2	equ	0xFDB
  5760                           fsr2h	equ	0xFDA
  5761                           fsr2l	equ	0xFD9
  5762                           status	equ	0xFD8
  5763                           
  5764 ;; *************** function _UART_Init *****************
  5765 ;; Defined at:
  5766 ;;		line 24 in file "LockMotor.c"
  5767 ;; Parameters:    Size  Location     Type
  5768 ;;		None
  5769 ;; Auto vars:     Size  Location     Type
  5770 ;;		None
  5771 ;; Return value:  Size  Location     Type
  5772 ;;		None               void
  5773 ;; Registers used:
  5774 ;;		wreg, status,2
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5780 ;;      Params:         0       0       0       0       0       0       0       0       0
  5781 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5783 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5784 ;;Total ram usage:        0 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; This function calls:
  5787 ;;		Nothing
  5788 ;; This function is called by:
  5789 ;;		_LockMotor
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text37
  5794  006B8C                     __ptext37:
  5795                           	opt stack 0
  5796  006B8C                     _UART_Init:
  5797                           	opt stack 29
  5798                           
  5799                           ;LockMotor.c: 25: TRISCbits.TRISC6 = 0;
  5800                           
  5801                           ;incstack = 0
  5802  006B8C  9C94               	bcf	3988,6,c	;volatile
  5803                           
  5804                           ;LockMotor.c: 26: TRISCbits.TRISC7 = 1;
  5805  006B8E  8E94               	bsf	3988,7,c	;volatile
  5806                           
  5807                           ;LockMotor.c: 28: TXSTA = 0x24;
  5808  006B90  0E24               	movlw	36
  5809  006B92  6EAC               	movwf	4012,c	;volatile
  5810                           
  5811                           ;LockMotor.c: 29: RCSTA = 0x90;
  5812  006B94  0E90               	movlw	144
  5813  006B96  6EAB               	movwf	4011,c	;volatile
  5814                           
  5815                           ;LockMotor.c: 30: BAUDCON = 0x08;
  5816  006B98  0E08               	movlw	8
  5817  006B9A  6EB8               	movwf	4024,c	;volatile
  5818                           
  5819                           ;LockMotor.c: 31: SPBRG = 77;
  5820  006B9C  0E4D               	movlw	77
  5821  006B9E  6EAF               	movwf	4015,c	;volatile
  5822                           
  5823                           ;LockMotor.c: 32: SPBRGH = 0;
  5824  006BA0  0E00               	movlw	0
  5825  006BA2  6EB0               	movwf	4016,c	;volatile
  5826                           
  5827                           ;LockMotor.c: 33: PIR1bits.TXIF = 0;
  5828  006BA4  989E               	bcf	3998,4,c	;volatile
  5829  006BA6  0012               	return		;funcret
  5830  006BA8                     __end_of_UART_Init:
  5831                           	opt stack 0
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           postinc0	equ	0xFEE
  5839                           wreg	equ	0xFE8
  5840                           postdec1	equ	0xFE5
  5841                           plusw1	equ	0xFE3
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           plusw2	equ	0xFDB
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           postdec1	equ	0xFE5
  5859                           plusw1	equ	0xFE3
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           plusw2	equ	0xFDB
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869                           	psect	rparam
  5870  0000                     tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           plusw1	equ	0xFE3
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           postdec2	equ	0xFDD
  5884                           plusw2	equ	0xFDB
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        65
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     87     141
    BANK1           256      0      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _ultra->_delay_us
    _delay_us->___lwdiv
    _buzzer->_delay_ms
    _SetDutyCycleTo->___fttol
    _round->___ftneg
    _trunc->___altoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___lltoft->___ftpack
    _doorSetDutyCycleTo->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftadd
    ___ftdiv->___lltoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    _lcd_write_data->_lcd_strobe
    _lcd_init->_lcd_write_cmd
    _lcd_write_cmd->_lcd_strobe

Critical Paths under _main in BANK0

    _main->_LockMotor
    _LockMotor->_motordoor_close
    _LockMotor->_motordoor_open
    _LockMotor->_motorlock_lock
    _LockMotor->_motorlock_unlock
    _motorlock_unlock->_setPeriodTo
    _motorlock_lock->_setPeriodTo
    _motordoor_open->_setPeriodTo
    _motordoor_close->_setPeriodTo
    _setPeriodTo->_round

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  154772
                          _LockMotor
                             _buzzer
                  _lcd_backlight_off
                              _ultra
 ---------------------------------------------------------------------------------
 (1) _ultra                                                2     2      0    1426
                                             13 COMRAM     2     2      0
                           _delay_ms
                           _delay_us
                  _lcd_backlight_off
                   _lcd_backlight_on
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_backlight_off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     576
                                              7 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _buzzer                                               0     0      0     644
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _LockMotor                                           55    55      0  152702
                                             33 BANK0     54    54      0
                          _UART_Init
                         _UART_Write
                           _delay_ms
                             _getkey
                   _lcd_backlight_on
                           _lcd_init
                      _lcd_write_cmd
                     _lcd_write_data
                    _motordoor_close
                     _motordoor_open
                     _motorlock_lock
                   _motorlock_unlock
 ---------------------------------------------------------------------------------
 (2) _motorlock_unlock                                     2     2      0   37808
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (2) _motorlock_lock                                       2     2      0   37808
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _SetDutyCycleTo                                      12     7      5   13461
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motordoor_open                                       2     2      0   37808
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (2) _motordoor_close                                      2     2      0   37808
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _setPeriodTo                                         25    21      4   23976
                                              6 BANK0     25    21      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3    7666
                                              0 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                8     5      3    3549
                                             84 COMRAM     8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2350
                                             74 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                             92 COMRAM     3     0      3
                            ___ftadd (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2345
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _doorSetDutyCycleTo                                  12     7      5   13461
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     572
                                             59 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3344
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3832
                                             32 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2431
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _delay                                                6     4      2     348
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _PWMdoor_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data                                       3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             3     3      0     159
                                              4 COMRAM     3     3      0
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd                                        3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (4) _lcd_strobe                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_backlight_on                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getkey                                              19    19      0      48
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     644
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LockMotor
     _UART_Init
     _UART_Write
     _delay_ms
     _getkey
     _lcd_backlight_on
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe
     _lcd_write_cmd
       _lcd_strobe
     _lcd_write_data
       _lcd_strobe
     _motordoor_close
       _PWMdoor_Init
       _delay
       _doorSetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motordoor_open
       _PWMdoor_Init
       _delay
       _doorSetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motorlock_lock
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motorlock_unlock
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
   _buzzer
     _delay_ms
   _lcd_backlight_off
   _ultra
     _delay_ms
     _delay_us
       ___lwdiv
     _lcd_backlight_off
     _lcd_backlight_on
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      15       7        8.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101      20        0.0%
DATA                 0      0     101       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Feb 08 04:02:57 2024

                   ___altoft@exp 0053                    ___altoft@sign 0054  
                             l60 6C64                               l73 717C  
                             l95 7364       __size_of_lcd_backlight_off 0004  
                             _p1 00E9                               _p2 00EA  
                             _p3 00EB                               _p4 00EC  
                   ___ftadd@exp1 002C                     ___ftadd@exp2 002B  
                   ___ftadd@sign 002A                              l102 7392  
                            l104 7396                              l122 6C90  
                            l119 6C86                              l341 6C0C  
                            l342 6BFC                              l191 6B54  
                            l197 7A9A                              l609 79FA  
                            l618 7A16                              l571 745A  
                            l651 6BE0                              l629 76C2  
                            l594 7920                              l749 6E7E  
                            l598 794A                              _PR2 000FCB  
                            _key 00E7                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                      getkey@F4444 1005  
                   ___ftdiv@cntr 001B                     ___ftdiv@sign 0020  
                   __CFG_WDT$OFF 000000                             l2020 7636  
                           l2100 77AE                             l2200 7EC0  
                           l2026 765E                             l2122 6EE8  
                           l2116 6CF2                             l2124 6EF4  
                           l2046 769C                             l2072 7744  
                           l2090 7786                             l2066 771C  
                           l2170 7CC0                             l2316 6C50  
                           l2236 6CB2                             l2180 7D58  
                           l2260 6E58                             l2246 6CCC  
                           l2238 6CBA                             l2086 7776  
                           l2280 6FC4                             l2248 6CD0  
                           l2096 779E                             l2192 7E30  
                           l2184 7DA0                             l2176 7D10  
                           l2504 7B86                             l2256 6E4C  
                           l1810 7428                             l1802 73EA  
                           l2258 6E54                             l2370 7154  
                           l2434 7372                             l2426 7340  
                           l2284 6FD4                             l1812 7446  
                           l1804 73F4                             l2196 7E78  
                           l2188 7DE8                             l2540 7C38  
                           l2516 7BD2                             l2508 7BA2  
                           l2268 6E74                             l2452 73BA  
                           l2444 73A4                             l1814 7450  
                           l1806 7412                             l2526 7BEC  
                           l2470 7AC4                             l2374 7168  
                           l2366 7140                             l2438 7382  
                           l2288 6FEA                             l1840 704E  
                           l2536 7C1C                             l2376 7172  
                           l1922 7958                             l2474 7AE0  
                           l1916 792E                             l1852 7814  
                           l1950 79C6                             l1870 787A  
                           l1838 7042                             l1944 79AA  
                           l1880 78A2                             l1946 79B4  
                           l1938 7988                             l1882 78AE  
                           l1874 788A                             l1964 7A32  
                           l1956 79E8                             l1948 79BE  
                           l1884 78B4                             l2588 6B7A  
                           l1798 73DC                             l1974 7A62  
                           l1958 79F2                             l1990 71B4  
                           l1888 78CA                             l1898 70B4  
                           l1994 71CE                             u2011 7C08  
                           u1141 77F8                             u1230 70DC  
                           u2030 7C78                             u1160 7832  
                           u1241 78EC                             u2107 72A4  
                           u1251 7900                             u2117 72C4  
                           u1501 7646                             u1165 782A  
                           u1238 70DE                             u2207 6F68  
                           u2127 72D4                             u2217 6F7A  
                           u2137 72E6                             u2227 6F92  
                           u2147 72FE                             u1531 7704  
                           u2237 6FA4                             u2157 730E  
                           u2077 714E                             u1470 71C0  
                           u2247 6BB0                             u2167 7322  
                           u1551 772C                             u2087 7162  
                           u2257 6BC0                             u2177 6FDA  
                           u1481 761E                             u2097 7174  
                           u2267 6C56                             u2187 7014  
                           u2197 6F48                             u1830 6C7C  
                           u1921 7AB0                 ??_motordoor_open 0060  
                           u1981 7B72                             _TMR2 000FCC  
                           _TRMT 007D61         SetDutyCycleTo@Duty_cycle 004B  
         __end_of_lcd_write_data 732E                             _main 6B74  
                   ___ftpack@arg 0001                     ___ftpack@exp 0004  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           prodl 000FF3                   ?_lcd_write_cmd 0001  
                           start 1000          _doorSetDutyCycleTo$1533 0052  
               ??_motorlock_lock 0060                     ___ftmul@cntr 003A  
                   ___param_bank 000010                     ___ftmul@sign 003B  
                     LockMotor@i 00B1      __size_of_doorSetDutyCycleTo 00CA  
                   ___fttol@exp1 004A                     ___fttol@lval 0046  
                          ?_main 0001                  __end_of___ftadd 7A88  
                __end_of___ftdiv 76F4                ??_motordoor_close 0060  
                __end_of___ftneg 6BEE                  __end_of___ftmul 77E8  
                __end_of___fttol 78DC                            _T2CON 000FCA  
                __end_of___lwdiv 6E88                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _PORTB 000F81  
                          _PORTD 000F83                            _TRISD 000F95  
               lcd_write_cmd@cmd 0003                            _TXREG 000FAD  
                          _TXSTA 000FAC                   LockMotor@F4631 00CC  
                 LockMotor@F4628 00B7                   LockMotor@F4638 00D9  
                   ___lltoft@exp 0011                      ?_UART_Write 0001  
             __size_of_UART_Init 001C            __size_of_PWMdoor_Init 0008  
     setPeriodTo@clockSelectBits 0076                    ___awtoft@sign 000C  
                          _delay 6CA8                            _frexp 7098  
                          _errno 00E3                    ___ftpack@sign 0005  
                          _round 720C                            _ultra 732E  
                          _trunc 718A                            _wrong 00E5  
                 LockMotor@i_594 00B3                   LockMotor@i_597 00B5  
               __end_of_PWM_Init 6B52                            tablat 000FF5  
                          plusw1 000FE3                            plusw2 000FDB  
                ?_lcd_write_data 0001                            status 000FD8  
           motorlock_lock@Period 007F                     getkey@lookup 0001  
                __initialization 6E88                     __end_of_main 6B8C  
                    LockMotor@p1 00AD                      LockMotor@p2 00AE  
                    LockMotor@p3 00AF                      LockMotor@p4 00B0  
       __end_of_lcd_backlight_on 6B3E                     _PWMdoor_Init 6B42  
                         ??_main 0060                    ___fttol@sign1 0045  
                  __activetblptr 000001                     ?_setPeriodTo 0066  
                         ?_delay 0001                           _ADCON1 000FC1  
                         ?_frexp 0001                 __end_of___altoft 7098  
                         _CCPR1L 000FBE                           _CCPR2L 000FBB  
               __end_of___awtoft 6D16                 __end_of___ftpack 747A  
                         ?_round 0060                           ?_ultra 0001  
                         ?_trunc 0055                 __end_of___lltoft 6F3E  
                         _OSCCON 000FD3                           _SPBRGH 000FB0  
                ??_lcd_write_cmd 0002                 ??_SetDutyCycleTo 0050  
             __size_of_LockMotor 01F8                 __end_of_delay_ms 6C72  
               __end_of_delay_us 718A                 __end_of_lcd_init 7020  
              __end_of_UART_Init 6BA8              __size_of_UART_Write 000C  
                      ??___ftadd 0027                        ??___ftdiv 0018  
                      ??___ftneg 0060                        ??___ftmul 0033  
                      ??___fttol 0040                        ??___lwdiv 0005  
                         _getkey 6C72                           delay@i 0003  
                         delay@j 0005                           _buzzer 6BEE  
                         clear_0 6E8E            ___ftmul@f3_as_product 0037  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         round@f 0063                           round@x 0060  
                         trunc@i 0058                           trunc@x 0055  
              ?_motorlock_unlock 0001                       __accesstop 0060  
        __end_of__initialization 6ED4                       ___altoft@c 004B  
                __CFG_PBADEN$OFF 000000                    getkey@keycode 0013  
                     ___ftadd@f1 0021                       ___ftadd@f2 0024  
             ??_motorlock_unlock 0060                    ___rparam_used 000001  
                     ___ftdiv@f1 0012                       ___ftdiv@f2 0015  
                     ___ftdiv@f3 001C                       ___ftneg@f1 005D  
                     ___awtoft@c 0009                       ___ftmul@f1 002D  
                     ___ftmul@f2 0030                       ___fttol@f1 003C  
                 __pcstackCOMRAM 0001           setPeriodTo@_resolution 007B  
                   __pidataBANK0 6C12                     __pidataBANK1 6B5F  
                  __end_of_delay 6CDE                       ___lltoft@c 0009  
                  __end_of_frexp 7110                    __end_of_round 729A  
                  __end_of_ultra 73CC                    __end_of_trunc 720C  
                      ?_PWM_Init 0001                __end_of_LockMotor 7C80  
                        ??_delay 0003                          ??_frexp 0006  
                        ??_round 0060                          ??_ultra 000E  
                        ??_trunc 0058                       __pbssBANK0 00E3  
                _motordoor_close 6D16                          ?_getkey 0001  
                        _CCP1CON 000FBD                          _CCP2CON 000FBA  
                      ?___altoft 004B                          _BAUDCON 000FB8  
                        ?_buzzer 0001                        ?___awtoft 0009  
                      ?___ftpack 0001                        ?___lltoft 0009  
                     ??_PWM_Init 0001                        ?_delay_ms 0001  
                   ??_UART_Write 0001                        ?_delay_us 0008  
               ??_lcd_write_data 0002                       _lcd_strobe 6BA8  
                      ?_lcd_init 0001             __size_of_setPeriodTo 0380  
             lcd_write_data@data 0003               lcd_write_cmd@temp2 0004  
         motorlock_unlock@Period 007F                          __Hparam 0000  
     __end_of_doorSetDutyCycleTo 7544                          __Lparam 0000  
                        ___ftadd 78DC                          ___ftdiv 760E  
                        ___ftneg 6BCA               __end_of_UART_Write 6B5E  
                        ___ftmul 76F4                          ___fttol 77E8  
                        ___lwdiv 6E36                     __psmallconst 1004  
                     ??___altoft 004F                  __size_of_getkey 0036  
              ?_lcd_backlight_on 0001                          __pcinit 6E88  
                     ??___awtoft 000C                       ??___ftpack 0006  
                __size_of_buzzer 0024                          __ramtop 0800  
                     ??___lltoft 000D                          __ptext0 6B74  
                        __ptext1 732E                          __ptext2 6B3E  
                        __ptext3 7110                          __ptext4 6E36  
                        __ptext5 6BEE                          __ptext6 7A88  
                        __ptext7 6DEE                          __ptext8 6DA6  
                        __ptext9 7544               ??_lcd_backlight_on 0001  
                      _T2CONbits 000FCA                       ??_delay_ms 0003  
                     ??_delay_us 000A                          _outchar 00E8  
   setPeriodTo@TimerPrescaleBits 006E         doorSetDutyCycleTo@Period 004E  
                     ??_lcd_init 0005             end_of_initialization 6ED4  
        __end_of_motordoor_close 6D5E          __size_of_motordoor_open 0048  
                        postdec1 000FE5                          postdec2 000FDD  
  setPeriodTo@TimerPrescaleValue 0070                          postinc0 000FEE  
                        postinc2 000FDE                        _UART_Init 6B8C  
                      _PORTAbits 000F80                        _PORTBbits 000F81  
                      _PORTCbits 000F82                        _PORTDbits 000F83  
        __size_of_motorlock_lock 0048                 LockMotor@openMsg 0096  
                 UART_Write@data 0001                        _TRISAbits 000F92  
                      _TRISCbits 000F94             SetDutyCycleTo@Period 004E  
                    ?_lcd_strobe 0001                      ___ftdiv@exp 001F  
          __end_of_lcd_write_cmd 6FAE                      ___ftmul@exp 0036  
      __size_of_motorlock_unlock 0048                setPeriodTo@period 0078  
                     ?_UART_Init 0001                   __end_of_getkey 6CA8  
                 __end_of_buzzer 6C12                __size_of_PWM_Init 0008  
            start_initialization 6E88                    delay_us@lower 000C  
                      _LockMotor 7A88                       frexp@value 0001  
               ?_motordoor_close 0001      SetDutyCycleTo@PWM10BitValue 0055  
          motordoor_close@Period 007F                      __pdataBANK0 00B7  
                    __pdataBANK1 0100                         ??_getkey 0001  
            __size_of_lcd_strobe 0022                         ??_buzzer 0006  
        __size_of_SetDutyCycleTo 00CA                __size_of___altoft 0078  
              __size_of___awtoft 0038                __size_of___ftpack 00AE  
              __size_of___lltoft 005C                    __pcstackBANK0 0060  
                     ?_LockMotor 0001                __size_of_delay_ms 0034  
              __size_of_delay_us 007A                __size_of_lcd_init 0072  
               ___lwdiv@dividend 0001                   _motordoor_open 6D5E  
                       ?___ftadd 0021                         ?___ftdiv 0012  
                       ?___ftneg 005D                         ?___ftmul 002D  
                       ?___fttol 003C                         ?___lwdiv 0001  
                    ??_UART_Init 0001                    ?_PWMdoor_Init 0001  
                 _motorlock_lock 6DA6     doorSetDutyCycleTo@Duty_cycle 004B  
             _doorSetDutyCycleTo 747A                      __smallconst 1004  
                  ??_setPeriodTo 006A                 ___lwdiv@quotient 0005  
                 __size_of_delay 0036              ?_doorSetDutyCycleTo 004B  
                 __size_of_frexp 0078        __size_of_lcd_backlight_on 0004  
                 __size_of_round 008E                   __size_of_ultra 009E  
                 __size_of_trunc 0082                        delay_ms@i 0001  
                      delay_ms@j 0004                        delay_us@i 0008  
                      delay_us@j 000A           __end_of_motordoor_open 6DA6  
                       _PIR1bits 000F9E             ??_doorSetDutyCycleTo 0050  
doorSetDutyCycleTo@PWM10BitValue 0055           __end_of_motorlock_lock 6DEE  
               _motorlock_unlock 6DEE                   ??_PWMdoor_Init 0001  
                       _PWM_Init 6B4A                        lcd_init@i 0006  
            lcd_write_data@temp1 0004                      ??_LockMotor 0060  
                   ??_lcd_strobe 0001                        copy_data0 6EA8  
                      copy_data1 6EC8              __end_of_setPeriodTo 8000  
               _setPeriodTo$1531 006B                         _Message1 0100  
                      frexp@eptr 0004                  ?_motordoor_open 0001  
        __size_of_lcd_write_data 0094                         __Hrparam 0000  
                       __Lrparam 0000                     __Lsmallconst 1004  
                ?_motorlock_lock 0001                       ultra@Count 000E  
               __size_of___ftadd 01AC                   _SetDutyCycleTo 7544  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
                       ___altoft 7020                 __size_of___ftmul 00F4  
               __size_of___fttol 00F4                 __size_of___lwdiv 0052  
             __end_of_lcd_strobe 6BCA                         ___awtoft 6CDE  
                       ___ftpack 73CC                         ___lltoft 6EE2  
              _lcd_backlight_off 6B3E               ?_lcd_backlight_off 0001  
                       _delay_ms 6C3E                         _delay_us 7110  
                ___lwdiv@divisor 0003                  ___lwdiv@counter 0007  
                       __ptext10 6B4A                         __ptext11 6D5E  
                       __ptext20 747A                         __ptext12 6D16  
                       __ptext21 77E8                         __ptext13 7C80  
                       __ptext30 6FAE                         __ptext22 76F4  
                       __ptext14 720C                         __ptext31 6F3E  
                       __ptext23 760E                         __ptext15 718A  
                       __ptext32 6BA8                         __ptext24 78DC  
                       __ptext16 7098                         __ptext33 6B3A  
                       __ptext25 6CDE                         __ptext17 7020  
                       __ptext34 6C72                         __ptext26 73CC  
                       __ptext18 6BCA                         __ptext35 6C3E  
                       __ptext27 6CA8                         __ptext19 6EE2  
                       __ptext36 6B52                         __ptext28 6B42  
                       __ptext37 6B8C                         __ptext29 729A  
                       _lcd_init 6FAE              ??_lcd_backlight_off 0001  
                     trunc@expon 005B                    __size_of_main 0018  
                       delay@val 0001           __end_of_SetDutyCycleTo 760E  
                setPeriodTo@FOSC 0072                  setPeriodTo@FPWM 0066  
      __end_of_lcd_backlight_off 6B42           __size_of_lcd_write_cmd 0070  
                    _setPeriodTo 7C80                LockMotor@Message1 0081  
               _lcd_backlight_on 6B3A             __end_of_PWMdoor_Init 6B4A  
            __end_ofgetkey@F4444 1017         __size_of_motordoor_close 0048  
                ?_SetDutyCycleTo 004B             motordoor_open@Period 007F  
            _SetDutyCycleTo$1532 0052                       _UART_Write 6B52  
              LockMotor@errorMsg 00A3         __end_of_motorlock_unlock 6E36  
                 _lcd_write_data 729A                    _lcd_write_cmd 6F3E  
