

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Feb 06 16:53:09 2024

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	idataBANK0
    49  006DC0                     __pidataBANK0:
    50                           	opt stack 0
    51                           
    52                           ;initializer for LockMotor@F4629
    53  006DC0  45                 	db	69
    54  006DC1  6E                 	db	110
    55  006DC2  74                 	db	116
    56  006DC3  65                 	db	101
    57  006DC4  72                 	db	114
    58  006DC5  20                 	db	32
    59  006DC6  50                 	db	80
    60  006DC7  49                 	db	73
    61  006DC8  4E                 	db	78
    62  006DC9  20                 	db	32
    63  006DCA  6E                 	db	110
    64  006DCB  75                 	db	117
    65  006DCC  6D                 	db	109
    66  006DCD  62                 	db	98
    67  006DCE  65                 	db	101
    68  006DCF  72                 	db	114
    69  006DD0  20                 	db	32
    70  006DD1  3A                 	db	58
    71  006DD2  20                 	db	32
    72  006DD3  20                 	db	32
    73  006DD4  00                 	db	0
    74                           
    75                           ;initializer for LockMotor@F4632
    76  006DD5  4F                 	db	79
    77  006DD6  50                 	db	80
    78  006DD7  45                 	db	69
    79  006DD8  4E                 	db	78
    80  006DD9  49                 	db	73
    81  006DDA  4E                 	db	78
    82  006DDB  47                 	db	71
    83  006DDC  20                 	db	32
    84  006DDD  4C                 	db	76
    85  006DDE  4F                 	db	79
    86  006DDF  43                 	db	67
    87  006DE0  4B                 	db	75
    88  006DE1  00                 	db	0
    89                           
    90                           ;initializer for LockMotor@F4637
    91  006DE2  57                 	db	87
    92  006DE3  52                 	db	82
    93  006DE4  4F                 	db	79
    94  006DE5  4E                 	db	78
    95  006DE6  47                 	db	71
    96  006DE7  20                 	db	32
    97  006DE8  50                 	db	80
    98  006DE9  49                 	db	73
    99  006DEA  4E                 	db	78
   100  006DEB  00                 	db	0
   101                           
   102                           	psect	idataBANK1
   103  006D49                     __pidataBANK1:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _Message1
   107  006D49  45                 	db	69
   108  006D4A  6E                 	db	110
   109  006D4B  74                 	db	116
   110  006D4C  65                 	db	101
   111  006D4D  72                 	db	114
   112  006D4E  20                 	db	32
   113  006D4F  50                 	db	80
   114  006D50  49                 	db	73
   115  006D51  4E                 	db	78
   116  006D52  20                 	db	32
   117  006D53  6E                 	db	110
   118  006D54  75                 	db	117
   119  006D55  6D                 	db	109
   120  006D56  62                 	db	98
   121  006D57  65                 	db	101
   122  006D58  72                 	db	114
   123  006D59  20                 	db	32
   124  006D5A  3A                 	db	58
   125  006D5B  20                 	db	32
   126  006D5C  20                 	db	32
   127  006D5D  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  001004                     __psmallconst:
   131                           	opt stack 0
   132  001004  00                 	db	0
   133  001005                     getkey@F4444:
   134                           	opt stack 0
   135  001005  31                 	db	49
   136  001006  32                 	db	50
   137  001007  33                 	db	51
   138  001008  46                 	db	70
   139  001009  34                 	db	52
   140  00100A  35                 	db	53
   141  00100B  36                 	db	54
   142  00100C  45                 	db	69
   143  00100D  37                 	db	55
   144  00100E  38                 	db	56
   145  00100F  39                 	db	57
   146  001010  44                 	db	68
   147  001011  41                 	db	65
   148  001012  30                 	db	48
   149  001013  42                 	db	66
   150  001014  43                 	db	67
   151  001015  20                 	db	32
   152  001016  00                 	db	0
   153  001017                     __end_ofgetkey@F4444:
   154                           	opt stack 0
   155  0000                     _ADCON1	set	4033
   156  0000                     _BAUDCON	set	4024
   157  0000                     _CCP1CON	set	4029
   158  0000                     _CCP2CON	set	4026
   159  0000                     _CCPR1L	set	4030
   160  0000                     _CCPR2L	set	4027
   161  0000                     _OSCCON	set	4051
   162  0000                     _PIR1bits	set	3998
   163  0000                     _PORTAbits	set	3968
   164  0000                     _PORTB	set	3969
   165  0000                     _PORTBbits	set	3969
   166  0000                     _PORTCbits	set	3970
   167  0000                     _PORTD	set	3971
   168  0000                     _PORTDbits	set	3971
   169  0000                     _PR2	set	4043
   170  0000                     _RCSTA	set	4011
   171  0000                     _SPBRG	set	4015
   172  0000                     _SPBRGH	set	4016
   173  0000                     _T2CON	set	4042
   174  0000                     _T2CONbits	set	4042
   175  0000                     _TMR2	set	4044
   176  0000                     _TRISAbits	set	3986
   177  0000                     _TRISC	set	3988
   178  0000                     _TRISCbits	set	3988
   179  0000                     _TRISD	set	3989
   180  0000                     _TXREG	set	4013
   181  0000                     _TXSTA	set	4012
   182  0000                     _TRMT	set	32097
   183                           
   184                           ; #config settings
   185  001017  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  006EC4                     __pcinit:
   189                           	opt stack 0
   190  006EC4                     start_initialization:
   191                           	opt stack 0
   192  006EC4                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK0 (11 bytes)
   196  006EC4  EE00  F0E3         	lfsr	0,__pbssBANK0
   197  006EC8  0E0B               	movlw	11
   198  006ECA                     clear_0:
   199  006ECA  6AEE               	clrf	postinc0,c
   200  006ECC  06E8               	decf	wreg,f,c
   201  006ECE  E1FD               	bnz	clear_0
   202                           
   203                           ; Initialize objects allocated to BANK1 (21 bytes)
   204                           ; load TBLPTR registers with __pidataBANK1
   205  006ED0  0E49               	movlw	low __pidataBANK1
   206  006ED2  6EF6               	movwf	tblptrl,c
   207  006ED4  0E6D               	movlw	high __pidataBANK1
   208  006ED6  6EF7               	movwf	tblptrh,c
   209  006ED8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   210  006EDA  6EF8               	movwf	tblptru,c
   211  006EDC  EE01  F000         	lfsr	0,__pdataBANK1
   212  006EE0  EE10 F015          	lfsr	1,21
   213  006EE4                     copy_data0:
   214  006EE4  0009               	tblrd		*+
   215  006EE6  CFF5 FFEE          	movff	tablat,postinc0
   216  006EEA  50E5               	movf	postdec1,w,c
   217  006EEC  50E1               	movf	fsr1l,w,c
   218  006EEE  E1FA               	bnz	copy_data0
   219                           
   220                           ; Initialize objects allocated to BANK0 (44 bytes)
   221                           ; load TBLPTR registers with __pidataBANK0
   222  006EF0  0EC0               	movlw	low __pidataBANK0
   223  006EF2  6EF6               	movwf	tblptrl,c
   224  006EF4  0E6D               	movlw	high __pidataBANK0
   225  006EF6  6EF7               	movwf	tblptrh,c
   226  006EF8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   227  006EFA  6EF8               	movwf	tblptru,c
   228  006EFC  EE00  F0B7         	lfsr	0,__pdataBANK0
   229  006F00  EE10 F02C          	lfsr	1,44
   230  006F04                     copy_data1:
   231  006F04  0009               	tblrd		*+
   232  006F06  CFF5 FFEE          	movff	tablat,postinc0
   233  006F0A  50E5               	movf	postdec1,w,c
   234  006F0C  50E1               	movf	fsr1l,w,c
   235  006F0E  E1FA               	bnz	copy_data1
   236  006F10                     end_of_initialization:
   237                           	opt stack 0
   238  006F10                     __end_of__initialization:
   239                           	opt stack 0
   240  006F10  0E00               	movlw	low (__Lsmallconst shr (0+16))
   241  006F12  6EF8               	movwf	tblptru,c
   242  006F14  0E10               	movlw	high __Lsmallconst
   243  006F16  6EF7               	movwf	tblptrh,c
   244  006F18  0100               	movlb	0
   245  006F1A  EF99  F036         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           postdec1	equ	0xFE5
   253                           fsr1l	equ	0xFE1
   254                           
   255                           	psect	bssBANK0
   256  0000E3                     __pbssBANK0:
   257                           	opt stack 0
   258  0000E3                     _errno:
   259                           	opt stack 0
   260  0000E3                     	ds	2
   261  0000E5                     _wrong:
   262                           	opt stack 0
   263  0000E5                     	ds	2
   264  0000E7                     _c:
   265                           	opt stack 0
   266  0000E7                     	ds	1
   267  0000E8                     _key:
   268                           	opt stack 0
   269  0000E8                     	ds	1
   270  0000E9                     _outchar:
   271                           	opt stack 0
   272  0000E9                     	ds	1
   273  0000EA                     _p1:
   274                           	opt stack 0
   275  0000EA                     	ds	1
   276  0000EB                     _p2:
   277                           	opt stack 0
   278  0000EB                     	ds	1
   279  0000EC                     _p3:
   280                           	opt stack 0
   281  0000EC                     	ds	1
   282  0000ED                     _p4:
   283                           	opt stack 0
   284  0000ED                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294                           	psect	dataBANK0
   295  0000B7                     __pdataBANK0:
   296                           	opt stack 0
   297  0000B7                     LockMotor@F4629:
   298                           	opt stack 0
   299  0000B7                     	ds	21
   300  0000CC                     LockMotor@F4632:
   301                           	opt stack 0
   302  0000CC                     	ds	13
   303  0000D9                     LockMotor@F4637:
   304                           	opt stack 0
   305  0000D9                     	ds	10
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	dataBANK1
   316  000100                     __pdataBANK1:
   317                           	opt stack 0
   318  000100                     _Message1:
   319                           	opt stack 0
   320  000100                     	ds	21
   321                           tblptru	equ	0xFF8
   322                           tblptrh	equ	0xFF7
   323                           tblptrl	equ	0xFF6
   324                           tablat	equ	0xFF5
   325                           postinc0	equ	0xFEE
   326                           wreg	equ	0xFE8
   327                           postdec1	equ	0xFE5
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	cstackBANK0
   331  000060                     __pcstackBANK0:
   332                           	opt stack 0
   333  000060                     ?_round:
   334                           	opt stack 0
   335  000060                     round@x:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x0
   339  000060                     	ds	3
   340  000063                     round@f:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x3
   344  000063                     	ds	3
   345  000066                     ?_setPeriodTo:
   346                           	opt stack 0
   347  000066                     setPeriodTo@FPWM:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x6
   351  000066                     	ds	4
   352  00006A                     ??_setPeriodTo:
   353                           
   354                           ; 0 bytes @ 0xA
   355  00006A                     	ds	1
   356  00006B                     _setPeriodTo$1376:
   357                           	opt stack 0
   358                           
   359                           ; 3 bytes @ 0xB
   360  00006B                     	ds	3
   361  00006E                     setPeriodTo@TimerPrescaleBits:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0xE
   365  00006E                     	ds	2
   366  000070                     setPeriodTo@TimerPrescaleValue:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0x10
   370  000070                     	ds	2
   371  000072                     setPeriodTo@FOSC:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0x12
   375  000072                     	ds	4
   376  000076                     setPeriodTo@clockSelectBits:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x16
   380  000076                     	ds	2
   381  000078                     setPeriodTo@period:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x18
   385  000078                     	ds	3
   386  00007B                     setPeriodTo@_resolution:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x1B
   390  00007B                     	ds	4
   391  00007F                     motorlock_unlock@Period:
   392                           	opt stack 0
   393  00007F                     motordoor_open@Period:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x1F
   397  00007F                     	ds	2
   398  000081                     LockMotor@Message1:
   399                           	opt stack 0
   400                           
   401                           ; 21 bytes @ 0x21
   402  000081                     	ds	21
   403  000096                     LockMotor@openMsg:
   404                           	opt stack 0
   405                           
   406                           ; 13 bytes @ 0x36
   407  000096                     	ds	13
   408  0000A3                     LockMotor@errorMsg:
   409                           	opt stack 0
   410                           
   411                           ; 10 bytes @ 0x43
   412  0000A3                     	ds	10
   413  0000AD                     LockMotor@p1:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x4D
   417  0000AD                     	ds	1
   418  0000AE                     LockMotor@p2:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x4E
   422  0000AE                     	ds	1
   423  0000AF                     LockMotor@p3:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x4F
   427  0000AF                     	ds	1
   428  0000B0                     LockMotor@p4:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x50
   432  0000B0                     	ds	1
   433  0000B1                     LockMotor@i:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x51
   437  0000B1                     	ds	2
   438  0000B3                     LockMotor@i_534:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x53
   442  0000B3                     	ds	2
   443  0000B5                     LockMotor@i_537:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x55
   447  0000B5                     	ds	2
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	cstackCOMRAM
   458  000001                     __pcstackCOMRAM:
   459                           	opt stack 0
   460  000001                     ??_lcd_strobe:
   461  000001                     ?___ftpack:
   462                           	opt stack 0
   463  000001                     UART_Write@data:
   464                           	opt stack 0
   465  000001                     delay_ms@i:
   466                           	opt stack 0
   467  000001                     delay@val:
   468                           	opt stack 0
   469  000001                     ___ftpack@arg:
   470                           	opt stack 0
   471  000001                     frexp@value:
   472                           	opt stack 0
   473  000001                     getkey@lookup:
   474                           	opt stack 0
   475                           
   476                           ; 18 bytes @ 0x0
   477  000001                     	ds	1
   478  000002                     ??_lcd_write_cmd:
   479  000002                     ??_lcd_write_data:
   480                           
   481                           ; 0 bytes @ 0x1
   482  000002                     	ds	1
   483  000003                     ??_delay_ms:
   484  000003                     lcd_write_cmd@cmd:
   485                           	opt stack 0
   486  000003                     lcd_write_data@data:
   487                           	opt stack 0
   488  000003                     delay@i:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x2
   492  000003                     	ds	1
   493  000004                     lcd_write_cmd@temp2:
   494                           	opt stack 0
   495  000004                     lcd_write_data@temp1:
   496                           	opt stack 0
   497  000004                     ___ftpack@exp:
   498                           	opt stack 0
   499  000004                     delay_ms@j:
   500                           	opt stack 0
   501  000004                     frexp@eptr:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x3
   505  000004                     	ds	1
   506  000005                     ??_lcd_init:
   507  000005                     ___ftpack@sign:
   508                           	opt stack 0
   509  000005                     delay@j:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x4
   513  000005                     	ds	1
   514  000006                     ??___ftpack:
   515  000006                     ??_frexp:
   516  000006                     lcd_init@i:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x5
   520  000006                     	ds	3
   521  000009                     ?___awtoft:
   522                           	opt stack 0
   523  000009                     ?___lltoft:
   524                           	opt stack 0
   525  000009                     ___awtoft@c:
   526                           	opt stack 0
   527  000009                     ___lltoft@c:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x8
   531  000009                     	ds	3
   532  00000C                     ___awtoft@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0xB
   536  00000C                     	ds	1
   537  00000D                     ??___lltoft:
   538                           
   539                           ; 0 bytes @ 0xC
   540  00000D                     	ds	4
   541  000011                     ___lltoft@exp:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x10
   545  000011                     	ds	1
   546  000012                     ?___ftdiv:
   547                           	opt stack 0
   548  000012                     ___ftdiv@f1:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x11
   552  000012                     	ds	1
   553  000013                     getkey@keycode:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x12
   557  000013                     	ds	2
   558  000015                     ___ftdiv@f2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x14
   562  000015                     	ds	3
   563  000018                     ??___ftdiv:
   564                           
   565                           ; 0 bytes @ 0x17
   566  000018                     	ds	3
   567  00001B                     ___ftdiv@cntr:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x1A
   571  00001B                     	ds	1
   572  00001C                     ___ftdiv@f3:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x1B
   576  00001C                     	ds	3
   577  00001F                     ___ftdiv@exp:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x1E
   581  00001F                     	ds	1
   582  000020                     ___ftdiv@sign:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1F
   586  000020                     	ds	1
   587  000021                     ?___ftadd:
   588                           	opt stack 0
   589  000021                     ___ftadd@f1:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x20
   593  000021                     	ds	3
   594  000024                     ___ftadd@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x23
   598  000024                     	ds	3
   599  000027                     ??___ftadd:
   600                           
   601                           ; 0 bytes @ 0x26
   602  000027                     	ds	3
   603  00002A                     ___ftadd@sign:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ___ftadd@exp2:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x2A
   612  00002B                     	ds	1
   613  00002C                     ___ftadd@exp1:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x2B
   617  00002C                     	ds	1
   618  00002D                     ?___ftmul:
   619                           	opt stack 0
   620  00002D                     ___ftmul@f1:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x2C
   624  00002D                     	ds	3
   625  000030                     ___ftmul@f2:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0x2F
   629  000030                     	ds	3
   630  000033                     ??___ftmul:
   631                           
   632                           ; 0 bytes @ 0x32
   633  000033                     	ds	3
   634  000036                     ___ftmul@exp:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x35
   638  000036                     	ds	1
   639  000037                     ___ftmul@f3_as_product:
   640                           	opt stack 0
   641                           
   642                           ; 3 bytes @ 0x36
   643  000037                     	ds	3
   644  00003A                     ___ftmul@cntr:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x39
   648  00003A                     	ds	1
   649  00003B                     ___ftmul@sign:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x3A
   653  00003B                     	ds	1
   654  00003C                     ?___fttol:
   655                           	opt stack 0
   656  00003C                     ___fttol@f1:
   657                           	opt stack 0
   658                           
   659                           ; 3 bytes @ 0x3B
   660  00003C                     	ds	4
   661  000040                     ??___fttol:
   662                           
   663                           ; 0 bytes @ 0x3F
   664  000040                     	ds	5
   665  000045                     ___fttol@sign1:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x44
   669  000045                     	ds	1
   670  000046                     ___fttol@lval:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x45
   674  000046                     	ds	4
   675  00004A                     ___fttol@exp1:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x49
   679  00004A                     	ds	1
   680  00004B                     ?___altoft:
   681                           	opt stack 0
   682  00004B                     SetDutyCycleTo@Duty_cycle:
   683                           	opt stack 0
   684  00004B                     doorSetDutyCycleTo@Duty_cycle:
   685                           	opt stack 0
   686  00004B                     ___altoft@c:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x4A
   690  00004B                     	ds	3
   691  00004E                     SetDutyCycleTo@Period:
   692                           	opt stack 0
   693  00004E                     doorSetDutyCycleTo@Period:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x4D
   697  00004E                     	ds	1
   698  00004F                     ??___altoft:
   699                           
   700                           ; 0 bytes @ 0x4E
   701  00004F                     	ds	1
   702  000050                     ??_SetDutyCycleTo:
   703  000050                     ??_doorSetDutyCycleTo:
   704                           
   705                           ; 0 bytes @ 0x4F
   706  000050                     	ds	2
   707  000052                     _SetDutyCycleTo$1377:
   708                           	opt stack 0
   709  000052                     _doorSetDutyCycleTo$1378:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x51
   713  000052                     	ds	1
   714  000053                     ___altoft@exp:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x52
   718  000053                     	ds	1
   719  000054                     ___altoft@sign:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x53
   723  000054                     	ds	1
   724  000055                     ?_trunc:
   725                           	opt stack 0
   726  000055                     SetDutyCycleTo@PWM10BitValue:
   727                           	opt stack 0
   728  000055                     doorSetDutyCycleTo@PWM10BitValue:
   729                           	opt stack 0
   730  000055                     trunc@x:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x54
   734  000055                     	ds	3
   735  000058                     trunc@i:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x57
   739  000058                     	ds	3
   740  00005B                     trunc@expon:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x5A
   744  00005B                     	ds	2
   745  00005D                     ?___ftneg:
   746                           	opt stack 0
   747  00005D                     ___ftneg@f1:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x5C
   751  00005D                     	ds	3
   752  000060                     tblptru	equ	0xFF8
   753                           tblptrh	equ	0xFF7
   754                           tblptrl	equ	0xFF6
   755                           tablat	equ	0xFF5
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           postdec1	equ	0xFE5
   759                           fsr1l	equ	0xFE1
   760                           
   761                           ; 0 bytes @ 0x5F
   762 ;;
   763 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   764 ;;
   765 ;; *************** function _main *****************
   766 ;; Defined at:
   767 ;;		line 7 in file "newmain.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   781 ;;      Params:         0       0       0       0       0       0       0       0       0
   782 ;;      Locals:         0       0       0       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0       0       0
   784 ;;      Totals:         0       0       0       0       0       0       0       0       0
   785 ;;Total ram usage:        0 bytes
   786 ;; Hardware stack levels required when called:    7
   787 ;; This function calls:
   788 ;;		_LockMotor
   789 ;; This function is called by:
   790 ;;		Startup code after reset
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text0
   795  006D32                     __ptext0:
   796                           	opt stack 0
   797  006D32                     _main:
   798                           	opt stack 24
   799                           
   800                           ;newmain.c: 8: TRISC = 0b00000010;
   801                           
   802                           ;incstack = 0
   803  006D32  0E02               	movlw	2
   804  006D34  6E94               	movwf	3988,c	;volatile
   805  006D36                     l2362:
   806                           
   807                           ;newmain.c: 11: LockMotor();
   808  006D36  EC42  F03D         	call	_LockMotor	;wreg free
   809  006D3A  D7FD               	goto	l2362
   810  006D3C                     __end_of_main:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           postdec1	equ	0xFE5
   819                           fsr1l	equ	0xFE1
   820                           
   821 ;; *************** function _LockMotor *****************
   822 ;; Defined at:
   823 ;;		line 43 in file "LockMotor.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  i               2   85[BANK0 ] int 
   828 ;;  i               2   83[BANK0 ] int 
   829 ;;  errorMsg       10   67[BANK0 ] unsigned char [10]
   830 ;;  openMsg        13   54[BANK0 ] unsigned char [13]
   831 ;;  i               2   81[BANK0 ] int 
   832 ;;  Message1       21   33[BANK0 ] unsigned char [21]
   833 ;;  p4              1   80[BANK0 ] unsigned char 
   834 ;;  p3              1   79[BANK0 ] unsigned char 
   835 ;;  p2              1   78[BANK0 ] unsigned char 
   836 ;;  p1              1   77[BANK0 ] unsigned char 
   837 ;;  key             1    0        unsigned char 
   838 ;; Return value:  Size  Location     Type
   839 ;;                  2    4[None  ] int 
   840 ;; Registers used:
   841 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   847 ;;      Params:         0       0       0       0       0       0       0       0       0
   848 ;;      Locals:         0      54       0       0       0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0       0       0       0       0
   850 ;;      Totals:         0      54       0       0       0       0       0       0       0
   851 ;;Total ram usage:       54 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    6
   854 ;; This function calls:
   855 ;;		_UART_Init
   856 ;;		_UART_Write
   857 ;;		_delay_ms
   858 ;;		_getkey
   859 ;;		_lcd_backlight_on
   860 ;;		_lcd_init
   861 ;;		_lcd_write_cmd
   862 ;;		_lcd_write_data
   863 ;;		_motordoor_open
   864 ;;		_motorlock_unlock
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text1
   871  007A84                     __ptext1:
   872                           	opt stack 0
   873  007A84                     _LockMotor:
   874                           	opt stack 24
   875                           
   876                           ;LockMotor.c: 44: unsigned char key, p1, p2, p3, p4;
   877                           ;LockMotor.c: 47: lcd_init();
   878                           
   879                           ;incstack = 0
   880  007A84  EC61  F038         	call	_lcd_init	;wreg free
   881                           
   882                           ;LockMotor.c: 48: UART_Init();
   883  007A88  ECAF  F036         	call	_UART_Init	;wreg free
   884                           
   885                           ;LockMotor.c: 51: lcd_backlight_on();
   886  007A8C  EC8F  F036         	call	_lcd_backlight_on	;wreg free
   887                           
   888                           ;LockMotor.c: 54: lcd_write_cmd(0x01);
   889  007A90  0E01               	movlw	1
   890  007A92  EC29  F038         	call	_lcd_write_cmd
   891                           
   892                           ;LockMotor.c: 57: lcd_write_cmd(0x80);
   893  007A96  0E80               	movlw	128
   894  007A98  EC29  F038         	call	_lcd_write_cmd
   895                           
   896                           ;LockMotor.c: 58: char Message1[] = "Enter PIN number :  ";
   897  007A9C  EE20  F0B7         	lfsr	2,LockMotor@F4629
   898  007AA0  EE10  F081         	lfsr	1,LockMotor@Message1
   899  007AA4  0E14               	movlw	20
   900  007AA6                     u1741:
   901  007AA6  CFDB FFE3          	movff	plusw2,plusw1
   902  007AAA  06E8               	decf	wreg,f,c
   903  007AAC  E2FC               	bc	u1741
   904                           
   905                           ;LockMotor.c: 59: for (int i = 0; Message1[i] != '\0'; i++) {
   906  007AAE  0E00               	movlw	0
   907  007AB0  0100               	movlb	0	; () banked
   908  007AB2  6FB2               	movwf	(LockMotor@i+1)& (0+255),b
   909  007AB4  0E00               	movlw	0
   910  007AB6  6FB1               	movwf	LockMotor@i& (0+255),b
   911  007AB8  D00E               	goto	l2290
   912  007ABA                     l2286:
   913                           
   914                           ; BSR set to: 0
   915                           ;LockMotor.c: 60: lcd_write_data(Message1[i]);
   916  007ABA  0E81               	movlw	low LockMotor@Message1
   917  007ABC  0100               	movlb	0	; () banked
   918  007ABE  25B1               	addwf	LockMotor@i& (0+255),w,b
   919  007AC0  6ED9               	movwf	fsr2l,c
   920  007AC2  0E00               	movlw	high LockMotor@Message1
   921  007AC4  0100               	movlb	0	; () banked
   922  007AC6  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
   923  007AC8  6EDA               	movwf	fsr2h,c
   924  007ACA  50DF               	movf	indf2,w,c
   925  007ACC  EC9A  F039         	call	_lcd_write_data
   926  007AD0  0100               	movlb	0	; () banked
   927  007AD2  4BB1               	infsnz	LockMotor@i& (0+255),f,b
   928  007AD4  2BB2               	incf	(LockMotor@i+1)& (0+255),f,b
   929  007AD6                     l2290:
   930                           
   931                           ; BSR set to: 0
   932  007AD6  0E81               	movlw	low LockMotor@Message1
   933  007AD8  0100               	movlb	0	; () banked
   934  007ADA  25B1               	addwf	LockMotor@i& (0+255),w,b
   935  007ADC  6ED9               	movwf	fsr2l,c
   936  007ADE  0E00               	movlw	high LockMotor@Message1
   937  007AE0  0100               	movlb	0	; () banked
   938  007AE2  21B2               	addwfc	(LockMotor@i+1)& (0+255),w,b
   939  007AE4  6EDA               	movwf	fsr2h,c
   940  007AE6  50DF               	movf	indf2,w,c
   941  007AE8  A4D8               	btfss	status,2,c
   942  007AEA  D7E7               	goto	l2286
   943                           
   944                           ; BSR set to: 0
   945                           ;LockMotor.c: 61: }
   946                           ;LockMotor.c: 64: lcd_write_cmd(0xC0);
   947                           
   948                           ; BSR set to: 0
   949  007AEC  0EC0               	movlw	192
   950  007AEE  EC29  F038         	call	_lcd_write_cmd
   951                           
   952                           ;LockMotor.c: 65: p1 = getkey(); lcd_write_data('*');
   953  007AF2  EC10  F037         	call	_getkey	;wreg free
   954  007AF6  0100               	movlb	0	; () banked
   955  007AF8  6FAD               	movwf	LockMotor@p1& (0+255),b
   956                           
   957                           ; BSR set to: 0
   958  007AFA  0E2A               	movlw	42
   959  007AFC  EC9A  F039         	call	_lcd_write_data
   960                           
   961                           ;LockMotor.c: 66: p2 = getkey(); lcd_write_data('*');
   962  007B00  EC10  F037         	call	_getkey	;wreg free
   963  007B04  0100               	movlb	0	; () banked
   964  007B06  6FAE               	movwf	LockMotor@p2& (0+255),b
   965                           
   966                           ; BSR set to: 0
   967  007B08  0E2A               	movlw	42
   968  007B0A  EC9A  F039         	call	_lcd_write_data
   969                           
   970                           ;LockMotor.c: 67: p3 = getkey(); lcd_write_data('*');
   971  007B0E  EC10  F037         	call	_getkey	;wreg free
   972  007B12  0100               	movlb	0	; () banked
   973  007B14  6FAF               	movwf	LockMotor@p3& (0+255),b
   974  007B16  0E2A               	movlw	42
   975  007B18  EC9A  F039         	call	_lcd_write_data
   976                           
   977                           ;LockMotor.c: 68: p4 = getkey(); lcd_write_data('*');
   978  007B1C  EC10  F037         	call	_getkey	;wreg free
   979  007B20  0100               	movlb	0	; () banked
   980  007B22  6FB0               	movwf	LockMotor@p4& (0+255),b
   981                           
   982                           ; BSR set to: 0
   983  007B24  0E2A               	movlw	42
   984  007B26  EC9A  F039         	call	_lcd_write_data
   985                           
   986                           ;LockMotor.c: 71: if (p1 == '4' && p2 == '5' && p3 == '5' && p4 == '0') {
   987  007B2A  0E34               	movlw	52
   988  007B2C  0100               	movlb	0	; () banked
   989  007B2E  19AD               	xorwf	LockMotor@p1& (0+255),w,b
   990  007B30  A4D8               	btfss	status,2,c
   991  007B32  D05C               	goto	l2338
   992                           
   993                           ; BSR set to: 0
   994  007B34  0E35               	movlw	53
   995  007B36  0100               	movlb	0	; () banked
   996  007B38  19AE               	xorwf	LockMotor@p2& (0+255),w,b
   997  007B3A  A4D8               	btfss	status,2,c
   998  007B3C  D057               	goto	l2338
   999                           
  1000                           ; BSR set to: 0
  1001  007B3E  0E35               	movlw	53
  1002  007B40  0100               	movlb	0	; () banked
  1003  007B42  19AF               	xorwf	LockMotor@p3& (0+255),w,b
  1004  007B44  A4D8               	btfss	status,2,c
  1005  007B46  D052               	goto	l2338
  1006                           
  1007                           ; BSR set to: 0
  1008  007B48  0E30               	movlw	48
  1009  007B4A  0100               	movlb	0	; () banked
  1010  007B4C  19B0               	xorwf	LockMotor@p4& (0+255),w,b
  1011  007B4E  A4D8               	btfss	status,2,c
  1012  007B50  D04D               	goto	l2338
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;LockMotor.c: 73: lcd_write_cmd(0x01);
  1016  007B52  0E01               	movlw	1
  1017  007B54  EC29  F038         	call	_lcd_write_cmd
  1018                           
  1019                           ;LockMotor.c: 74: lcd_write_cmd(0x80);
  1020  007B58  0E80               	movlw	128
  1021  007B5A  EC29  F038         	call	_lcd_write_cmd
  1022                           
  1023                           ;LockMotor.c: 75: char openMsg[] = "OPENING LOCK";
  1024  007B5E  EE20  F0CC         	lfsr	2,LockMotor@F4632
  1025  007B62  EE10  F096         	lfsr	1,LockMotor@openMsg
  1026  007B66  0E0C               	movlw	12
  1027  007B68                     u1801:
  1028  007B68  CFDB FFE3          	movff	plusw2,plusw1
  1029  007B6C  06E8               	decf	wreg,f,c
  1030  007B6E  E2FC               	bc	u1801
  1031                           
  1032                           ;LockMotor.c: 76: for (int i = 0; openMsg[i] != '\0'; i++) {
  1033  007B70  0E00               	movlw	0
  1034  007B72  0100               	movlb	0	; () banked
  1035  007B74  6FB4               	movwf	(LockMotor@i_534+1)& (0+255),b
  1036  007B76  0E00               	movlw	0
  1037  007B78  6FB3               	movwf	LockMotor@i_534& (0+255),b
  1038  007B7A  D00E               	goto	l2324
  1039  007B7C                     l2320:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;LockMotor.c: 77: lcd_write_data(openMsg[i]);
  1043  007B7C  0E96               	movlw	low LockMotor@openMsg
  1044  007B7E  0100               	movlb	0	; () banked
  1045  007B80  25B3               	addwf	LockMotor@i_534& (0+255),w,b
  1046  007B82  6ED9               	movwf	fsr2l,c
  1047  007B84  0E00               	movlw	high LockMotor@openMsg
  1048  007B86  0100               	movlb	0	; () banked
  1049  007B88  21B4               	addwfc	(LockMotor@i_534+1)& (0+255),w,b
  1050  007B8A  6EDA               	movwf	fsr2h,c
  1051  007B8C  50DF               	movf	indf2,w,c
  1052  007B8E  EC9A  F039         	call	_lcd_write_data
  1053  007B92  0100               	movlb	0	; () banked
  1054  007B94  4BB3               	infsnz	LockMotor@i_534& (0+255),f,b
  1055  007B96  2BB4               	incf	(LockMotor@i_534+1)& (0+255),f,b
  1056  007B98                     l2324:
  1057                           
  1058                           ; BSR set to: 0
  1059  007B98  0E96               	movlw	low LockMotor@openMsg
  1060  007B9A  0100               	movlb	0	; () banked
  1061  007B9C  25B3               	addwf	LockMotor@i_534& (0+255),w,b
  1062  007B9E  6ED9               	movwf	fsr2l,c
  1063  007BA0  0E00               	movlw	high LockMotor@openMsg
  1064  007BA2  0100               	movlb	0	; () banked
  1065  007BA4  21B4               	addwfc	(LockMotor@i_534+1)& (0+255),w,b
  1066  007BA6  6EDA               	movwf	fsr2h,c
  1067  007BA8  50DF               	movf	indf2,w,c
  1068  007BAA  A4D8               	btfss	status,2,c
  1069  007BAC  D7E7               	goto	l2320
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;LockMotor.c: 78: }
  1073                           ;LockMotor.c: 79: delay_ms(1000);
  1074                           
  1075                           ; BSR set to: 0
  1076  007BAE  0E03               	movlw	3
  1077  007BB0  6E02               	movwf	delay_ms@i+1,c
  1078  007BB2  0EE8               	movlw	232
  1079  007BB4  6E01               	movwf	delay_ms@i,c
  1080  007BB6  ECF6  F036         	call	_delay_ms	;wreg free
  1081                           
  1082                           ;LockMotor.c: 80: motorlock_unlock();
  1083  007BBA  ECF3  F037         	call	_motorlock_unlock	;wreg free
  1084                           
  1085                           ;LockMotor.c: 81: delay_ms(5000);
  1086  007BBE  0E13               	movlw	19
  1087  007BC0  6E02               	movwf	delay_ms@i+1,c
  1088  007BC2  0E88               	movlw	136
  1089  007BC4  6E01               	movwf	delay_ms@i,c
  1090  007BC6  ECF6  F036         	call	_delay_ms	;wreg free
  1091                           
  1092                           ;LockMotor.c: 82: motordoor_open();
  1093  007BCA  ECBD  F037         	call	_motordoor_open	;wreg free
  1094                           
  1095                           ;LockMotor.c: 83: delay_ms(1000);
  1096  007BCE  0E03               	movlw	3
  1097  007BD0  6E02               	movwf	delay_ms@i+1,c
  1098  007BD2  0EE8               	movlw	232
  1099  007BD4  6E01               	movwf	delay_ms@i,c
  1100  007BD6  ECF6  F036         	call	_delay_ms	;wreg free
  1101                           
  1102                           ;LockMotor.c: 84: lcd_write_cmd(0x01);
  1103  007BDA  0E01               	movlw	1
  1104  007BDC  EC29  F038         	call	_lcd_write_cmd
  1105                           
  1106                           ;LockMotor.c: 85: wrong=0;
  1107  007BE0  0E00               	movlw	0
  1108  007BE2  0100               	movlb	0	; () banked
  1109  007BE4  6FE6               	movwf	(_wrong+1)& (0+255),b
  1110  007BE6  0E00               	movlw	0
  1111  007BE8  6FE5               	movwf	_wrong& (0+255),b
  1112                           
  1113                           ;LockMotor.c: 86: } else {
  1114  007BEA  D03B               	goto	l2356
  1115  007BEC                     l2338:
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;LockMotor.c: 88: wrong++;
  1119  007BEC  0100               	movlb	0	; () banked
  1120  007BEE  4BE5               	infsnz	_wrong& (0+255),f,b
  1121  007BF0  2BE6               	incf	(_wrong+1)& (0+255),f,b
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;LockMotor.c: 89: lcd_write_cmd(0x01);
  1125  007BF2  0E01               	movlw	1
  1126  007BF4  EC29  F038         	call	_lcd_write_cmd
  1127                           
  1128                           ;LockMotor.c: 90: lcd_write_cmd(0x80);
  1129  007BF8  0E80               	movlw	128
  1130  007BFA  EC29  F038         	call	_lcd_write_cmd
  1131                           
  1132                           ;LockMotor.c: 91: char errorMsg[] = "WRONG PIN";
  1133  007BFE  EE20  F0D9         	lfsr	2,LockMotor@F4637
  1134  007C02  EE10  F0A3         	lfsr	1,LockMotor@errorMsg
  1135  007C06  0E09               	movlw	9
  1136  007C08                     u1821:
  1137  007C08  CFDB FFE3          	movff	plusw2,plusw1
  1138  007C0C  06E8               	decf	wreg,f,c
  1139  007C0E  E2FC               	bc	u1821
  1140                           
  1141                           ;LockMotor.c: 92: for (int i = 0; errorMsg[i] != '\0'; i++) {
  1142  007C10  0E00               	movlw	0
  1143  007C12  0100               	movlb	0	; () banked
  1144  007C14  6FB6               	movwf	(LockMotor@i_537+1)& (0+255),b
  1145  007C16  0E00               	movlw	0
  1146  007C18  6FB5               	movwf	LockMotor@i_537& (0+255),b
  1147  007C1A  D00E               	goto	l2352
  1148  007C1C                     l2348:
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;LockMotor.c: 93: lcd_write_data(errorMsg[i]);
  1152  007C1C  0EA3               	movlw	low LockMotor@errorMsg
  1153  007C1E  0100               	movlb	0	; () banked
  1154  007C20  25B5               	addwf	LockMotor@i_537& (0+255),w,b
  1155  007C22  6ED9               	movwf	fsr2l,c
  1156  007C24  0E00               	movlw	high LockMotor@errorMsg
  1157  007C26  0100               	movlb	0	; () banked
  1158  007C28  21B6               	addwfc	(LockMotor@i_537+1)& (0+255),w,b
  1159  007C2A  6EDA               	movwf	fsr2h,c
  1160  007C2C  50DF               	movf	indf2,w,c
  1161  007C2E  EC9A  F039         	call	_lcd_write_data
  1162  007C32  0100               	movlb	0	; () banked
  1163  007C34  4BB5               	infsnz	LockMotor@i_537& (0+255),f,b
  1164  007C36  2BB6               	incf	(LockMotor@i_537+1)& (0+255),f,b
  1165  007C38                     l2352:
  1166                           
  1167                           ; BSR set to: 0
  1168  007C38  0EA3               	movlw	low LockMotor@errorMsg
  1169  007C3A  0100               	movlb	0	; () banked
  1170  007C3C  25B5               	addwf	LockMotor@i_537& (0+255),w,b
  1171  007C3E  6ED9               	movwf	fsr2l,c
  1172  007C40  0E00               	movlw	high LockMotor@errorMsg
  1173  007C42  0100               	movlb	0	; () banked
  1174  007C44  21B6               	addwfc	(LockMotor@i_537+1)& (0+255),w,b
  1175  007C46  6EDA               	movwf	fsr2h,c
  1176  007C48  50DF               	movf	indf2,w,c
  1177  007C4A  A4D8               	btfss	status,2,c
  1178  007C4C  D7E7               	goto	l2348
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;LockMotor.c: 94: }
  1182                           ;LockMotor.c: 95: lcd_write_data(wrong);
  1183                           
  1184                           ; BSR set to: 0
  1185  007C4E  0100               	movlb	0	; () banked
  1186  007C50  51E5               	movf	_wrong& (0+255),w,b
  1187  007C52  EC9A  F039         	call	_lcd_write_data
  1188                           
  1189                           ;LockMotor.c: 97: delay_ms(2000);
  1190  007C56  0E07               	movlw	7
  1191  007C58  6E02               	movwf	delay_ms@i+1,c
  1192  007C5A  0ED0               	movlw	208
  1193  007C5C  6E01               	movwf	delay_ms@i,c
  1194  007C5E  ECF6  F036         	call	_delay_ms	;wreg free
  1195  007C62                     l2356:
  1196                           
  1197                           ;LockMotor.c: 100: }
  1198                           ;LockMotor.c: 101: if (wrong >= 3) {
  1199  007C62  0100               	movlb	0	; () banked
  1200  007C64  BFE6               	btfsc	(_wrong+1)& (0+255),7,b
  1201  007C66  0012               	return	
  1202  007C68  0100               	movlb	0	; () banked
  1203  007C6A  51E6               	movf	(_wrong+1)& (0+255),w,b
  1204  007C6C  E105               	bnz	u1840
  1205  007C6E  0E03               	movlw	3
  1206  007C70  0100               	movlb	0	; () banked
  1207  007C72  5DE5               	subwf	_wrong& (0+255),w,b
  1208  007C74  A0D8               	btfss	status,0,c
  1209  007C76  0012               	return	
  1210  007C78                     u1840:
  1211                           
  1212                           ; BSR set to: 0
  1213                           ;LockMotor.c: 103: UART_Write('1');
  1214  007C78  0E31               	movlw	49
  1215  007C7A  EC9E  F036         	call	_UART_Write
  1216  007C7E  0012               	return	
  1217  007C80                     __end_of_LockMotor:
  1218                           	opt stack 0
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           plusw1	equ	0xFE3
  1227                           fsr1l	equ	0xFE1
  1228                           indf2	equ	0xFDF
  1229                           plusw2	equ	0xFDB
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _motorlock_unlock *****************
  1235 ;; Defined at:
  1236 ;;		line 94 in file "MotorFunction.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;  Period          2   31[BANK0 ] int 
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  2  164[None  ] int 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        2 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; Hardware stack levels required when called:    5
  1257 ;; This function calls:
  1258 ;;		_PWM_Init
  1259 ;;		_SetDutyCycleTo
  1260 ;;		_delay
  1261 ;;		_setPeriodTo
  1262 ;; This function is called by:
  1263 ;;		_LockMotor
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text2
  1268  006FE6                     __ptext2:
  1269                           	opt stack 0
  1270  006FE6                     _motorlock_unlock:
  1271                           	opt stack 24
  1272                           
  1273                           ;MotorFunction.c: 95: int Period;
  1274                           ;MotorFunction.c: 96: PWM_Init();
  1275                           
  1276                           ;incstack = 0
  1277  006FE6  EC95  F036         	call	_PWM_Init	;wreg free
  1278                           
  1279                           ;MotorFunction.c: 97: Period = setPeriodTo(50);
  1280  006FEA  0E32               	movlw	50
  1281  006FEC  0100               	movlb	0	; () banked
  1282  006FEE  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1283  006FF0  0E00               	movlw	0
  1284  006FF2  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1285  006FF4  0E00               	movlw	0
  1286  006FF6  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1287  006FF8  0E00               	movlw	0
  1288  006FFA  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  1289  006FFC  EC40  F03E         	call	_setPeriodTo	;wreg free
  1290  007000  C066  F07F         	movff	?_setPeriodTo,motorlock_unlock@Period
  1291  007004  C067  F080         	movff	?_setPeriodTo+1,motorlock_unlock@Period+1
  1292                           
  1293                           ;MotorFunction.c: 98: SetDutyCycleTo(3.0, Period);
  1294  007008  0E00               	movlw	0
  1295  00700A  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  1296  00700C  0E40               	movlw	64
  1297  00700E  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  1298  007010  0E40               	movlw	64
  1299  007012  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  1300  007014  C07F  F04E         	movff	motorlock_unlock@Period,SetDutyCycleTo@Period
  1301  007018  C080  F04F         	movff	motorlock_unlock@Period+1,SetDutyCycleTo@Period+1
  1302  00701C  ECA0  F03A         	call	_SetDutyCycleTo	;wreg free
  1303                           
  1304                           ;MotorFunction.c: 99: delay(1000);
  1305  007020  0E03               	movlw	3
  1306  007022  6E02               	movwf	delay@val+1,c
  1307  007024  0EE8               	movlw	232
  1308  007026  6E01               	movwf	delay@val,c
  1309  007028  EC2B  F037         	call	_delay	;wreg free
  1310                           
  1311                           ;MotorFunction.c: 100: SetDutyCycleTo(7.0, Period);
  1312  00702C  0E00               	movlw	0
  1313  00702E  6E4B               	movwf	SetDutyCycleTo@Duty_cycle,c
  1314  007030  0EE0               	movlw	224
  1315  007032  6E4C               	movwf	SetDutyCycleTo@Duty_cycle+1,c
  1316  007034  0E40               	movlw	64
  1317  007036  6E4D               	movwf	SetDutyCycleTo@Duty_cycle+2,c
  1318  007038  C07F  F04E         	movff	motorlock_unlock@Period,SetDutyCycleTo@Period
  1319  00703C  C080  F04F         	movff	motorlock_unlock@Period+1,SetDutyCycleTo@Period+1
  1320  007040  ECA0  F03A         	call	_SetDutyCycleTo	;wreg free
  1321                           
  1322                           ;MotorFunction.c: 101: delay(1000);
  1323  007044  0E03               	movlw	3
  1324  007046  6E02               	movwf	delay@val+1,c
  1325  007048  0EE8               	movlw	232
  1326  00704A  6E01               	movwf	delay@val,c
  1327  00704C  EC2B  F037         	call	_delay	;wreg free
  1328  007050  0012               	return		;funcret
  1329  007052                     __end_of_motorlock_unlock:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           postinc0	equ	0xFEE
  1336                           wreg	equ	0xFE8
  1337                           postdec1	equ	0xFE5
  1338                           plusw1	equ	0xFE3
  1339                           fsr1l	equ	0xFE1
  1340                           indf2	equ	0xFDF
  1341                           plusw2	equ	0xFDB
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           status	equ	0xFD8
  1345                           
  1346 ;; *************** function _SetDutyCycleTo *****************
  1347 ;; Defined at:
  1348 ;;		line 62 in file "MotorFunction.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  Duty_cycle      3   74[COMRAM] float 
  1351 ;;  Period          2   77[COMRAM] int 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  PWM10BitValu    2   84[COMRAM] int 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;		None               void
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1363 ;;      Params:         5       0       0       0       0       0       0       0       0
  1364 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1365 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1366 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1367 ;;Total ram usage:       12 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    2
  1370 ;; This function calls:
  1371 ;;		___awtoft
  1372 ;;		___ftadd
  1373 ;;		___ftdiv
  1374 ;;		___ftmul
  1375 ;;		___fttol
  1376 ;; This function is called by:
  1377 ;;		_motorlock_unlock
  1378 ;;		_motorlock_lock
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text3
  1383  007540                     __ptext3:
  1384                           	opt stack 0
  1385  007540                     _SetDutyCycleTo:
  1386                           	opt stack 26
  1387                           
  1388                           ;MotorFunction.c: 64: int PWM10BitValue;
  1389                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  1390                           
  1391                           ;incstack = 0
  1392  007540  0E00               	movlw	0
  1393  007542  6E15               	movwf	___ftdiv@f2,c
  1394  007544  0EC8               	movlw	200
  1395  007546  6E16               	movwf	___ftdiv@f2+1,c
  1396  007548  0E42               	movlw	66
  1397  00754A  6E17               	movwf	___ftdiv@f2+2,c
  1398  00754C  C04B  F012         	movff	SetDutyCycleTo@Duty_cycle,___ftdiv@f1
  1399  007550  C04C  F013         	movff	SetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  1400  007554  C04D  F014         	movff	SetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  1401  007558  EC05  F03B         	call	___ftdiv	;wreg free
  1402  00755C  C012  F030         	movff	?___ftdiv,___ftmul@f2
  1403  007560  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  1404  007564  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  1405  007568  0E00               	movlw	0
  1406  00756A  6E24               	movwf	___ftadd@f2,c
  1407  00756C  0E80               	movlw	128
  1408  00756E  6E25               	movwf	___ftadd@f2+1,c
  1409  007570  0E3F               	movlw	63
  1410  007572  6E26               	movwf	___ftadd@f2+2,c
  1411  007574  C04E  F009         	movff	SetDutyCycleTo@Period,___awtoft@c
  1412  007578  C04F  F00A         	movff	SetDutyCycleTo@Period+1,___awtoft@c+1
  1413  00757C  EC46  F037         	call	___awtoft	;wreg free
  1414  007580  C009  F021         	movff	?___awtoft,___ftadd@f1
  1415  007584  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  1416  007588  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  1417  00758C  EC6C  F03C         	call	___ftadd	;wreg free
  1418  007590  C021  F02D         	movff	?___ftadd,___ftmul@f1
  1419  007594  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  1420  007598  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  1421  00759C  EC78  F03B         	call	___ftmul	;wreg free
  1422  0075A0  C02D  F052         	movff	?___ftmul,_SetDutyCycleTo$1377
  1423  0075A4  C02E  F053         	movff	?___ftmul+1,_SetDutyCycleTo$1377+1
  1424  0075A8  C02F  F054         	movff	?___ftmul+2,_SetDutyCycleTo$1377+2
  1425                           
  1426                           ;MotorFunction.c: 64: int PWM10BitValue;
  1427                           ;MotorFunction.c: 66: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  1428  0075AC  0E00               	movlw	0
  1429  0075AE  6E30               	movwf	___ftmul@f2,c
  1430  0075B0  0E80               	movlw	128
  1431  0075B2  6E31               	movwf	___ftmul@f2+1,c
  1432  0075B4  0E40               	movlw	64
  1433  0075B6  6E32               	movwf	___ftmul@f2+2,c
  1434  0075B8  C052  F02D         	movff	_SetDutyCycleTo$1377,___ftmul@f1
  1435  0075BC  C053  F02E         	movff	_SetDutyCycleTo$1377+1,___ftmul@f1+1
  1436  0075C0  C054  F02F         	movff	_SetDutyCycleTo$1377+2,___ftmul@f1+2
  1437  0075C4  EC78  F03B         	call	___ftmul	;wreg free
  1438  0075C8  C02D  F03C         	movff	?___ftmul,___fttol@f1
  1439  0075CC  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  1440  0075D0  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  1441  0075D4  ECF2  F03B         	call	___fttol	;wreg free
  1442  0075D8  C03C  F055         	movff	?___fttol,SetDutyCycleTo@PWM10BitValue
  1443  0075DC  C03D  F056         	movff	?___fttol+1,SetDutyCycleTo@PWM10BitValue+1
  1444                           
  1445                           ;MotorFunction.c: 67: CCPR1L = (PWM10BitValue >> 2);
  1446  0075E0  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  1447  0075E4  C056  F051         	movff	SetDutyCycleTo@PWM10BitValue+1,??_SetDutyCycleTo+1
  1448  0075E8  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  1449  0075EA  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  1450  0075EC  3250               	rrcf	??_SetDutyCycleTo,f,c
  1451  0075EE  3451               	rlcf	??_SetDutyCycleTo+1,w,c
  1452  0075F0  3251               	rrcf	??_SetDutyCycleTo+1,f,c
  1453  0075F2  3250               	rrcf	??_SetDutyCycleTo,f,c
  1454  0075F4  5050               	movf	??_SetDutyCycleTo,w,c
  1455  0075F6  6EBE               	movwf	4030,c	;volatile
  1456                           
  1457                           ;MotorFunction.c: 68: CCP1CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  1458  0075F8  C055  F050         	movff	SetDutyCycleTo@PWM10BitValue,??_SetDutyCycleTo
  1459  0075FC  0E03               	movlw	3
  1460  0075FE  1650               	andwf	??_SetDutyCycleTo,f,c
  1461  007600  3850               	swapf	??_SetDutyCycleTo,w,c
  1462  007602  0BF0               	andlw	240
  1463  007604  090C               	iorlw	12
  1464  007606  6EBD               	movwf	4029,c	;volatile
  1465  007608  0012               	return		;funcret
  1466  00760A                     __end_of_SetDutyCycleTo:
  1467                           	opt stack 0
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postdec1	equ	0xFE5
  1475                           plusw1	equ	0xFE3
  1476                           fsr1l	equ	0xFE1
  1477                           indf2	equ	0xFDF
  1478                           plusw2	equ	0xFDB
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _PWM_Init *****************
  1484 ;; Defined at:
  1485 ;;		line 20 in file "MotorFunction.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;		None               void
  1492 ;; Registers used:
  1493 ;;		wreg, status,2
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1502 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_motorlock_unlock
  1509 ;;		_motor_init
  1510 ;;		_motorlock_lock
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text4
  1515  006D2A                     __ptext4:
  1516                           	opt stack 0
  1517  006D2A                     _PWM_Init:
  1518                           	opt stack 28
  1519                           
  1520                           ;MotorFunction.c: 22: TRISCbits.TRISC2 = 0;
  1521                           
  1522                           ;incstack = 0
  1523  006D2A  9494               	bcf	3988,2,c	;volatile
  1524                           
  1525                           ;MotorFunction.c: 23: CCP1CON = 0x0C;
  1526  006D2C  0E0C               	movlw	12
  1527  006D2E  6EBD               	movwf	4029,c	;volatile
  1528  006D30  0012               	return		;funcret
  1529  006D32                     __end_of_PWM_Init:
  1530                           	opt stack 0
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           plusw1	equ	0xFE3
  1539                           fsr1l	equ	0xFE1
  1540                           indf2	equ	0xFDF
  1541                           plusw2	equ	0xFDB
  1542                           fsr2h	equ	0xFDA
  1543                           fsr2l	equ	0xFD9
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function _motordoor_open *****************
  1547 ;; Defined at:
  1548 ;;		line 114 in file "MotorFunction.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  Period          2   31[BANK0 ] int 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  2  166[None  ] int 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1562 ;;      Params:         0       0       0       0       0       0       0       0       0
  1563 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1565 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1566 ;;Total ram usage:        2 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    5
  1569 ;; This function calls:
  1570 ;;		_PWMdoor_Init
  1571 ;;		_delay
  1572 ;;		_doorSetDutyCycleTo
  1573 ;;		_setPeriodTo
  1574 ;; This function is called by:
  1575 ;;		_LockMotor
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text5
  1580  006F7A                     __ptext5:
  1581                           	opt stack 0
  1582  006F7A                     _motordoor_open:
  1583                           	opt stack 24
  1584                           
  1585                           ;MotorFunction.c: 115: int Period;
  1586                           ;MotorFunction.c: 116: PWMdoor_Init();
  1587                           
  1588                           ;incstack = 0
  1589  006F7A  EC91  F036         	call	_PWMdoor_Init	;wreg free
  1590                           
  1591                           ;MotorFunction.c: 117: Period = setPeriodTo(50);
  1592  006F7E  0E32               	movlw	50
  1593  006F80  0100               	movlb	0	; () banked
  1594  006F82  6F66               	movwf	setPeriodTo@FPWM& (0+255),b
  1595  006F84  0E00               	movlw	0
  1596  006F86  6F67               	movwf	(setPeriodTo@FPWM+1)& (0+255),b
  1597  006F88  0E00               	movlw	0
  1598  006F8A  6F68               	movwf	(setPeriodTo@FPWM+2)& (0+255),b
  1599  006F8C  0E00               	movlw	0
  1600  006F8E  6F69               	movwf	(setPeriodTo@FPWM+3)& (0+255),b
  1601  006F90  EC40  F03E         	call	_setPeriodTo	;wreg free
  1602  006F94  C066  F07F         	movff	?_setPeriodTo,motordoor_open@Period
  1603  006F98  C067  F080         	movff	?_setPeriodTo+1,motordoor_open@Period+1
  1604                           
  1605                           ;MotorFunction.c: 118: doorSetDutyCycleTo(3.0, Period);
  1606  006F9C  0E00               	movlw	0
  1607  006F9E  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  1608  006FA0  0E40               	movlw	64
  1609  006FA2  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  1610  006FA4  0E40               	movlw	64
  1611  006FA6  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  1612  006FA8  C07F  F04E         	movff	motordoor_open@Period,doorSetDutyCycleTo@Period
  1613  006FAC  C080  F04F         	movff	motordoor_open@Period+1,doorSetDutyCycleTo@Period+1
  1614  006FB0  EC3B  F03A         	call	_doorSetDutyCycleTo	;wreg free
  1615                           
  1616                           ;MotorFunction.c: 119: delay(1000);
  1617  006FB4  0E03               	movlw	3
  1618  006FB6  6E02               	movwf	delay@val+1,c
  1619  006FB8  0EE8               	movlw	232
  1620  006FBA  6E01               	movwf	delay@val,c
  1621  006FBC  EC2B  F037         	call	_delay	;wreg free
  1622                           
  1623                           ;MotorFunction.c: 120: doorSetDutyCycleTo(7.0, Period);
  1624  006FC0  0E00               	movlw	0
  1625  006FC2  6E4B               	movwf	doorSetDutyCycleTo@Duty_cycle,c
  1626  006FC4  0EE0               	movlw	224
  1627  006FC6  6E4C               	movwf	doorSetDutyCycleTo@Duty_cycle+1,c
  1628  006FC8  0E40               	movlw	64
  1629  006FCA  6E4D               	movwf	doorSetDutyCycleTo@Duty_cycle+2,c
  1630  006FCC  C07F  F04E         	movff	motordoor_open@Period,doorSetDutyCycleTo@Period
  1631  006FD0  C080  F04F         	movff	motordoor_open@Period+1,doorSetDutyCycleTo@Period+1
  1632  006FD4  EC3B  F03A         	call	_doorSetDutyCycleTo	;wreg free
  1633                           
  1634                           ;MotorFunction.c: 121: delay(1000);
  1635  006FD8  0E03               	movlw	3
  1636  006FDA  6E02               	movwf	delay@val+1,c
  1637  006FDC  0EE8               	movlw	232
  1638  006FDE  6E01               	movwf	delay@val,c
  1639  006FE0  EC2B  F037         	call	_delay	;wreg free
  1640  006FE4  0012               	return		;funcret
  1641  006FE6                     __end_of_motordoor_open:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postdec1	equ	0xFE5
  1650                           plusw1	equ	0xFE3
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           plusw2	equ	0xFDB
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function _setPeriodTo *****************
  1659 ;; Defined at:
  1660 ;;		line 32 in file "MotorFunction.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  FPWM            4    6[BANK0 ] unsigned long 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  _resolution     4   27[BANK0 ] unsigned long 
  1665 ;;  FOSC            4   18[BANK0 ] unsigned long 
  1666 ;;  period          3   24[BANK0 ] float 
  1667 ;;  clockSelectB    2   22[BANK0 ] int 
  1668 ;;  TimerPrescal    2   16[BANK0 ] int 
  1669 ;;  TimerPrescal    2   14[BANK0 ] int 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  2    6[BANK0 ] int 
  1672 ;; Registers used:
  1673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1679 ;;      Params:         0       4       0       0       0       0       0       0       0
  1680 ;;      Locals:         0      20       0       0       0       0       0       0       0
  1681 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1682 ;;      Totals:         0      25       0       0       0       0       0       0       0
  1683 ;;Total ram usage:       25 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    4
  1686 ;; This function calls:
  1687 ;;		___awtoft
  1688 ;;		___ftadd
  1689 ;;		___ftdiv
  1690 ;;		___ftmul
  1691 ;;		___fttol
  1692 ;;		___lltoft
  1693 ;;		_round
  1694 ;; This function is called by:
  1695 ;;		_motorlock_unlock
  1696 ;;		_motordoor_open
  1697 ;;		_motor_init
  1698 ;;		_motorlock_lock
  1699 ;;		_motordoor_close
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703                           	psect	text6
  1704  007C80                     __ptext6:
  1705                           	opt stack 0
  1706  007C80                     _setPeriodTo:
  1707                           	opt stack 24
  1708                           
  1709                           ;MotorFunction.c: 34: int clockSelectBits, TimerPrescaleBits;
  1710                           ;MotorFunction.c: 35: int TimerPrescaleValue;
  1711                           ;MotorFunction.c: 36: float period;
  1712                           ;MotorFunction.c: 37: unsigned long FOSC, _resolution = 488;
  1713                           
  1714                           ;incstack = 0
  1715  007C80  0EE8               	movlw	232
  1716  007C82  0100               	movlb	0	; () banked
  1717  007C84  6F7B               	movwf	setPeriodTo@_resolution& (0+255),b
  1718  007C86  0E01               	movlw	1
  1719  007C88  6F7C               	movwf	(setPeriodTo@_resolution+1)& (0+255),b
  1720  007C8A  0E00               	movlw	0
  1721  007C8C  6F7D               	movwf	(setPeriodTo@_resolution+2)& (0+255),b
  1722  007C8E  0E00               	movlw	0
  1723  007C90  6F7E               	movwf	(setPeriodTo@_resolution+3)& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;MotorFunction.c: 39: if (FPWM < 8000) {TimerPrescaleBits = 2; TimerPrescaleValue = 16;}
  1727  007C92  0100               	movlb	0	; () banked
  1728  007C94  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1729  007C96  0100               	movlb	0	; () banked
  1730  007C98  1168               	iorwf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1731  007C9A  E112               	bnz	l2086
  1732  007C9C  0E40               	movlw	64
  1733  007C9E  0100               	movlb	0	; () banked
  1734  007CA0  5D66               	subwf	setPeriodTo@FPWM& (0+255),w,b
  1735  007CA2  0E1F               	movlw	31
  1736  007CA4  0100               	movlb	0	; () banked
  1737  007CA6  5967               	subwfb	(setPeriodTo@FPWM+1)& (0+255),w,b
  1738  007CA8  B0D8               	btfsc	status,0,c
  1739  007CAA  D00A               	goto	l2086
  1740                           
  1741                           ; BSR set to: 0
  1742  007CAC  0E00               	movlw	0
  1743  007CAE  0100               	movlb	0	; () banked
  1744  007CB0  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  1745  007CB2  0E02               	movlw	2
  1746  007CB4  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  1747  007CB6  0E00               	movlw	0
  1748  007CB8  0100               	movlb	0	; () banked
  1749  007CBA  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  1750  007CBC  0E10               	movlw	16
  1751  007CBE  D009               	goto	L1
  1752  007CC0                     l2086:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;MotorFunction.c: 40: else {TimerPrescaleBits = 0; TimerPrescaleValue = 1;}
  1756  007CC0  0E00               	movlw	0
  1757  007CC2  0100               	movlb	0	; () banked
  1758  007CC4  6F6F               	movwf	(setPeriodTo@TimerPrescaleBits+1)& (0+255),b
  1759  007CC6  0E00               	movlw	0
  1760  007CC8  6F6E               	movwf	setPeriodTo@TimerPrescaleBits& (0+255),b
  1761  007CCA  0E00               	movlw	0
  1762  007CCC  0100               	movlb	0	; () banked
  1763  007CCE  6F71               	movwf	(setPeriodTo@TimerPrescaleValue+1)& (0+255),b
  1764  007CD0  0E01               	movlw	1
  1765  007CD2                     L1:
  1766  007CD2  6F70               	movwf	setPeriodTo@TimerPrescaleValue& (0+255),b
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;MotorFunction.c: 42: if (FPWM > _resolution) {clockSelectBits = 7; FOSC = 8000000;}
  1770                           
  1771                           ; BSR set to: 0
  1772  007CD4  0100               	movlb	0	; () banked
  1773  007CD6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1774  007CD8  0100               	movlb	0	; () banked
  1775  007CDA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1776  007CDC  0100               	movlb	0	; () banked
  1777  007CDE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1778  007CE0  0100               	movlb	0	; () banked
  1779  007CE2  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1780  007CE4  0100               	movlb	0	; () banked
  1781  007CE6  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1782  007CE8  0100               	movlb	0	; () banked
  1783  007CEA  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1784  007CEC  0100               	movlb	0	; () banked
  1785  007CEE  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1786  007CF0  0100               	movlb	0	; () banked
  1787  007CF2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1788  007CF4  B0D8               	btfsc	status,0,c
  1789  007CF6  D00C               	goto	l2092
  1790                           
  1791                           ; BSR set to: 0
  1792  007CF8  0E00               	movlw	0
  1793  007CFA  0100               	movlb	0	; () banked
  1794  007CFC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1795  007CFE  0E07               	movlw	7
  1796  007D00  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1797  007D02  0E00               	movlw	0
  1798  007D04  0100               	movlb	0	; () banked
  1799  007D06  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1800  007D08  0E12               	movlw	18
  1801  007D0A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1802  007D0C  0E7A               	movlw	122
  1803  007D0E  D0E3               	goto	L8
  1804  007D10                     l2092:
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;MotorFunction.c: 43: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 6; FOSC = 
      +                          4000000;}
  1808  007D10  0100               	movlb	0	; () banked
  1809  007D12  90D8               	bcf	status,0,c
  1810  007D14  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1811  007D16  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1812  007D18  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1813  007D1A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1814  007D1C  0100               	movlb	0	; () banked
  1815  007D1E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1816  007D20  0100               	movlb	0	; () banked
  1817  007D22  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1818  007D24  0100               	movlb	0	; () banked
  1819  007D26  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1820  007D28  0100               	movlb	0	; () banked
  1821  007D2A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1822  007D2C  0100               	movlb	0	; () banked
  1823  007D2E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1824  007D30  0100               	movlb	0	; () banked
  1825  007D32  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1826  007D34  0100               	movlb	0	; () banked
  1827  007D36  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1828  007D38  0100               	movlb	0	; () banked
  1829  007D3A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1830  007D3C  B0D8               	btfsc	status,0,c
  1831  007D3E  D00C               	goto	l2096
  1832                           
  1833                           ; BSR set to: 0
  1834  007D40  0E00               	movlw	0
  1835  007D42  0100               	movlb	0	; () banked
  1836  007D44  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1837  007D46  0E06               	movlw	6
  1838  007D48  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1839  007D4A  0E00               	movlw	0
  1840  007D4C  0100               	movlb	0	; () banked
  1841  007D4E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1842  007D50  0E09               	movlw	9
  1843  007D52  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1844  007D54  0E3D               	movlw	61
  1845  007D56  D0BF               	goto	L8
  1846  007D58                     l2096:
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;MotorFunction.c: 44: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 5; FOSC = 
      +                          2000000;}
  1850  007D58  0100               	movlb	0	; () banked
  1851  007D5A  90D8               	bcf	status,0,c
  1852  007D5C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1853  007D5E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1854  007D60  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1855  007D62  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1856  007D64  0100               	movlb	0	; () banked
  1857  007D66  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1858  007D68  0100               	movlb	0	; () banked
  1859  007D6A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1860  007D6C  0100               	movlb	0	; () banked
  1861  007D6E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1862  007D70  0100               	movlb	0	; () banked
  1863  007D72  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1864  007D74  0100               	movlb	0	; () banked
  1865  007D76  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1866  007D78  0100               	movlb	0	; () banked
  1867  007D7A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1868  007D7C  0100               	movlb	0	; () banked
  1869  007D7E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1870  007D80  0100               	movlb	0	; () banked
  1871  007D82  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1872  007D84  B0D8               	btfsc	status,0,c
  1873  007D86  D00C               	goto	l2100
  1874                           
  1875                           ; BSR set to: 0
  1876  007D88  0E00               	movlw	0
  1877  007D8A  0100               	movlb	0	; () banked
  1878  007D8C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1879  007D8E  0E05               	movlw	5
  1880  007D90  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1881  007D92  0E80               	movlw	128
  1882  007D94  0100               	movlb	0	; () banked
  1883  007D96  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1884  007D98  0E84               	movlw	132
  1885  007D9A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1886  007D9C  0E1E               	movlw	30
  1887  007D9E  D09B               	goto	L8
  1888  007DA0                     l2100:
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;MotorFunction.c: 45: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 4; FOSC = 
      +                          1000000;}
  1892  007DA0  0100               	movlb	0	; () banked
  1893  007DA2  90D8               	bcf	status,0,c
  1894  007DA4  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1895  007DA6  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1896  007DA8  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1897  007DAA  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1898  007DAC  0100               	movlb	0	; () banked
  1899  007DAE  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1900  007DB0  0100               	movlb	0	; () banked
  1901  007DB2  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1902  007DB4  0100               	movlb	0	; () banked
  1903  007DB6  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1904  007DB8  0100               	movlb	0	; () banked
  1905  007DBA  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1906  007DBC  0100               	movlb	0	; () banked
  1907  007DBE  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1908  007DC0  0100               	movlb	0	; () banked
  1909  007DC2  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1910  007DC4  0100               	movlb	0	; () banked
  1911  007DC6  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1912  007DC8  0100               	movlb	0	; () banked
  1913  007DCA  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1914  007DCC  B0D8               	btfsc	status,0,c
  1915  007DCE  D00C               	goto	l2104
  1916                           
  1917                           ; BSR set to: 0
  1918  007DD0  0E00               	movlw	0
  1919  007DD2  0100               	movlb	0	; () banked
  1920  007DD4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1921  007DD6  0E04               	movlw	4
  1922  007DD8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1923  007DDA  0E40               	movlw	64
  1924  007DDC  0100               	movlb	0	; () banked
  1925  007DDE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1926  007DE0  0E42               	movlw	66
  1927  007DE2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1928  007DE4  0E0F               	movlw	15
  1929  007DE6  D077               	goto	L8
  1930  007DE8                     l2104:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;MotorFunction.c: 46: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 3; FOSC = 
      +                          500000;}
  1934  007DE8  0100               	movlb	0	; () banked
  1935  007DEA  90D8               	bcf	status,0,c
  1936  007DEC  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1937  007DEE  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1938  007DF0  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1939  007DF2  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1940  007DF4  0100               	movlb	0	; () banked
  1941  007DF6  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1942  007DF8  0100               	movlb	0	; () banked
  1943  007DFA  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1944  007DFC  0100               	movlb	0	; () banked
  1945  007DFE  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1946  007E00  0100               	movlb	0	; () banked
  1947  007E02  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1948  007E04  0100               	movlb	0	; () banked
  1949  007E06  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1950  007E08  0100               	movlb	0	; () banked
  1951  007E0A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1952  007E0C  0100               	movlb	0	; () banked
  1953  007E0E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1954  007E10  0100               	movlb	0	; () banked
  1955  007E12  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1956  007E14  B0D8               	btfsc	status,0,c
  1957  007E16  D00C               	goto	l2108
  1958                           
  1959                           ; BSR set to: 0
  1960  007E18  0E00               	movlw	0
  1961  007E1A  0100               	movlb	0	; () banked
  1962  007E1C  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  1963  007E1E  0E03               	movlw	3
  1964  007E20  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  1965  007E22  0E20               	movlw	32
  1966  007E24  0100               	movlb	0	; () banked
  1967  007E26  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  1968  007E28  0EA1               	movlw	161
  1969  007E2A  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  1970  007E2C  0E07               	movlw	7
  1971  007E2E  D053               	goto	L8
  1972  007E30                     l2108:
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;MotorFunction.c: 47: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 2; FOSC = 
      +                          250000;}
  1976  007E30  0100               	movlb	0	; () banked
  1977  007E32  90D8               	bcf	status,0,c
  1978  007E34  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  1979  007E36  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  1980  007E38  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  1981  007E3A  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  1982  007E3C  0100               	movlb	0	; () banked
  1983  007E3E  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  1984  007E40  0100               	movlb	0	; () banked
  1985  007E42  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  1986  007E44  0100               	movlb	0	; () banked
  1987  007E46  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  1988  007E48  0100               	movlb	0	; () banked
  1989  007E4A  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  1990  007E4C  0100               	movlb	0	; () banked
  1991  007E4E  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  1992  007E50  0100               	movlb	0	; () banked
  1993  007E52  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  1994  007E54  0100               	movlb	0	; () banked
  1995  007E56  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  1996  007E58  0100               	movlb	0	; () banked
  1997  007E5A  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  1998  007E5C  B0D8               	btfsc	status,0,c
  1999  007E5E  D00C               	goto	l2112
  2000                           
  2001                           ; BSR set to: 0
  2002  007E60  0E00               	movlw	0
  2003  007E62  0100               	movlb	0	; () banked
  2004  007E64  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2005  007E66  0E02               	movlw	2
  2006  007E68  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2007  007E6A  0E90               	movlw	144
  2008  007E6C  0100               	movlb	0	; () banked
  2009  007E6E  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2010  007E70  0ED0               	movlw	208
  2011  007E72  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2012  007E74  0E03               	movlw	3
  2013  007E76  D02F               	goto	L8
  2014  007E78                     l2112:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;MotorFunction.c: 48: else if (FPWM > (_resolution >>= 1)) {clockSelectBits = 1; FOSC = 
      +                          125000;}
  2018  007E78  0100               	movlb	0	; () banked
  2019  007E7A  90D8               	bcf	status,0,c
  2020  007E7C  337E               	rrcf	(setPeriodTo@_resolution+3)& (0+255),f,b
  2021  007E7E  337D               	rrcf	(setPeriodTo@_resolution+2)& (0+255),f,b
  2022  007E80  337C               	rrcf	(setPeriodTo@_resolution+1)& (0+255),f,b
  2023  007E82  337B               	rrcf	setPeriodTo@_resolution& (0+255),f,b
  2024  007E84  0100               	movlb	0	; () banked
  2025  007E86  5166               	movf	setPeriodTo@FPWM& (0+255),w,b
  2026  007E88  0100               	movlb	0	; () banked
  2027  007E8A  5D7B               	subwf	setPeriodTo@_resolution& (0+255),w,b
  2028  007E8C  0100               	movlb	0	; () banked
  2029  007E8E  5167               	movf	(setPeriodTo@FPWM+1)& (0+255),w,b
  2030  007E90  0100               	movlb	0	; () banked
  2031  007E92  597C               	subwfb	(setPeriodTo@_resolution+1)& (0+255),w,b
  2032  007E94  0100               	movlb	0	; () banked
  2033  007E96  5168               	movf	(setPeriodTo@FPWM+2)& (0+255),w,b
  2034  007E98  0100               	movlb	0	; () banked
  2035  007E9A  597D               	subwfb	(setPeriodTo@_resolution+2)& (0+255),w,b
  2036  007E9C  0100               	movlb	0	; () banked
  2037  007E9E  5169               	movf	(setPeriodTo@FPWM+3)& (0+255),w,b
  2038  007EA0  0100               	movlb	0	; () banked
  2039  007EA2  597E               	subwfb	(setPeriodTo@_resolution+3)& (0+255),w,b
  2040  007EA4  B0D8               	btfsc	status,0,c
  2041  007EA6  D00C               	goto	l2116
  2042                           
  2043                           ; BSR set to: 0
  2044  007EA8  0E00               	movlw	0
  2045  007EAA  0100               	movlb	0	; () banked
  2046  007EAC  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2047  007EAE  0E01               	movlw	1
  2048  007EB0  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2049  007EB2  0E48               	movlw	72
  2050  007EB4  0100               	movlb	0	; () banked
  2051  007EB6  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2052  007EB8  0EE8               	movlw	232
  2053  007EBA  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2054  007EBC  0E01               	movlw	1
  2055  007EBE  D00B               	goto	L8
  2056  007EC0                     l2116:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;MotorFunction.c: 49: else {clockSelectBits = 0; FOSC = 31000;}
  2060  007EC0  0E00               	movlw	0
  2061  007EC2  0100               	movlb	0	; () banked
  2062  007EC4  6F77               	movwf	(setPeriodTo@clockSelectBits+1)& (0+255),b
  2063  007EC6  0E00               	movlw	0
  2064  007EC8  6F76               	movwf	setPeriodTo@clockSelectBits& (0+255),b
  2065  007ECA  0E18               	movlw	24
  2066  007ECC  0100               	movlb	0	; () banked
  2067  007ECE  6F72               	movwf	setPeriodTo@FOSC& (0+255),b
  2068  007ED0  0E79               	movlw	121
  2069  007ED2  6F73               	movwf	(setPeriodTo@FOSC+1)& (0+255),b
  2070  007ED4  0E00               	movlw	0
  2071  007ED6                     L8:
  2072  007ED6  6F74               	movwf	(setPeriodTo@FOSC+2)& (0+255),b
  2073  007ED8  0E00               	movlw	0
  2074  007EDA  6F75               	movwf	(setPeriodTo@FOSC+3)& (0+255),b
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2078                           
  2079                           ; BSR set to: 0
  2080                           
  2081                           ; BSR set to: 0
  2082                           
  2083                           ; BSR set to: 0
  2084                           
  2085                           ; BSR set to: 0
  2086                           
  2087                           ; BSR set to: 0
  2088                           
  2089                           ; BSR set to: 0
  2090                           
  2091                           ; BSR set to: 0
  2092  007EDC  C066  F009         	movff	setPeriodTo@FPWM,___lltoft@c
  2093  007EE0  C067  F00A         	movff	setPeriodTo@FPWM+1,___lltoft@c+1
  2094  007EE4  C068  F00B         	movff	setPeriodTo@FPWM+2,___lltoft@c+2
  2095  007EE8  C069  F00C         	movff	setPeriodTo@FPWM+3,___lltoft@c+3
  2096  007EEC  EC8F  F037         	call	___lltoft	;wreg free
  2097  007EF0  C009  F030         	movff	?___lltoft,___ftmul@f2
  2098  007EF4  C00A  F031         	movff	?___lltoft+1,___ftmul@f2+1
  2099  007EF8  C00B  F032         	movff	?___lltoft+2,___ftmul@f2+2
  2100  007EFC  C070  F009         	movff	setPeriodTo@TimerPrescaleValue,___awtoft@c
  2101  007F00  C071  F00A         	movff	setPeriodTo@TimerPrescaleValue+1,___awtoft@c+1
  2102  007F04  EC46  F037         	call	___awtoft	;wreg free
  2103  007F08  C009  F02D         	movff	?___awtoft,___ftmul@f1
  2104  007F0C  C00A  F02E         	movff	?___awtoft+1,___ftmul@f1+1
  2105  007F10  C00B  F02F         	movff	?___awtoft+2,___ftmul@f1+2
  2106  007F14  EC78  F03B         	call	___ftmul	;wreg free
  2107  007F18  C02D  F06B         	movff	?___ftmul,_setPeriodTo$1376
  2108  007F1C  C02E  F06C         	movff	?___ftmul+1,_setPeriodTo$1376+1
  2109  007F20  C02F  F06D         	movff	?___ftmul+2,_setPeriodTo$1376+2
  2110                           
  2111                           ;MotorFunction.c: 51: period = ((float)FOSC / (4.0 * (float)TimerPrescaleValue * (float)
      +                          FPWM)) - 1.0;
  2112  007F24  0E00               	movlw	0
  2113  007F26  6E30               	movwf	___ftmul@f2,c
  2114  007F28  0E80               	movlw	128
  2115  007F2A  6E31               	movwf	___ftmul@f2+1,c
  2116  007F2C  0E40               	movlw	64
  2117  007F2E  6E32               	movwf	___ftmul@f2+2,c
  2118  007F30  C06B  F02D         	movff	_setPeriodTo$1376,___ftmul@f1
  2119  007F34  C06C  F02E         	movff	_setPeriodTo$1376+1,___ftmul@f1+1
  2120  007F38  C06D  F02F         	movff	_setPeriodTo$1376+2,___ftmul@f1+2
  2121  007F3C  EC78  F03B         	call	___ftmul	;wreg free
  2122  007F40  C02D  F015         	movff	?___ftmul,___ftdiv@f2
  2123  007F44  C02E  F016         	movff	?___ftmul+1,___ftdiv@f2+1
  2124  007F48  C02F  F017         	movff	?___ftmul+2,___ftdiv@f2+2
  2125  007F4C  C072  F009         	movff	setPeriodTo@FOSC,___lltoft@c
  2126  007F50  C073  F00A         	movff	setPeriodTo@FOSC+1,___lltoft@c+1
  2127  007F54  C074  F00B         	movff	setPeriodTo@FOSC+2,___lltoft@c+2
  2128  007F58  C075  F00C         	movff	setPeriodTo@FOSC+3,___lltoft@c+3
  2129  007F5C  EC8F  F037         	call	___lltoft	;wreg free
  2130  007F60  C009  F012         	movff	?___lltoft,___ftdiv@f1
  2131  007F64  C00A  F013         	movff	?___lltoft+1,___ftdiv@f1+1
  2132  007F68  C00B  F014         	movff	?___lltoft+2,___ftdiv@f1+2
  2133  007F6C  EC05  F03B         	call	___ftdiv	;wreg free
  2134  007F70  C012  F021         	movff	?___ftdiv,___ftadd@f1
  2135  007F74  C013  F022         	movff	?___ftdiv+1,___ftadd@f1+1
  2136  007F78  C014  F023         	movff	?___ftdiv+2,___ftadd@f1+2
  2137  007F7C  0E00               	movlw	0
  2138  007F7E  6E24               	movwf	___ftadd@f2,c
  2139  007F80  0E80               	movlw	128
  2140  007F82  6E25               	movwf	___ftadd@f2+1,c
  2141  007F84  0EBF               	movlw	191
  2142  007F86  6E26               	movwf	___ftadd@f2+2,c
  2143  007F88  EC6C  F03C         	call	___ftadd	;wreg free
  2144  007F8C  C021  F078         	movff	?___ftadd,setPeriodTo@period
  2145  007F90  C022  F079         	movff	?___ftadd+1,setPeriodTo@period+1
  2146  007F94  C023  F07A         	movff	?___ftadd+2,setPeriodTo@period+2
  2147                           
  2148                           ;MotorFunction.c: 52: period = round(period);
  2149  007F98  C078  F060         	movff	setPeriodTo@period,round@x
  2150  007F9C  C079  F061         	movff	setPeriodTo@period+1,round@x+1
  2151  007FA0  C07A  F062         	movff	setPeriodTo@period+2,round@x+2
  2152  007FA4  EC53  F039         	call	_round	;wreg free
  2153  007FA8  C060  F078         	movff	?_round,setPeriodTo@period
  2154  007FAC  C061  F079         	movff	?_round+1,setPeriodTo@period+1
  2155  007FB0  C062  F07A         	movff	?_round+2,setPeriodTo@period+2
  2156                           
  2157                           ;MotorFunction.c: 54: OSCCON = ((clockSelectBits & 0x07) << 4) | 0x02;
  2158  007FB4  C076  F06A         	movff	setPeriodTo@clockSelectBits,??_setPeriodTo
  2159  007FB8  0E07               	movlw	7
  2160  007FBA  0100               	movlb	0	; () banked
  2161  007FBC  176A               	andwf	??_setPeriodTo& (0+255),f,b
  2162  007FBE  0100               	movlb	0	; () banked
  2163  007FC0  396A               	swapf	??_setPeriodTo& (0+255),w,b
  2164  007FC2  0BF0               	andlw	240
  2165  007FC4  0902               	iorlw	2
  2166  007FC6  6ED3               	movwf	4051,c	;volatile
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;MotorFunction.c: 55: PR2 = (int)period;
  2170  007FC8  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2171  007FCC  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2172  007FD0  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2173  007FD4  ECF2  F03B         	call	___fttol	;wreg free
  2174  007FD8  503C               	movf	?___fttol,w,c
  2175  007FDA  6ECB               	movwf	4043,c	;volatile
  2176                           
  2177                           ;MotorFunction.c: 56: T2CON = TimerPrescaleBits;
  2178  007FDC  C06E  FFCA         	movff	setPeriodTo@TimerPrescaleBits,4042	;volatile
  2179                           
  2180                           ;MotorFunction.c: 57: TMR2 = 0;
  2181  007FE0  0E00               	movlw	0
  2182  007FE2  6ECC               	movwf	4044,c	;volatile
  2183                           
  2184                           ;MotorFunction.c: 58: T2CONbits.TMR2ON = 1;
  2185  007FE4  84CA               	bsf	4042,2,c	;volatile
  2186                           
  2187                           ;MotorFunction.c: 59: return (int)period;
  2188  007FE6  C078  F03C         	movff	setPeriodTo@period,___fttol@f1
  2189  007FEA  C079  F03D         	movff	setPeriodTo@period+1,___fttol@f1+1
  2190  007FEE  C07A  F03E         	movff	setPeriodTo@period+2,___fttol@f1+2
  2191  007FF2  ECF2  F03B         	call	___fttol	;wreg free
  2192  007FF6  C03C  F066         	movff	?___fttol,?_setPeriodTo
  2193  007FFA  C03D  F067         	movff	?___fttol+1,?_setPeriodTo+1
  2194  007FFE  0012               	return	
  2195  008000                     __end_of_setPeriodTo:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           postinc0	equ	0xFEE
  2202                           wreg	equ	0xFE8
  2203                           postdec1	equ	0xFE5
  2204                           plusw1	equ	0xFE3
  2205                           fsr1l	equ	0xFE1
  2206                           indf2	equ	0xFDF
  2207                           plusw2	equ	0xFDB
  2208                           fsr2h	equ	0xFDA
  2209                           fsr2l	equ	0xFD9
  2210                           status	equ	0xFD8
  2211                           
  2212 ;; *************** function _round *****************
  2213 ;; Defined at:
  2214 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\round.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  x               3    0[BANK0 ] int 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  f               3    3[BANK0 ] int 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  3    0[BANK0 ] int 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2228 ;;      Params:         0       3       0       0       0       0       0       0       0
  2229 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2231 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2232 ;;Total ram usage:        6 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    3
  2235 ;; This function calls:
  2236 ;;		___ftadd
  2237 ;;		___ftneg
  2238 ;;		_trunc
  2239 ;; This function is called by:
  2240 ;;		_setPeriodTo
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text7
  2245  0072A6                     __ptext7:
  2246                           	opt stack 0
  2247  0072A6                     _round:
  2248                           	opt stack 24
  2249                           
  2250                           ;incstack = 0
  2251  0072A6  C060  F055         	movff	round@x,trunc@x
  2252  0072AA  C061  F056         	movff	round@x+1,trunc@x+1
  2253  0072AE  C062  F057         	movff	round@x+2,trunc@x+2
  2254  0072B2  EC12  F039         	call	_trunc	;wreg free
  2255  0072B6  C055  F05D         	movff	?_trunc,___ftneg@f1
  2256  0072BA  C056  F05E         	movff	?_trunc+1,___ftneg@f1+1
  2257  0072BE  C057  F05F         	movff	?_trunc+2,___ftneg@f1+2
  2258  0072C2  ECCE  F036         	call	___ftneg	;wreg free
  2259  0072C6  C05D  F021         	movff	?___ftneg,___ftadd@f1
  2260  0072CA  C05E  F022         	movff	?___ftneg+1,___ftadd@f1+1
  2261  0072CE  C05F  F023         	movff	?___ftneg+2,___ftadd@f1+2
  2262  0072D2  C060  F024         	movff	round@x,___ftadd@f2
  2263  0072D6  C061  F025         	movff	round@x+1,___ftadd@f2+1
  2264  0072DA  C062  F026         	movff	round@x+2,___ftadd@f2+2
  2265  0072DE  EC6C  F03C         	call	___ftadd	;wreg free
  2266  0072E2  C021  F063         	movff	?___ftadd,round@f
  2267  0072E6  C022  F064         	movff	?___ftadd+1,round@f+1
  2268  0072EA  C023  F065         	movff	?___ftadd+2,round@f+2
  2269  0072EE  C060  F021         	movff	round@x,___ftadd@f1
  2270  0072F2  C061  F022         	movff	round@x+1,___ftadd@f1+1
  2271  0072F6  C062  F023         	movff	round@x+2,___ftadd@f1+2
  2272  0072FA  C063  F024         	movff	round@f,___ftadd@f2
  2273  0072FE  C064  F025         	movff	round@f+1,___ftadd@f2+1
  2274  007302  C065  F026         	movff	round@f+2,___ftadd@f2+2
  2275  007306  EC6C  F03C         	call	___ftadd	;wreg free
  2276  00730A  C021  F060         	movff	?___ftadd,round@x
  2277  00730E  C022  F061         	movff	?___ftadd+1,round@x+1
  2278  007312  C023  F062         	movff	?___ftadd+2,round@x+2
  2279  007316  C060  F055         	movff	round@x,trunc@x
  2280  00731A  C061  F056         	movff	round@x+1,trunc@x+1
  2281  00731E  C062  F057         	movff	round@x+2,trunc@x+2
  2282  007322  EC12  F039         	call	_trunc	;wreg free
  2283  007326  C055  F060         	movff	?_trunc,?_round
  2284  00732A  C056  F061         	movff	?_trunc+1,?_round+1
  2285  00732E  C057  F062         	movff	?_trunc+2,?_round+2
  2286  007332  0012               	return	
  2287  007334                     __end_of_round:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postdec1	equ	0xFE5
  2296                           plusw1	equ	0xFE3
  2297                           fsr1l	equ	0xFE1
  2298                           indf2	equ	0xFDF
  2299                           plusw2	equ	0xFDB
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _trunc *****************
  2305 ;; Defined at:
  2306 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\trunc.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  x               3   84[COMRAM] int 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  i               3   87[COMRAM] int 
  2311 ;;  expon           2   90[COMRAM] int 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  3   84[COMRAM] int 
  2314 ;; Registers used:
  2315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2321 ;;      Params:         3       0       0       0       0       0       0       0       0
  2322 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2324 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2325 ;;Total ram usage:        8 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    2
  2328 ;; This function calls:
  2329 ;;		___altoft
  2330 ;;		___fttol
  2331 ;;		_frexp
  2332 ;; This function is called by:
  2333 ;;		_round
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text8
  2338  007224                     __ptext8:
  2339                           	opt stack 0
  2340  007224                     _trunc:
  2341                           	opt stack 24
  2342                           
  2343                           ;incstack = 0
  2344  007224  C055  F001         	movff	trunc@x,frexp@value
  2345  007228  C056  F002         	movff	trunc@x+1,frexp@value+1
  2346  00722C  C057  F003         	movff	trunc@x+2,frexp@value+2
  2347  007230  0E5B               	movlw	low trunc@expon
  2348  007232  6E04               	movwf	frexp@eptr,c
  2349  007234  0E00               	movlw	high trunc@expon
  2350  007236  6E05               	movwf	frexp@eptr+1,c
  2351  007238  ECD6  F038         	call	_frexp	;wreg free
  2352  00723C  AE5C               	btfss	trunc@expon+1,7,c
  2353  00723E  D007               	goto	l1906
  2354  007240  0E00               	movlw	0
  2355  007242  6E55               	movwf	?_trunc,c
  2356  007244  0E00               	movlw	0
  2357  007246  6E56               	movwf	?_trunc+1,c
  2358  007248  0E00               	movlw	0
  2359  00724A  6E57               	movwf	?_trunc+2,c
  2360  00724C  0012               	return	
  2361  00724E                     l1906:
  2362  00724E  505C               	movf	trunc@expon+1,w,c
  2363  007250  E104               	bnz	u1410
  2364  007252  0E15               	movlw	21
  2365  007254  5C5B               	subwf	trunc@expon,w,c
  2366  007256  A0D8               	btfss	status,0,c
  2367  007258  D007               	goto	l1910
  2368  00725A                     u1410:
  2369  00725A  C055  F055         	movff	trunc@x,?_trunc
  2370  00725E  C056  F056         	movff	trunc@x+1,?_trunc+1
  2371  007262  C057  F057         	movff	trunc@x+2,?_trunc+2
  2372  007266  0012               	return	
  2373  007268                     l1910:
  2374  007268  C055  F03C         	movff	trunc@x,___fttol@f1
  2375  00726C  C056  F03D         	movff	trunc@x+1,___fttol@f1+1
  2376  007270  C057  F03E         	movff	trunc@x+2,___fttol@f1+2
  2377  007274  ECF2  F03B         	call	___fttol	;wreg free
  2378  007278  C03C  F04B         	movff	?___fttol,___altoft@c
  2379  00727C  C03D  F04C         	movff	?___fttol+1,___altoft@c+1
  2380  007280  C03E  F04D         	movff	?___fttol+2,___altoft@c+2
  2381  007284  C03F  F04E         	movff	?___fttol+3,___altoft@c+3
  2382  007288  EC9A  F038         	call	___altoft	;wreg free
  2383  00728C  C04B  F058         	movff	?___altoft,trunc@i
  2384  007290  C04C  F059         	movff	?___altoft+1,trunc@i+1
  2385  007294  C04D  F05A         	movff	?___altoft+2,trunc@i+2
  2386  007298  C058  F055         	movff	trunc@i,?_trunc
  2387  00729C  C059  F056         	movff	trunc@i+1,?_trunc+1
  2388  0072A0  C05A  F057         	movff	trunc@i+2,?_trunc+2
  2389  0072A4  0012               	return	
  2390  0072A6                     __end_of_trunc:
  2391                           	opt stack 0
  2392                           tblptru	equ	0xFF8
  2393                           tblptrh	equ	0xFF7
  2394                           tblptrl	equ	0xFF6
  2395                           tablat	equ	0xFF5
  2396                           postinc0	equ	0xFEE
  2397                           wreg	equ	0xFE8
  2398                           postdec1	equ	0xFE5
  2399                           plusw1	equ	0xFE3
  2400                           fsr1l	equ	0xFE1
  2401                           indf2	equ	0xFDF
  2402                           plusw2	equ	0xFDB
  2403                           fsr2h	equ	0xFDA
  2404                           fsr2l	equ	0xFD9
  2405                           status	equ	0xFD8
  2406                           
  2407 ;; *************** function _frexp *****************
  2408 ;; Defined at:
  2409 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\frexp.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;  value           3    0[COMRAM] int 
  2412 ;;  eptr            2    3[COMRAM] PTR int 
  2413 ;;		 -> trunc@expon(2), 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  3    0[COMRAM] PTR int 
  2418 ;; Registers used:
  2419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2425 ;;      Params:         5       0       0       0       0       0       0       0       0
  2426 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2427 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2428 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2429 ;;Total ram usage:        7 bytes
  2430 ;; Hardware stack levels used:    1
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_trunc
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text9
  2439  0071AC                     __ptext9:
  2440                           	opt stack 0
  2441  0071AC                     _frexp:
  2442                           	opt stack 25
  2443                           
  2444                           ;incstack = 0
  2445  0071AC  5001               	movf	frexp@value,w,c
  2446  0071AE  1002               	iorwf	frexp@value+1,w,c
  2447  0071B0  1003               	iorwf	frexp@value+2,w,c
  2448  0071B2  A4D8               	btfss	status,2,c
  2449  0071B4  D009               	goto	l1814
  2450  0071B6  C004  FFD9         	movff	frexp@eptr,fsr2l
  2451  0071BA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2452  0071BE  0E00               	movlw	0
  2453  0071C0  6EDE               	movwf	postinc2,c
  2454  0071C2  0E00               	movlw	0
  2455  0071C4  6EDD               	movwf	postdec2,c
  2456                           
  2457                           ;	Return value of _frexp is never used
  2458  0071C6  0012               	return	
  2459  0071C8                     l1814:
  2460  0071C8  5003               	movf	frexp@value+2,w,c
  2461  0071CA  0B7F               	andlw	127
  2462  0071CC  6E06               	movwf	??_frexp& (0+255),c
  2463  0071CE  6A07               	clrf	(??_frexp+1)& (0+255),c
  2464  0071D0  90D8               	bcf	status,0,c
  2465  0071D2  3606               	rlcf	??_frexp,f,c
  2466  0071D4  3607               	rlcf	??_frexp+1,f,c
  2467  0071D6  C004  FFD9         	movff	frexp@eptr,fsr2l
  2468  0071DA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2469  0071DE  C006  FFDE         	movff	??_frexp,postinc2
  2470  0071E2  C007  FFDD         	movff	??_frexp+1,postdec2
  2471  0071E6  AE02               	btfss	frexp@value+1,7,c
  2472  0071E8  D003               	goto	u1170
  2473  0071EA  6A06               	clrf	??_frexp& (0+255),c
  2474  0071EC  2A06               	incf	??_frexp& (0+255),f,c
  2475  0071EE  D001               	goto	u1178
  2476  0071F0                     u1170:
  2477  0071F0  6A06               	clrf	??_frexp& (0+255),c
  2478  0071F2                     u1178:
  2479  0071F2  5006               	movf	??_frexp,w,c
  2480  0071F4  C004  FFD9         	movff	frexp@eptr,fsr2l
  2481  0071F8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2482  0071FC  12DE               	iorwf	postinc2,f,c
  2483  0071FE  0E00               	movlw	0
  2484  007200  12DD               	iorwf	postdec2,f,c
  2485  007202  C004  FFD9         	movff	frexp@eptr,fsr2l
  2486  007206  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2487  00720A  0E82               	movlw	130
  2488  00720C  26DE               	addwf	postinc2,f,c
  2489  00720E  0EFF               	movlw	255
  2490  007210  22DD               	addwfc	postdec2,f,c
  2491  007212  8003               	bsf	frexp@value+2,0,c
  2492  007214  8203               	bsf	frexp@value+2,1,c
  2493  007216  8403               	bsf	frexp@value+2,2,c
  2494  007218  8603               	bsf	frexp@value+2,3,c
  2495  00721A  8803               	bsf	frexp@value+2,4,c
  2496  00721C  8A03               	bsf	frexp@value+2,5,c
  2497  00721E  9C03               	bcf	frexp@value+2,6,c
  2498  007220  9E02               	bcf	frexp@value+1,7,c
  2499  007222  0012               	return	
  2500  007224                     __end_of_frexp:
  2501                           	opt stack 0
  2502                           tblptru	equ	0xFF8
  2503                           tblptrh	equ	0xFF7
  2504                           tblptrl	equ	0xFF6
  2505                           tablat	equ	0xFF5
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           postdec1	equ	0xFE5
  2509                           plusw1	equ	0xFE3
  2510                           fsr1l	equ	0xFE1
  2511                           indf2	equ	0xFDF
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           plusw2	equ	0xFDB
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function ___altoft *****************
  2520 ;; Defined at:
  2521 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\altoft.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;  c               4   74[COMRAM] long 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  sign            1   83[COMRAM] unsigned char 
  2526 ;;  exp             1   82[COMRAM] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  3   74[COMRAM] float 
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2536 ;;      Params:         4       0       0       0       0       0       0       0       0
  2537 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2538 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2539 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2540 ;;Total ram usage:       10 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    1
  2543 ;; This function calls:
  2544 ;;		___ftpack
  2545 ;; This function is called by:
  2546 ;;		_trunc
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text10
  2551  007134                     __ptext10:
  2552                           	opt stack 0
  2553  007134                     ___altoft:
  2554                           	opt stack 24
  2555                           
  2556                           ;incstack = 0
  2557  007134  0E00               	movlw	0
  2558  007136  6E54               	movwf	___altoft@sign,c
  2559  007138  0E8E               	movlw	142
  2560  00713A  6E53               	movwf	___altoft@exp,c
  2561  00713C  AE4E               	btfss	___altoft@c+3,7,c
  2562  00713E  D011               	goto	l1756
  2563  007140  1E4E               	comf	___altoft@c+3,f,c
  2564  007142  1E4D               	comf	___altoft@c+2,f,c
  2565  007144  1E4C               	comf	___altoft@c+1,f,c
  2566  007146  6C4B               	negf	___altoft@c,c
  2567  007148  0E00               	movlw	0
  2568  00714A  224C               	addwfc	___altoft@c+1,f,c
  2569  00714C  224D               	addwfc	___altoft@c+2,f,c
  2570  00714E  224E               	addwfc	___altoft@c+3,f,c
  2571  007150  0E01               	movlw	1
  2572  007152  6E54               	movwf	___altoft@sign,c
  2573  007154  D006               	goto	l1756
  2574  007156                     l1754:
  2575  007156  90D8               	bcf	status,0,c
  2576  007158  324E               	rrcf	___altoft@c+3,f,c
  2577  00715A  324D               	rrcf	___altoft@c+2,f,c
  2578  00715C  324C               	rrcf	___altoft@c+1,f,c
  2579  00715E  324B               	rrcf	___altoft@c,f,c
  2580  007160  2A53               	incf	___altoft@exp,f,c
  2581  007162                     l1756:
  2582  007162  0E00               	movlw	0
  2583  007164  144B               	andwf	___altoft@c,w,c
  2584  007166  6E4F               	movwf	??___altoft& (0+255),c
  2585  007168  0E00               	movlw	0
  2586  00716A  144C               	andwf	___altoft@c+1,w,c
  2587  00716C  6E50               	movwf	(??___altoft+1)& (0+255),c
  2588  00716E  0E00               	movlw	0
  2589  007170  144D               	andwf	___altoft@c+2,w,c
  2590  007172  6E51               	movwf	(??___altoft+2)& (0+255),c
  2591  007174  0EFF               	movlw	255
  2592  007176  144E               	andwf	___altoft@c+3,w,c
  2593  007178  6E52               	movwf	(??___altoft+3)& (0+255),c
  2594  00717A  504F               	movf	??___altoft,w,c
  2595  00717C  1050               	iorwf	??___altoft+1,w,c
  2596  00717E  1051               	iorwf	??___altoft+2,w,c
  2597  007180  1052               	iorwf	??___altoft+3,w,c
  2598  007182  A4D8               	btfss	status,2,c
  2599  007184  D7E8               	goto	l1754
  2600  007186  C04B  F001         	movff	___altoft@c,___ftpack@arg
  2601  00718A  C04C  F002         	movff	___altoft@c+1,___ftpack@arg+1
  2602  00718E  C04D  F003         	movff	___altoft@c+2,___ftpack@arg+2
  2603  007192  C053  F004         	movff	___altoft@exp,___ftpack@exp
  2604  007196  C054  F005         	movff	___altoft@sign,___ftpack@sign
  2605  00719A  ECE4  F039         	call	___ftpack	;wreg free
  2606  00719E  C001  F04B         	movff	?___ftpack,?___altoft
  2607  0071A2  C002  F04C         	movff	?___ftpack+1,?___altoft+1
  2608  0071A6  C003  F04D         	movff	?___ftpack+2,?___altoft+2
  2609  0071AA  0012               	return	
  2610  0071AC                     __end_of___altoft:
  2611                           	opt stack 0
  2612                           tblptru	equ	0xFF8
  2613                           tblptrh	equ	0xFF7
  2614                           tblptrl	equ	0xFF6
  2615                           tablat	equ	0xFF5
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           postdec1	equ	0xFE5
  2619                           plusw1	equ	0xFE3
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           postdec2	equ	0xFDD
  2624                           plusw2	equ	0xFDB
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function ___ftneg *****************
  2630 ;; Defined at:
  2631 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftneg.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  f1              3   92[COMRAM] float 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  3   92[COMRAM] float 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2645 ;;      Params:         3       0       0       0       0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2648 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2649 ;;Total ram usage:        3 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_round
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text11
  2659  006D9C                     __ptext11:
  2660                           	opt stack 0
  2661  006D9C                     ___ftneg:
  2662                           	opt stack 26
  2663                           
  2664                           ;incstack = 0
  2665  006D9C  505D               	movf	___ftneg@f1,w,c
  2666  006D9E  105E               	iorwf	___ftneg@f1+1,w,c
  2667  006DA0  105F               	iorwf	___ftneg@f1+2,w,c
  2668  006DA2  B4D8               	btfsc	status,2,c
  2669  006DA4  D006               	goto	l605
  2670  006DA6  0E00               	movlw	0
  2671  006DA8  1A5D               	xorwf	___ftneg@f1,f,c
  2672  006DAA  0E00               	movlw	0
  2673  006DAC  1A5E               	xorwf	___ftneg@f1+1,f,c
  2674  006DAE  0E80               	movlw	128
  2675  006DB0  1A5F               	xorwf	___ftneg@f1+2,f,c
  2676  006DB2                     l605:
  2677  006DB2  C05D  F05D         	movff	___ftneg@f1,?___ftneg
  2678  006DB6  C05E  F05E         	movff	___ftneg@f1+1,?___ftneg+1
  2679  006DBA  C05F  F05F         	movff	___ftneg@f1+2,?___ftneg+2
  2680  006DBE  0012               	return		;funcret
  2681  006DC0                     __end_of___ftneg:
  2682                           	opt stack 0
  2683                           tblptru	equ	0xFF8
  2684                           tblptrh	equ	0xFF7
  2685                           tblptrl	equ	0xFF6
  2686                           tablat	equ	0xFF5
  2687                           postinc0	equ	0xFEE
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           plusw1	equ	0xFE3
  2691                           fsr1l	equ	0xFE1
  2692                           indf2	equ	0xFDF
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           plusw2	equ	0xFDB
  2696                           fsr2h	equ	0xFDA
  2697                           fsr2l	equ	0xFD9
  2698                           status	equ	0xFD8
  2699                           
  2700 ;; *************** function ___lltoft *****************
  2701 ;; Defined at:
  2702 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lltoft.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;  c               4    8[COMRAM] unsigned long 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  exp             1   16[COMRAM] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  3    8[COMRAM] float 
  2709 ;; Registers used:
  2710 ;;		wreg, status,2, status,0, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2716 ;;      Params:         4       0       0       0       0       0       0       0       0
  2717 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2718 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2719 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2720 ;;Total ram usage:        9 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		___ftpack
  2725 ;; This function is called by:
  2726 ;;		_setPeriodTo
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           	psect	text12
  2731  006F1E                     __ptext12:
  2732                           	opt stack 0
  2733  006F1E                     ___lltoft:
  2734                           	opt stack 26
  2735                           
  2736                           ;incstack = 0
  2737  006F1E  0E8E               	movlw	142
  2738  006F20  6E11               	movwf	___lltoft@exp,c
  2739  006F22  D006               	goto	l2040
  2740  006F24                     l2038:
  2741  006F24  90D8               	bcf	status,0,c
  2742  006F26  320C               	rrcf	___lltoft@c+3,f,c
  2743  006F28  320B               	rrcf	___lltoft@c+2,f,c
  2744  006F2A  320A               	rrcf	___lltoft@c+1,f,c
  2745  006F2C  3209               	rrcf	___lltoft@c,f,c
  2746  006F2E  2A11               	incf	___lltoft@exp,f,c
  2747  006F30                     l2040:
  2748  006F30  0E00               	movlw	0
  2749  006F32  1409               	andwf	___lltoft@c,w,c
  2750  006F34  6E0D               	movwf	??___lltoft& (0+255),c
  2751  006F36  0E00               	movlw	0
  2752  006F38  140A               	andwf	___lltoft@c+1,w,c
  2753  006F3A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  2754  006F3C  0E00               	movlw	0
  2755  006F3E  140B               	andwf	___lltoft@c+2,w,c
  2756  006F40  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  2757  006F42  0EFF               	movlw	255
  2758  006F44  140C               	andwf	___lltoft@c+3,w,c
  2759  006F46  6E10               	movwf	(??___lltoft+3)& (0+255),c
  2760  006F48  500D               	movf	??___lltoft,w,c
  2761  006F4A  100E               	iorwf	??___lltoft+1,w,c
  2762  006F4C  100F               	iorwf	??___lltoft+2,w,c
  2763  006F4E  1010               	iorwf	??___lltoft+3,w,c
  2764  006F50  A4D8               	btfss	status,2,c
  2765  006F52  D7E8               	goto	l2038
  2766  006F54  C009  F001         	movff	___lltoft@c,___ftpack@arg
  2767  006F58  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  2768  006F5C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  2769  006F60  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  2770  006F64  0E00               	movlw	0
  2771  006F66  6E05               	movwf	___ftpack@sign,c
  2772  006F68  ECE4  F039         	call	___ftpack	;wreg free
  2773  006F6C  C001  F009         	movff	?___ftpack,?___lltoft
  2774  006F70  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  2775  006F74  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  2776  006F78  0012               	return	
  2777  006F7A                     __end_of___lltoft:
  2778                           	opt stack 0
  2779                           tblptru	equ	0xFF8
  2780                           tblptrh	equ	0xFF7
  2781                           tblptrl	equ	0xFF6
  2782                           tablat	equ	0xFF5
  2783                           postinc0	equ	0xFEE
  2784                           wreg	equ	0xFE8
  2785                           postdec1	equ	0xFE5
  2786                           plusw1	equ	0xFE3
  2787                           fsr1l	equ	0xFE1
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           plusw2	equ	0xFDB
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _doorSetDutyCycleTo *****************
  2797 ;; Defined at:
  2798 ;;		line 71 in file "MotorFunction.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  Duty_cycle      3   74[COMRAM] float 
  2801 ;;  Period          2   77[COMRAM] int 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  PWM10BitValu    2   84[COMRAM] int 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;		None               void
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2813 ;;      Params:         5       0       0       0       0       0       0       0       0
  2814 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2815 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2816 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2817 ;;Total ram usage:       12 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    2
  2820 ;; This function calls:
  2821 ;;		___awtoft
  2822 ;;		___ftadd
  2823 ;;		___ftdiv
  2824 ;;		___ftmul
  2825 ;;		___fttol
  2826 ;; This function is called by:
  2827 ;;		_motordoor_open
  2828 ;;		_motordoor_close
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text13
  2833  007476                     __ptext13:
  2834                           	opt stack 0
  2835  007476                     _doorSetDutyCycleTo:
  2836                           	opt stack 26
  2837                           
  2838                           ;MotorFunction.c: 73: int PWM10BitValue;
  2839                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2840                           
  2841                           ;incstack = 0
  2842  007476  0E00               	movlw	0
  2843  007478  6E15               	movwf	___ftdiv@f2,c
  2844  00747A  0EC8               	movlw	200
  2845  00747C  6E16               	movwf	___ftdiv@f2+1,c
  2846  00747E  0E42               	movlw	66
  2847  007480  6E17               	movwf	___ftdiv@f2+2,c
  2848  007482  C04B  F012         	movff	doorSetDutyCycleTo@Duty_cycle,___ftdiv@f1
  2849  007486  C04C  F013         	movff	doorSetDutyCycleTo@Duty_cycle+1,___ftdiv@f1+1
  2850  00748A  C04D  F014         	movff	doorSetDutyCycleTo@Duty_cycle+2,___ftdiv@f1+2
  2851  00748E  EC05  F03B         	call	___ftdiv	;wreg free
  2852  007492  C012  F030         	movff	?___ftdiv,___ftmul@f2
  2853  007496  C013  F031         	movff	?___ftdiv+1,___ftmul@f2+1
  2854  00749A  C014  F032         	movff	?___ftdiv+2,___ftmul@f2+2
  2855  00749E  0E00               	movlw	0
  2856  0074A0  6E24               	movwf	___ftadd@f2,c
  2857  0074A2  0E80               	movlw	128
  2858  0074A4  6E25               	movwf	___ftadd@f2+1,c
  2859  0074A6  0E3F               	movlw	63
  2860  0074A8  6E26               	movwf	___ftadd@f2+2,c
  2861  0074AA  C04E  F009         	movff	doorSetDutyCycleTo@Period,___awtoft@c
  2862  0074AE  C04F  F00A         	movff	doorSetDutyCycleTo@Period+1,___awtoft@c+1
  2863  0074B2  EC46  F037         	call	___awtoft	;wreg free
  2864  0074B6  C009  F021         	movff	?___awtoft,___ftadd@f1
  2865  0074BA  C00A  F022         	movff	?___awtoft+1,___ftadd@f1+1
  2866  0074BE  C00B  F023         	movff	?___awtoft+2,___ftadd@f1+2
  2867  0074C2  EC6C  F03C         	call	___ftadd	;wreg free
  2868  0074C6  C021  F02D         	movff	?___ftadd,___ftmul@f1
  2869  0074CA  C022  F02E         	movff	?___ftadd+1,___ftmul@f1+1
  2870  0074CE  C023  F02F         	movff	?___ftadd+2,___ftmul@f1+2
  2871  0074D2  EC78  F03B         	call	___ftmul	;wreg free
  2872  0074D6  C02D  F052         	movff	?___ftmul,_doorSetDutyCycleTo$1378
  2873  0074DA  C02E  F053         	movff	?___ftmul+1,_doorSetDutyCycleTo$1378+1
  2874  0074DE  C02F  F054         	movff	?___ftmul+2,_doorSetDutyCycleTo$1378+2
  2875                           
  2876                           ;MotorFunction.c: 73: int PWM10BitValue;
  2877                           ;MotorFunction.c: 75: PWM10BitValue = 4.0 * ((float)Period + 1.0) * (Duty_cycle/100.0);
  2878  0074E2  0E00               	movlw	0
  2879  0074E4  6E30               	movwf	___ftmul@f2,c
  2880  0074E6  0E80               	movlw	128
  2881  0074E8  6E31               	movwf	___ftmul@f2+1,c
  2882  0074EA  0E40               	movlw	64
  2883  0074EC  6E32               	movwf	___ftmul@f2+2,c
  2884  0074EE  C052  F02D         	movff	_doorSetDutyCycleTo$1378,___ftmul@f1
  2885  0074F2  C053  F02E         	movff	_doorSetDutyCycleTo$1378+1,___ftmul@f1+1
  2886  0074F6  C054  F02F         	movff	_doorSetDutyCycleTo$1378+2,___ftmul@f1+2
  2887  0074FA  EC78  F03B         	call	___ftmul	;wreg free
  2888  0074FE  C02D  F03C         	movff	?___ftmul,___fttol@f1
  2889  007502  C02E  F03D         	movff	?___ftmul+1,___fttol@f1+1
  2890  007506  C02F  F03E         	movff	?___ftmul+2,___fttol@f1+2
  2891  00750A  ECF2  F03B         	call	___fttol	;wreg free
  2892  00750E  C03C  F055         	movff	?___fttol,doorSetDutyCycleTo@PWM10BitValue
  2893  007512  C03D  F056         	movff	?___fttol+1,doorSetDutyCycleTo@PWM10BitValue+1
  2894                           
  2895                           ;MotorFunction.c: 76: CCPR2L = (PWM10BitValue >> 2);
  2896  007516  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  2897  00751A  C056  F051         	movff	doorSetDutyCycleTo@PWM10BitValue+1,??_doorSetDutyCycleTo+1
  2898  00751E  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  2899  007520  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  2900  007522  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  2901  007524  3451               	rlcf	??_doorSetDutyCycleTo+1,w,c
  2902  007526  3251               	rrcf	??_doorSetDutyCycleTo+1,f,c
  2903  007528  3250               	rrcf	??_doorSetDutyCycleTo,f,c
  2904  00752A  5050               	movf	??_doorSetDutyCycleTo,w,c
  2905  00752C  6EBB               	movwf	4027,c	;volatile
  2906                           
  2907                           ;MotorFunction.c: 77: CCP2CON = ((PWM10BitValue & 0x03) << 4) | 0x0C;
  2908  00752E  C055  F050         	movff	doorSetDutyCycleTo@PWM10BitValue,??_doorSetDutyCycleTo
  2909  007532  0E03               	movlw	3
  2910  007534  1650               	andwf	??_doorSetDutyCycleTo,f,c
  2911  007536  3850               	swapf	??_doorSetDutyCycleTo,w,c
  2912  007538  0BF0               	andlw	240
  2913  00753A  090C               	iorlw	12
  2914  00753C  6EBA               	movwf	4026,c	;volatile
  2915  00753E  0012               	return		;funcret
  2916  007540                     __end_of_doorSetDutyCycleTo:
  2917                           	opt stack 0
  2918                           tblptru	equ	0xFF8
  2919                           tblptrh	equ	0xFF7
  2920                           tblptrl	equ	0xFF6
  2921                           tablat	equ	0xFF5
  2922                           postinc0	equ	0xFEE
  2923                           wreg	equ	0xFE8
  2924                           postdec1	equ	0xFE5
  2925                           plusw1	equ	0xFE3
  2926                           fsr1l	equ	0xFE1
  2927                           indf2	equ	0xFDF
  2928                           postinc2	equ	0xFDE
  2929                           postdec2	equ	0xFDD
  2930                           plusw2	equ	0xFDB
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function ___fttol *****************
  2936 ;; Defined at:
  2937 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  f1              3   59[COMRAM] float 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  lval            4   69[COMRAM] unsigned long 
  2942 ;;  exp1            1   73[COMRAM] unsigned char 
  2943 ;;  sign1           1   68[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  4   59[COMRAM] long 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2953 ;;      Params:         4       0       0       0       0       0       0       0       0
  2954 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2955 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2956 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2957 ;;Total ram usage:       15 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_setPeriodTo
  2963 ;;		_SetDutyCycleTo
  2964 ;;		_doorSetDutyCycleTo
  2965 ;;		_trunc
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text14
  2970  0077E4                     __ptext14:
  2971                           	opt stack 0
  2972  0077E4                     ___fttol:
  2973                           	opt stack 25
  2974                           
  2975                           ;incstack = 0
  2976  0077E4  C03E  F040         	movff	___fttol@f1+2,??___fttol
  2977  0077E8  6A41               	clrf	(??___fttol+1)& (0+255),c
  2978  0077EA  6A42               	clrf	(??___fttol+2)& (0+255),c
  2979  0077EC  343D               	rlcf	___fttol@f1+1,w,c
  2980  0077EE  3640               	rlcf	??___fttol& (0+255),f,c
  2981  0077F0  E301               	bnc	u1081
  2982  0077F2  8041               	bsf	(??___fttol+1)& (0+255),0,c
  2983  0077F4                     u1081:
  2984  0077F4  5040               	movf	??___fttol,w,c
  2985  0077F6  6E4A               	movwf	___fttol@exp1,c
  2986  0077F8  504A               	movf	___fttol@exp1,w,c
  2987  0077FA  A4D8               	btfss	status,2,c
  2988  0077FC  D009               	goto	l1768
  2989  0077FE  0E00               	movlw	0
  2990  007800  6E3C               	movwf	?___fttol,c
  2991  007802  0E00               	movlw	0
  2992  007804  6E3D               	movwf	?___fttol+1,c
  2993  007806  0E00               	movlw	0
  2994  007808  6E3E               	movwf	?___fttol+2,c
  2995  00780A  0E00               	movlw	0
  2996  00780C  6E3F               	movwf	?___fttol+3,c
  2997  00780E  0012               	return	
  2998  007810                     l1768:
  2999  007810  0E17               	movlw	23
  3000  007812  6E40               	movwf	??___fttol& (0+255),c
  3001  007814  C03C  F041         	movff	___fttol@f1,??___fttol+1
  3002  007818  C03D  F042         	movff	___fttol@f1+1,??___fttol+2
  3003  00781C  C03E  F043         	movff	___fttol@f1+2,??___fttol+3
  3004  007820  2840               	incf	??___fttol,w,c
  3005  007822  6E44               	movwf	(??___fttol+4)& (0+255),c
  3006  007824  D004               	goto	u1100
  3007  007826                     u1105:
  3008  007826  90D8               	bcf	status,0,c
  3009  007828  3243               	rrcf	??___fttol+3,f,c
  3010  00782A  3242               	rrcf	??___fttol+2,f,c
  3011  00782C  3241               	rrcf	??___fttol+1,f,c
  3012  00782E                     u1100:
  3013  00782E  2E44               	decfsz	(??___fttol+4)& (0+255),f,c
  3014  007830  D7FA               	goto	u1105
  3015  007832  5041               	movf	??___fttol+1,w,c
  3016  007834  6E45               	movwf	___fttol@sign1,c
  3017  007836  8E3D               	bsf	___fttol@f1+1,7,c
  3018  007838  0EFF               	movlw	255
  3019  00783A  163C               	andwf	___fttol@f1,f,c
  3020  00783C  0EFF               	movlw	255
  3021  00783E  163D               	andwf	___fttol@f1+1,f,c
  3022  007840  0E00               	movlw	0
  3023  007842  163E               	andwf	___fttol@f1+2,f,c
  3024  007844  503C               	movf	___fttol@f1,w,c
  3025  007846  6E46               	movwf	___fttol@lval,c
  3026  007848  503D               	movf	___fttol@f1+1,w,c
  3027  00784A  6E47               	movwf	___fttol@lval+1,c
  3028  00784C  503E               	movf	___fttol@f1+2,w,c
  3029  00784E  6E48               	movwf	___fttol@lval+2,c
  3030  007850  6A49               	clrf	___fttol@lval+3,c
  3031  007852  0E8E               	movlw	142
  3032  007854  5E4A               	subwf	___fttol@exp1,f,c
  3033  007856  AE4A               	btfss	___fttol@exp1,7,c
  3034  007858  D016               	goto	l1790
  3035  00785A  504A               	movf	___fttol@exp1,w,c
  3036  00785C  0A80               	xorlw	128
  3037  00785E  0F8F               	addlw	143
  3038  007860  B0D8               	btfsc	status,0,c
  3039  007862  D009               	goto	l1786
  3040  007864  0E00               	movlw	0
  3041  007866  6E3C               	movwf	?___fttol,c
  3042  007868  0E00               	movlw	0
  3043  00786A  6E3D               	movwf	?___fttol+1,c
  3044  00786C  0E00               	movlw	0
  3045  00786E  6E3E               	movwf	?___fttol+2,c
  3046  007870  0E00               	movlw	0
  3047  007872  6E3F               	movwf	?___fttol+3,c
  3048  007874  0012               	return	
  3049  007876                     l1786:
  3050  007876  90D8               	bcf	status,0,c
  3051  007878  3249               	rrcf	___fttol@lval+3,f,c
  3052  00787A  3248               	rrcf	___fttol@lval+2,f,c
  3053  00787C  3247               	rrcf	___fttol@lval+1,f,c
  3054  00787E  3246               	rrcf	___fttol@lval,f,c
  3055  007880  3E4A               	incfsz	___fttol@exp1,f,c
  3056  007882  D7F9               	goto	l1786
  3057  007884  D015               	goto	l1800
  3058  007886                     l1790:
  3059  007886  0E17               	movlw	23
  3060  007888  644A               	cpfsgt	___fttol@exp1,c
  3061  00788A  D00F               	goto	l1798
  3062  00788C  0E00               	movlw	0
  3063  00788E  6E3C               	movwf	?___fttol,c
  3064  007890  0E00               	movlw	0
  3065  007892  6E3D               	movwf	?___fttol+1,c
  3066  007894  0E00               	movlw	0
  3067  007896  6E3E               	movwf	?___fttol+2,c
  3068  007898  0E00               	movlw	0
  3069  00789A  6E3F               	movwf	?___fttol+3,c
  3070  00789C  0012               	return	
  3071  00789E                     l1796:
  3072  00789E  90D8               	bcf	status,0,c
  3073  0078A0  3646               	rlcf	___fttol@lval,f,c
  3074  0078A2  3647               	rlcf	___fttol@lval+1,f,c
  3075  0078A4  3648               	rlcf	___fttol@lval+2,f,c
  3076  0078A6  3649               	rlcf	___fttol@lval+3,f,c
  3077  0078A8  064A               	decf	___fttol@exp1,f,c
  3078  0078AA                     l1798:
  3079  0078AA  504A               	movf	___fttol@exp1,w,c
  3080  0078AC  A4D8               	btfss	status,2,c
  3081  0078AE  D7F7               	goto	l1796
  3082  0078B0                     l1800:
  3083  0078B0  5045               	movf	___fttol@sign1,w,c
  3084  0078B2  B4D8               	btfsc	status,2,c
  3085  0078B4  D008               	goto	l1804
  3086  0078B6  1E49               	comf	___fttol@lval+3,f,c
  3087  0078B8  1E48               	comf	___fttol@lval+2,f,c
  3088  0078BA  1E47               	comf	___fttol@lval+1,f,c
  3089  0078BC  6C46               	negf	___fttol@lval,c
  3090  0078BE  0E00               	movlw	0
  3091  0078C0  2247               	addwfc	___fttol@lval+1,f,c
  3092  0078C2  2248               	addwfc	___fttol@lval+2,f,c
  3093  0078C4  2249               	addwfc	___fttol@lval+3,f,c
  3094  0078C6                     l1804:
  3095  0078C6  C046  F03C         	movff	___fttol@lval,?___fttol
  3096  0078CA  C047  F03D         	movff	___fttol@lval+1,?___fttol+1
  3097  0078CE  C048  F03E         	movff	___fttol@lval+2,?___fttol+2
  3098  0078D2  C049  F03F         	movff	___fttol@lval+3,?___fttol+3
  3099  0078D6  0012               	return	
  3100  0078D8                     __end_of___fttol:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           plusw1	equ	0xFE3
  3110                           fsr1l	equ	0xFE1
  3111                           indf2	equ	0xFDF
  3112                           postinc2	equ	0xFDE
  3113                           postdec2	equ	0xFDD
  3114                           plusw2	equ	0xFDB
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function ___ftmul *****************
  3120 ;; Defined at:
  3121 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  f1              3   44[COMRAM] float 
  3124 ;;  f2              3   47[COMRAM] float 
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;  f3_as_produc    3   54[COMRAM] unsigned um
  3127 ;;  sign            1   58[COMRAM] unsigned char 
  3128 ;;  cntr            1   57[COMRAM] unsigned char 
  3129 ;;  exp             1   53[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  3   44[COMRAM] float 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3139 ;;      Params:         6       0       0       0       0       0       0       0       0
  3140 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3141 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3142 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3143 ;;Total ram usage:       15 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    1
  3146 ;; This function calls:
  3147 ;;		___ftpack
  3148 ;; This function is called by:
  3149 ;;		_setPeriodTo
  3150 ;;		_SetDutyCycleTo
  3151 ;;		_doorSetDutyCycleTo
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text15
  3156  0076F0                     __ptext15:
  3157                           	opt stack 0
  3158  0076F0                     ___ftmul:
  3159                           	opt stack 26
  3160                           
  3161                           ;incstack = 0
  3162  0076F0  C02F  F033         	movff	___ftmul@f1+2,??___ftmul
  3163  0076F4  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3164  0076F6  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3165  0076F8  342E               	rlcf	___ftmul@f1+1,w,c
  3166  0076FA  3633               	rlcf	??___ftmul& (0+255),f,c
  3167  0076FC  E301               	bnc	u1471
  3168  0076FE  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3169  007700                     u1471:
  3170  007700  5033               	movf	??___ftmul,w,c
  3171  007702  6E36               	movwf	___ftmul@exp,c
  3172  007704  5036               	movf	___ftmul@exp,w,c
  3173  007706  A4D8               	btfss	status,2,c
  3174  007708  D007               	goto	l1982
  3175  00770A  0E00               	movlw	0
  3176  00770C  6E2D               	movwf	?___ftmul,c
  3177  00770E  0E00               	movlw	0
  3178  007710  6E2E               	movwf	?___ftmul+1,c
  3179  007712  0E00               	movlw	0
  3180  007714  6E2F               	movwf	?___ftmul+2,c
  3181  007716  0012               	return	
  3182  007718                     l1982:
  3183  007718  C032  F033         	movff	___ftmul@f2+2,??___ftmul
  3184  00771C  6A34               	clrf	(??___ftmul+1)& (0+255),c
  3185  00771E  6A35               	clrf	(??___ftmul+2)& (0+255),c
  3186  007720  3431               	rlcf	___ftmul@f2+1,w,c
  3187  007722  3633               	rlcf	??___ftmul& (0+255),f,c
  3188  007724  E301               	bnc	u1491
  3189  007726  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  3190  007728                     u1491:
  3191  007728  5033               	movf	??___ftmul,w,c
  3192  00772A  6E3B               	movwf	___ftmul@sign,c
  3193  00772C  503B               	movf	___ftmul@sign,w,c
  3194  00772E  A4D8               	btfss	status,2,c
  3195  007730  D007               	goto	l1988
  3196  007732  0E00               	movlw	0
  3197  007734  6E2D               	movwf	?___ftmul,c
  3198  007736  0E00               	movlw	0
  3199  007738  6E2E               	movwf	?___ftmul+1,c
  3200  00773A  0E00               	movlw	0
  3201  00773C  6E2F               	movwf	?___ftmul+2,c
  3202  00773E  0012               	return	
  3203  007740                     l1988:
  3204  007740  503B               	movf	___ftmul@sign,w,c
  3205  007742  0F7B               	addlw	123
  3206  007744  2636               	addwf	___ftmul@exp,f,c
  3207  007746  C02F  F03B         	movff	___ftmul@f1+2,___ftmul@sign
  3208  00774A  5032               	movf	___ftmul@f2+2,w,c
  3209  00774C  1A3B               	xorwf	___ftmul@sign,f,c
  3210  00774E  0E80               	movlw	128
  3211  007750  163B               	andwf	___ftmul@sign,f,c
  3212  007752  8E2E               	bsf	___ftmul@f1+1,7,c
  3213  007754  8E31               	bsf	___ftmul@f2+1,7,c
  3214  007756  0EFF               	movlw	255
  3215  007758  1630               	andwf	___ftmul@f2,f,c
  3216  00775A  0EFF               	movlw	255
  3217  00775C  1631               	andwf	___ftmul@f2+1,f,c
  3218  00775E  0E00               	movlw	0
  3219  007760  1632               	andwf	___ftmul@f2+2,f,c
  3220  007762  0E00               	movlw	0
  3221  007764  6E37               	movwf	___ftmul@f3_as_product,c
  3222  007766  0E00               	movlw	0
  3223  007768  6E38               	movwf	___ftmul@f3_as_product+1,c
  3224  00776A  0E00               	movlw	0
  3225  00776C  6E39               	movwf	___ftmul@f3_as_product+2,c
  3226  00776E  0E07               	movlw	7
  3227  007770  6E3A               	movwf	___ftmul@cntr,c
  3228  007772                     l2002:
  3229  007772  A02D               	btfss	___ftmul@f1,0,c
  3230  007774  D006               	goto	l2006
  3231  007776  5030               	movf	___ftmul@f2,w,c
  3232  007778  2637               	addwf	___ftmul@f3_as_product,f,c
  3233  00777A  5031               	movf	___ftmul@f2+1,w,c
  3234  00777C  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  3235  00777E  5032               	movf	___ftmul@f2+2,w,c
  3236  007780  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  3237  007782                     l2006:
  3238  007782  90D8               	bcf	status,0,c
  3239  007784  322F               	rrcf	___ftmul@f1+2,f,c
  3240  007786  322E               	rrcf	___ftmul@f1+1,f,c
  3241  007788  322D               	rrcf	___ftmul@f1,f,c
  3242  00778A  90D8               	bcf	status,0,c
  3243  00778C  3630               	rlcf	___ftmul@f2,f,c
  3244  00778E  3631               	rlcf	___ftmul@f2+1,f,c
  3245  007790  3632               	rlcf	___ftmul@f2+2,f,c
  3246  007792  2E3A               	decfsz	___ftmul@cntr,f,c
  3247  007794  D7EE               	goto	l2002
  3248  007796  0E09               	movlw	9
  3249  007798  6E3A               	movwf	___ftmul@cntr,c
  3250  00779A                     l2012:
  3251  00779A  A02D               	btfss	___ftmul@f1,0,c
  3252  00779C  D006               	goto	l2016
  3253  00779E  5030               	movf	___ftmul@f2,w,c
  3254  0077A0  2637               	addwf	___ftmul@f3_as_product,f,c
  3255  0077A2  5031               	movf	___ftmul@f2+1,w,c
  3256  0077A4  2238               	addwfc	___ftmul@f3_as_product+1,f,c
  3257  0077A6  5032               	movf	___ftmul@f2+2,w,c
  3258  0077A8  2239               	addwfc	___ftmul@f3_as_product+2,f,c
  3259  0077AA                     l2016:
  3260  0077AA  90D8               	bcf	status,0,c
  3261  0077AC  322F               	rrcf	___ftmul@f1+2,f,c
  3262  0077AE  322E               	rrcf	___ftmul@f1+1,f,c
  3263  0077B0  322D               	rrcf	___ftmul@f1,f,c
  3264  0077B2  90D8               	bcf	status,0,c
  3265  0077B4  3239               	rrcf	___ftmul@f3_as_product+2,f,c
  3266  0077B6  3238               	rrcf	___ftmul@f3_as_product+1,f,c
  3267  0077B8  3237               	rrcf	___ftmul@f3_as_product,f,c
  3268  0077BA  2E3A               	decfsz	___ftmul@cntr,f,c
  3269  0077BC  D7EE               	goto	l2012
  3270  0077BE  C037  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3271  0077C2  C038  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3272  0077C6  C039  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3273  0077CA  C036  F004         	movff	___ftmul@exp,___ftpack@exp
  3274  0077CE  C03B  F005         	movff	___ftmul@sign,___ftpack@sign
  3275  0077D2  ECE4  F039         	call	___ftpack	;wreg free
  3276  0077D6  C001  F02D         	movff	?___ftpack,?___ftmul
  3277  0077DA  C002  F02E         	movff	?___ftpack+1,?___ftmul+1
  3278  0077DE  C003  F02F         	movff	?___ftpack+2,?___ftmul+2
  3279  0077E2  0012               	return	
  3280  0077E4                     __end_of___ftmul:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           postinc0	equ	0xFEE
  3287                           wreg	equ	0xFE8
  3288                           postdec1	equ	0xFE5
  3289                           plusw1	equ	0xFE3
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           plusw2	equ	0xFDB
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function ___ftdiv *****************
  3300 ;; Defined at:
  3301 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  f1              3   17[COMRAM] float 
  3304 ;;  f2              3   20[COMRAM] float 
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  f3              3   27[COMRAM] float 
  3307 ;;  sign            1   31[COMRAM] unsigned char 
  3308 ;;  exp             1   30[COMRAM] unsigned char 
  3309 ;;  cntr            1   26[COMRAM] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  3   17[COMRAM] float 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3319 ;;      Params:         6       0       0       0       0       0       0       0       0
  3320 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3321 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3322 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3323 ;;Total ram usage:       15 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    1
  3326 ;; This function calls:
  3327 ;;		___ftpack
  3328 ;; This function is called by:
  3329 ;;		_setPeriodTo
  3330 ;;		_SetDutyCycleTo
  3331 ;;		_doorSetDutyCycleTo
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text16
  3336  00760A                     __ptext16:
  3337                           	opt stack 0
  3338  00760A                     ___ftdiv:
  3339                           	opt stack 26
  3340                           
  3341                           ;incstack = 0
  3342  00760A  C014  F018         	movff	___ftdiv@f1+2,??___ftdiv
  3343  00760E  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  3344  007610  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  3345  007612  3413               	rlcf	___ftdiv@f1+1,w,c
  3346  007614  3618               	rlcf	??___ftdiv& (0+255),f,c
  3347  007616  E301               	bnc	u1421
  3348  007618  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  3349  00761A                     u1421:
  3350  00761A  5018               	movf	??___ftdiv,w,c
  3351  00761C  6E1F               	movwf	___ftdiv@exp,c
  3352  00761E  501F               	movf	___ftdiv@exp,w,c
  3353  007620  A4D8               	btfss	status,2,c
  3354  007622  D007               	goto	l1936
  3355  007624  0E00               	movlw	0
  3356  007626  6E12               	movwf	?___ftdiv,c
  3357  007628  0E00               	movlw	0
  3358  00762A  6E13               	movwf	?___ftdiv+1,c
  3359  00762C  0E00               	movlw	0
  3360  00762E  6E14               	movwf	?___ftdiv+2,c
  3361  007630  0012               	return	
  3362  007632                     l1936:
  3363  007632  C017  F018         	movff	___ftdiv@f2+2,??___ftdiv
  3364  007636  6A19               	clrf	(??___ftdiv+1)& (0+255),c
  3365  007638  6A1A               	clrf	(??___ftdiv+2)& (0+255),c
  3366  00763A  3416               	rlcf	___ftdiv@f2+1,w,c
  3367  00763C  3618               	rlcf	??___ftdiv& (0+255),f,c
  3368  00763E  E301               	bnc	u1441
  3369  007640  8019               	bsf	(??___ftdiv+1)& (0+255),0,c
  3370  007642                     u1441:
  3371  007642  5018               	movf	??___ftdiv,w,c
  3372  007644  6E20               	movwf	___ftdiv@sign,c
  3373  007646  5020               	movf	___ftdiv@sign,w,c
  3374  007648  A4D8               	btfss	status,2,c
  3375  00764A  D007               	goto	l1942
  3376  00764C  0E00               	movlw	0
  3377  00764E  6E12               	movwf	?___ftdiv,c
  3378  007650  0E00               	movlw	0
  3379  007652  6E13               	movwf	?___ftdiv+1,c
  3380  007654  0E00               	movlw	0
  3381  007656  6E14               	movwf	?___ftdiv+2,c
  3382  007658  0012               	return	
  3383  00765A                     l1942:
  3384  00765A  0E00               	movlw	0
  3385  00765C  6E1C               	movwf	___ftdiv@f3,c
  3386  00765E  0E00               	movlw	0
  3387  007660  6E1D               	movwf	___ftdiv@f3+1,c
  3388  007662  0E00               	movlw	0
  3389  007664  6E1E               	movwf	___ftdiv@f3+2,c
  3390  007666  5020               	movf	___ftdiv@sign,w,c
  3391  007668  0F89               	addlw	137
  3392  00766A  5E1F               	subwf	___ftdiv@exp,f,c
  3393  00766C  C014  F020         	movff	___ftdiv@f1+2,___ftdiv@sign
  3394  007670  5017               	movf	___ftdiv@f2+2,w,c
  3395  007672  1A20               	xorwf	___ftdiv@sign,f,c
  3396  007674  0E80               	movlw	128
  3397  007676  1620               	andwf	___ftdiv@sign,f,c
  3398  007678  8E13               	bsf	___ftdiv@f1+1,7,c
  3399  00767A  0EFF               	movlw	255
  3400  00767C  1612               	andwf	___ftdiv@f1,f,c
  3401  00767E  0EFF               	movlw	255
  3402  007680  1613               	andwf	___ftdiv@f1+1,f,c
  3403  007682  0E00               	movlw	0
  3404  007684  1614               	andwf	___ftdiv@f1+2,f,c
  3405  007686  8E16               	bsf	___ftdiv@f2+1,7,c
  3406  007688  0EFF               	movlw	255
  3407  00768A  1615               	andwf	___ftdiv@f2,f,c
  3408  00768C  0EFF               	movlw	255
  3409  00768E  1616               	andwf	___ftdiv@f2+1,f,c
  3410  007690  0E00               	movlw	0
  3411  007692  1617               	andwf	___ftdiv@f2+2,f,c
  3412  007694  0E18               	movlw	24
  3413  007696  6E1B               	movwf	___ftdiv@cntr,c
  3414  007698                     l1962:
  3415  007698  90D8               	bcf	status,0,c
  3416  00769A  361C               	rlcf	___ftdiv@f3,f,c
  3417  00769C  361D               	rlcf	___ftdiv@f3+1,f,c
  3418  00769E  361E               	rlcf	___ftdiv@f3+2,f,c
  3419  0076A0  5015               	movf	___ftdiv@f2,w,c
  3420  0076A2  5C12               	subwf	___ftdiv@f1,w,c
  3421  0076A4  5016               	movf	___ftdiv@f2+1,w,c
  3422  0076A6  5813               	subwfb	___ftdiv@f1+1,w,c
  3423  0076A8  5017               	movf	___ftdiv@f2+2,w,c
  3424  0076AA  5814               	subwfb	___ftdiv@f1+2,w,c
  3425  0076AC  A0D8               	btfss	status,0,c
  3426  0076AE  D007               	goto	l583
  3427  0076B0  5015               	movf	___ftdiv@f2,w,c
  3428  0076B2  5E12               	subwf	___ftdiv@f1,f,c
  3429  0076B4  5016               	movf	___ftdiv@f2+1,w,c
  3430  0076B6  5A13               	subwfb	___ftdiv@f1+1,f,c
  3431  0076B8  5017               	movf	___ftdiv@f2+2,w,c
  3432  0076BA  5A14               	subwfb	___ftdiv@f1+2,f,c
  3433  0076BC  801C               	bsf	___ftdiv@f3,0,c
  3434  0076BE                     l583:
  3435  0076BE  90D8               	bcf	status,0,c
  3436  0076C0  3612               	rlcf	___ftdiv@f1,f,c
  3437  0076C2  3613               	rlcf	___ftdiv@f1+1,f,c
  3438  0076C4  3614               	rlcf	___ftdiv@f1+2,f,c
  3439  0076C6  2E1B               	decfsz	___ftdiv@cntr,f,c
  3440  0076C8  D7E7               	goto	l1962
  3441  0076CA  C01C  F001         	movff	___ftdiv@f3,___ftpack@arg
  3442  0076CE  C01D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3443  0076D2  C01E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3444  0076D6  C01F  F004         	movff	___ftdiv@exp,___ftpack@exp
  3445  0076DA  C020  F005         	movff	___ftdiv@sign,___ftpack@sign
  3446  0076DE  ECE4  F039         	call	___ftpack	;wreg free
  3447  0076E2  C001  F012         	movff	?___ftpack,?___ftdiv
  3448  0076E6  C002  F013         	movff	?___ftpack+1,?___ftdiv+1
  3449  0076EA  C003  F014         	movff	?___ftpack+2,?___ftdiv+2
  3450  0076EE  0012               	return	
  3451  0076F0                     __end_of___ftdiv:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           plusw1	equ	0xFE3
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           plusw2	equ	0xFDB
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function ___ftadd *****************
  3471 ;; Defined at:
  3472 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftadd.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  f1              3   32[COMRAM] float 
  3475 ;;  f2              3   35[COMRAM] float 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  exp1            1   43[COMRAM] unsigned char 
  3478 ;;  exp2            1   42[COMRAM] unsigned char 
  3479 ;;  sign            1   41[COMRAM] unsigned char 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  3   32[COMRAM] float 
  3482 ;; Registers used:
  3483 ;;		wreg, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3489 ;;      Params:         6       0       0       0       0       0       0       0       0
  3490 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3491 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3492 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3493 ;;Total ram usage:       12 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    1
  3496 ;; This function calls:
  3497 ;;		___ftpack
  3498 ;; This function is called by:
  3499 ;;		_setPeriodTo
  3500 ;;		_SetDutyCycleTo
  3501 ;;		_doorSetDutyCycleTo
  3502 ;;		_round
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text17
  3507  0078D8                     __ptext17:
  3508                           	opt stack 0
  3509  0078D8                     ___ftadd:
  3510                           	opt stack 25
  3511                           
  3512                           ;incstack = 0
  3513  0078D8  C023  F027         	movff	___ftadd@f1+2,??___ftadd
  3514  0078DC  6A28               	clrf	(??___ftadd+1)& (0+255),c
  3515  0078DE  6A29               	clrf	(??___ftadd+2)& (0+255),c
  3516  0078E0  3422               	rlcf	___ftadd@f1+1,w,c
  3517  0078E2  3627               	rlcf	??___ftadd& (0+255),f,c
  3518  0078E4  E301               	bnc	u1181
  3519  0078E6  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  3520  0078E8                     u1181:
  3521  0078E8  5027               	movf	??___ftadd,w,c
  3522  0078EA  6E2C               	movwf	___ftadd@exp1,c
  3523  0078EC  C026  F027         	movff	___ftadd@f2+2,??___ftadd
  3524  0078F0  6A28               	clrf	(??___ftadd+1)& (0+255),c
  3525  0078F2  6A29               	clrf	(??___ftadd+2)& (0+255),c
  3526  0078F4  3425               	rlcf	___ftadd@f2+1,w,c
  3527  0078F6  3627               	rlcf	??___ftadd& (0+255),f,c
  3528  0078F8  E301               	bnc	u1191
  3529  0078FA  8028               	bsf	(??___ftadd+1)& (0+255),0,c
  3530  0078FC                     u1191:
  3531  0078FC  5027               	movf	??___ftadd,w,c
  3532  0078FE  6E2B               	movwf	___ftadd@exp2,c
  3533  007900  502C               	movf	___ftadd@exp1,w,c
  3534  007902  B4D8               	btfsc	status,2,c
  3535  007904  D00B               	goto	l548
  3536  007906  502B               	movf	___ftadd@exp2,w,c
  3537  007908  5C2C               	subwf	___ftadd@exp1,w,c
  3538  00790A  B0D8               	btfsc	status,0,c
  3539  00790C  D00E               	goto	l1832
  3540  00790E  502C               	movf	___ftadd@exp1,w,c
  3541  007910  0800               	sublw	0
  3542  007912  242B               	addwf	___ftadd@exp2,w,c
  3543  007914  6E27               	movwf	??___ftadd& (0+255),c
  3544  007916  0E18               	movlw	24
  3545  007918  6427               	cpfsgt	??___ftadd,c
  3546  00791A  D007               	goto	l1832
  3547  00791C                     l548:
  3548  00791C  C024  F021         	movff	___ftadd@f2,?___ftadd
  3549  007920  C025  F022         	movff	___ftadd@f2+1,?___ftadd+1
  3550  007924  C026  F023         	movff	___ftadd@f2+2,?___ftadd+2
  3551  007928  0012               	return	
  3552  00792A                     l1832:
  3553  00792A  502B               	movf	___ftadd@exp2,w,c
  3554  00792C  B4D8               	btfsc	status,2,c
  3555  00792E  D00B               	goto	l552
  3556  007930  502C               	movf	___ftadd@exp1,w,c
  3557  007932  5C2B               	subwf	___ftadd@exp2,w,c
  3558  007934  B0D8               	btfsc	status,0,c
  3559  007936  D00E               	goto	l1838
  3560  007938  502B               	movf	___ftadd@exp2,w,c
  3561  00793A  0800               	sublw	0
  3562  00793C  242C               	addwf	___ftadd@exp1,w,c
  3563  00793E  6E27               	movwf	??___ftadd& (0+255),c
  3564  007940  0E18               	movlw	24
  3565  007942  6427               	cpfsgt	??___ftadd,c
  3566  007944  D007               	goto	l1838
  3567  007946                     l552:
  3568  007946  C021  F021         	movff	___ftadd@f1,?___ftadd
  3569  00794A  C022  F022         	movff	___ftadd@f1+1,?___ftadd+1
  3570  00794E  C023  F023         	movff	___ftadd@f1+2,?___ftadd+2
  3571  007952  0012               	return	
  3572  007954                     l1838:
  3573  007954  0E06               	movlw	6
  3574  007956  6E2A               	movwf	___ftadd@sign,c
  3575  007958  BE23               	btfsc	___ftadd@f1+2,7,c
  3576  00795A  8E2A               	bsf	___ftadd@sign,7,c
  3577  00795C  BE26               	btfsc	___ftadd@f2+2,7,c
  3578  00795E  8C2A               	bsf	___ftadd@sign,6,c
  3579  007960  8E22               	bsf	___ftadd@f1+1,7,c
  3580  007962  0EFF               	movlw	255
  3581  007964  1621               	andwf	___ftadd@f1,f,c
  3582  007966  0EFF               	movlw	255
  3583  007968  1622               	andwf	___ftadd@f1+1,f,c
  3584  00796A  0E00               	movlw	0
  3585  00796C  1623               	andwf	___ftadd@f1+2,f,c
  3586  00796E  8E25               	bsf	___ftadd@f2+1,7,c
  3587  007970  0EFF               	movlw	255
  3588  007972  1624               	andwf	___ftadd@f2,f,c
  3589  007974  0EFF               	movlw	255
  3590  007976  1625               	andwf	___ftadd@f2+1,f,c
  3591  007978  0E00               	movlw	0
  3592  00797A  1626               	andwf	___ftadd@f2+2,f,c
  3593  00797C  502B               	movf	___ftadd@exp2,w,c
  3594  00797E  5C2C               	subwf	___ftadd@exp1,w,c
  3595  007980  B0D8               	btfsc	status,0,c
  3596  007982  D01B               	goto	l1864
  3597  007984                     l1854:
  3598  007984  90D8               	bcf	status,0,c
  3599  007986  3624               	rlcf	___ftadd@f2,f,c
  3600  007988  3625               	rlcf	___ftadd@f2+1,f,c
  3601  00798A  3626               	rlcf	___ftadd@f2+2,f,c
  3602  00798C  062B               	decf	___ftadd@exp2,f,c
  3603  00798E  502C               	movf	___ftadd@exp1,w,c
  3604  007990  182B               	xorwf	___ftadd@exp2,w,c
  3605  007992  B4D8               	btfsc	status,2,c
  3606  007994  D00D               	goto	l1862
  3607  007996  062A               	decf	___ftadd@sign,f,c
  3608  007998  C02A  F027         	movff	___ftadd@sign,??___ftadd
  3609  00799C  0E07               	movlw	7
  3610  00799E  1627               	andwf	??___ftadd,f,c
  3611  0079A0  B4D8               	btfsc	status,2,c
  3612  0079A2  D006               	goto	l1862
  3613  0079A4  D7EF               	goto	l1854
  3614  0079A6                     l1860:
  3615  0079A6  90D8               	bcf	status,0,c
  3616  0079A8  3223               	rrcf	___ftadd@f1+2,f,c
  3617  0079AA  3222               	rrcf	___ftadd@f1+1,f,c
  3618  0079AC  3221               	rrcf	___ftadd@f1,f,c
  3619  0079AE  2A2C               	incf	___ftadd@exp1,f,c
  3620  0079B0                     l1862:
  3621  0079B0  502B               	movf	___ftadd@exp2,w,c
  3622  0079B2  182C               	xorwf	___ftadd@exp1,w,c
  3623  0079B4  B4D8               	btfsc	status,2,c
  3624  0079B6  D01F               	goto	l563
  3625  0079B8  D7F6               	goto	l1860
  3626  0079BA                     l1864:
  3627  0079BA  502C               	movf	___ftadd@exp1,w,c
  3628  0079BC  5C2B               	subwf	___ftadd@exp2,w,c
  3629  0079BE  B0D8               	btfsc	status,0,c
  3630  0079C0  D01A               	goto	l563
  3631  0079C2                     l1866:
  3632  0079C2  90D8               	bcf	status,0,c
  3633  0079C4  3621               	rlcf	___ftadd@f1,f,c
  3634  0079C6  3622               	rlcf	___ftadd@f1+1,f,c
  3635  0079C8  3623               	rlcf	___ftadd@f1+2,f,c
  3636  0079CA  062C               	decf	___ftadd@exp1,f,c
  3637  0079CC  502C               	movf	___ftadd@exp1,w,c
  3638  0079CE  182B               	xorwf	___ftadd@exp2,w,c
  3639  0079D0  B4D8               	btfsc	status,2,c
  3640  0079D2  D00D               	goto	l1874
  3641  0079D4  062A               	decf	___ftadd@sign,f,c
  3642  0079D6  C02A  F027         	movff	___ftadd@sign,??___ftadd
  3643  0079DA  0E07               	movlw	7
  3644  0079DC  1627               	andwf	??___ftadd,f,c
  3645  0079DE  B4D8               	btfsc	status,2,c
  3646  0079E0  D006               	goto	l1874
  3647  0079E2  D7EF               	goto	l1866
  3648  0079E4                     l1872:
  3649  0079E4  90D8               	bcf	status,0,c
  3650  0079E6  3226               	rrcf	___ftadd@f2+2,f,c
  3651  0079E8  3225               	rrcf	___ftadd@f2+1,f,c
  3652  0079EA  3224               	rrcf	___ftadd@f2,f,c
  3653  0079EC  2A2B               	incf	___ftadd@exp2,f,c
  3654  0079EE                     l1874:
  3655  0079EE  502B               	movf	___ftadd@exp2,w,c
  3656  0079F0  182C               	xorwf	___ftadd@exp1,w,c
  3657  0079F2  A4D8               	btfss	status,2,c
  3658  0079F4  D7F7               	goto	l1872
  3659  0079F6                     l563:
  3660  0079F6  AE2A               	btfss	___ftadd@sign,7,c
  3661  0079F8  D00C               	goto	l572
  3662  0079FA  0EFF               	movlw	255
  3663  0079FC  1A21               	xorwf	___ftadd@f1,f,c
  3664  0079FE  0EFF               	movlw	255
  3665  007A00  1A22               	xorwf	___ftadd@f1+1,f,c
  3666  007A02  0EFF               	movlw	255
  3667  007A04  1A23               	xorwf	___ftadd@f1+2,f,c
  3668  007A06  0E01               	movlw	1
  3669  007A08  2621               	addwf	___ftadd@f1,f,c
  3670  007A0A  0E00               	movlw	0
  3671  007A0C  2222               	addwfc	___ftadd@f1+1,f,c
  3672  007A0E  0E00               	movlw	0
  3673  007A10  2223               	addwfc	___ftadd@f1+2,f,c
  3674  007A12                     l572:
  3675  007A12  AC2A               	btfss	___ftadd@sign,6,c
  3676  007A14  D00C               	goto	l1880
  3677  007A16  0EFF               	movlw	255
  3678  007A18  1A24               	xorwf	___ftadd@f2,f,c
  3679  007A1A  0EFF               	movlw	255
  3680  007A1C  1A25               	xorwf	___ftadd@f2+1,f,c
  3681  007A1E  0EFF               	movlw	255
  3682  007A20  1A26               	xorwf	___ftadd@f2+2,f,c
  3683  007A22  0E01               	movlw	1
  3684  007A24  2624               	addwf	___ftadd@f2,f,c
  3685  007A26  0E00               	movlw	0
  3686  007A28  2225               	addwfc	___ftadd@f2+1,f,c
  3687  007A2A  0E00               	movlw	0
  3688  007A2C  2226               	addwfc	___ftadd@f2+2,f,c
  3689  007A2E                     l1880:
  3690  007A2E  0E00               	movlw	0
  3691  007A30  6E2A               	movwf	___ftadd@sign,c
  3692  007A32  5021               	movf	___ftadd@f1,w,c
  3693  007A34  2624               	addwf	___ftadd@f2,f,c
  3694  007A36  5022               	movf	___ftadd@f1+1,w,c
  3695  007A38  2225               	addwfc	___ftadd@f2+1,f,c
  3696  007A3A  5023               	movf	___ftadd@f1+2,w,c
  3697  007A3C  2226               	addwfc	___ftadd@f2+2,f,c
  3698  007A3E  AE26               	btfss	___ftadd@f2+2,7,c
  3699  007A40  D00E               	goto	l1890
  3700  007A42  0EFF               	movlw	255
  3701  007A44  1A24               	xorwf	___ftadd@f2,f,c
  3702  007A46  0EFF               	movlw	255
  3703  007A48  1A25               	xorwf	___ftadd@f2+1,f,c
  3704  007A4A  0EFF               	movlw	255
  3705  007A4C  1A26               	xorwf	___ftadd@f2+2,f,c
  3706  007A4E  0E01               	movlw	1
  3707  007A50  2624               	addwf	___ftadd@f2,f,c
  3708  007A52  0E00               	movlw	0
  3709  007A54  2225               	addwfc	___ftadd@f2+1,f,c
  3710  007A56  0E00               	movlw	0
  3711  007A58  2226               	addwfc	___ftadd@f2+2,f,c
  3712  007A5A  0E01               	movlw	1
  3713  007A5C  6E2A               	movwf	___ftadd@sign,c
  3714  007A5E                     l1890:
  3715  007A5E  C024  F001         	movff	___ftadd@f2,___ftpack@arg
  3716  007A62  C025  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3717  007A66  C026  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3718  007A6A  C02C  F004         	movff	___ftadd@exp1,___ftpack@exp
  3719  007A6E  C02A  F005         	movff	___ftadd@sign,___ftpack@sign
  3720  007A72  ECE4  F039         	call	___ftpack	;wreg free
  3721  007A76  C001  F021         	movff	?___ftpack,?___ftadd
  3722  007A7A  C002  F022         	movff	?___ftpack+1,?___ftadd+1
  3723  007A7E  C003  F023         	movff	?___ftpack+2,?___ftadd+2
  3724  007A82  0012               	return	
  3725  007A84                     __end_of___ftadd:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           postdec1	equ	0xFE5
  3734                           plusw1	equ	0xFE3
  3735                           fsr1l	equ	0xFE1
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           plusw2	equ	0xFDB
  3740                           fsr2h	equ	0xFDA
  3741                           fsr2l	equ	0xFD9
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function ___awtoft *****************
  3745 ;; Defined at:
  3746 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awtoft.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;  c               2    8[COMRAM] int 
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;  sign            1   11[COMRAM] unsigned char 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  3    8[COMRAM] float 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3760 ;;      Params:         3       0       0       0       0       0       0       0       0
  3761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3763 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3764 ;;Total ram usage:        4 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    1
  3767 ;; This function calls:
  3768 ;;		___ftpack
  3769 ;; This function is called by:
  3770 ;;		_setPeriodTo
  3771 ;;		_SetDutyCycleTo
  3772 ;;		_doorSetDutyCycleTo
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text18
  3777  006E8C                     __ptext18:
  3778                           	opt stack 0
  3779  006E8C                     ___awtoft:
  3780                           	opt stack 26
  3781                           
  3782                           ;incstack = 0
  3783  006E8C  0E00               	movlw	0
  3784  006E8E  6E0C               	movwf	___awtoft@sign,c
  3785  006E90  AE0A               	btfss	___awtoft@c+1,7,c
  3786  006E92  D006               	goto	l2032
  3787  006E94  6C09               	negf	___awtoft@c,c
  3788  006E96  1E0A               	comf	___awtoft@c+1,f,c
  3789  006E98  B0D8               	btfsc	status,0,c
  3790  006E9A  2A0A               	incf	___awtoft@c+1,f,c
  3791  006E9C  0E01               	movlw	1
  3792  006E9E  6E0C               	movwf	___awtoft@sign,c
  3793  006EA0                     l2032:
  3794  006EA0  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3795  006EA4  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3796  006EA8  6A03               	clrf	___ftpack@arg+2,c
  3797  006EAA  0E8E               	movlw	142
  3798  006EAC  6E04               	movwf	___ftpack@exp,c
  3799  006EAE  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3800  006EB2  ECE4  F039         	call	___ftpack	;wreg free
  3801  006EB6  C001  F009         	movff	?___ftpack,?___awtoft
  3802  006EBA  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3803  006EBE  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3804  006EC2  0012               	return	
  3805  006EC4                     __end_of___awtoft:
  3806                           	opt stack 0
  3807                           tblptru	equ	0xFF8
  3808                           tblptrh	equ	0xFF7
  3809                           tblptrl	equ	0xFF6
  3810                           tablat	equ	0xFF5
  3811                           postinc0	equ	0xFEE
  3812                           wreg	equ	0xFE8
  3813                           postdec1	equ	0xFE5
  3814                           plusw1	equ	0xFE3
  3815                           fsr1l	equ	0xFE1
  3816                           indf2	equ	0xFDF
  3817                           postinc2	equ	0xFDE
  3818                           postdec2	equ	0xFDD
  3819                           plusw2	equ	0xFDB
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function ___ftpack *****************
  3825 ;; Defined at:
  3826 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  arg             3    0[COMRAM] unsigned um
  3829 ;;  exp             1    3[COMRAM] unsigned char 
  3830 ;;  sign            1    4[COMRAM] unsigned char 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  3    0[COMRAM] float 
  3835 ;; Registers used:
  3836 ;;		wreg, status,2, status,0
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3842 ;;      Params:         5       0       0       0       0       0       0       0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3844 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3845 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3846 ;;Total ram usage:        8 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		___altoft
  3852 ;;		___awtoft
  3853 ;;		___ftadd
  3854 ;;		___ftdiv
  3855 ;;		___ftmul
  3856 ;;		___lltoft
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           	psect	text19
  3861  0073C8                     __ptext19:
  3862                           	opt stack 0
  3863  0073C8                     ___ftpack:
  3864                           	opt stack 24
  3865                           
  3866                           ;incstack = 0
  3867  0073C8  5004               	movf	___ftpack@exp,w,c
  3868  0073CA  B4D8               	btfsc	status,2,c
  3869  0073CC  D005               	goto	l1714
  3870  0073CE  5001               	movf	___ftpack@arg,w,c
  3871  0073D0  1002               	iorwf	___ftpack@arg+1,w,c
  3872  0073D2  1003               	iorwf	___ftpack@arg+2,w,c
  3873  0073D4  A4D8               	btfss	status,2,c
  3874  0073D6  D00C               	goto	l1720
  3875  0073D8                     l1714:
  3876  0073D8  0E00               	movlw	0
  3877  0073DA  6E01               	movwf	?___ftpack,c
  3878  0073DC  0E00               	movlw	0
  3879  0073DE  6E02               	movwf	?___ftpack+1,c
  3880  0073E0  0E00               	movlw	0
  3881  0073E2  6E03               	movwf	?___ftpack+2,c
  3882  0073E4  0012               	return	
  3883  0073E6                     l1718:
  3884  0073E6  2A04               	incf	___ftpack@exp,f,c
  3885  0073E8  90D8               	bcf	status,0,c
  3886  0073EA  3203               	rrcf	___ftpack@arg+2,f,c
  3887  0073EC  3202               	rrcf	___ftpack@arg+1,f,c
  3888  0073EE  3201               	rrcf	___ftpack@arg,f,c
  3889  0073F0                     l1720:
  3890  0073F0  0E00               	movlw	0
  3891  0073F2  1401               	andwf	___ftpack@arg,w,c
  3892  0073F4  6E06               	movwf	??___ftpack& (0+255),c
  3893  0073F6  0E00               	movlw	0
  3894  0073F8  1402               	andwf	___ftpack@arg+1,w,c
  3895  0073FA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3896  0073FC  0EFE               	movlw	254
  3897  0073FE  1403               	andwf	___ftpack@arg+2,w,c
  3898  007400  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3899  007402  5006               	movf	??___ftpack,w,c
  3900  007404  1007               	iorwf	??___ftpack+1,w,c
  3901  007406  1008               	iorwf	??___ftpack+2,w,c
  3902  007408  B4D8               	btfsc	status,2,c
  3903  00740A  D00C               	goto	l1726
  3904  00740C  D7EC               	goto	l1718
  3905  00740E                     l1722:
  3906  00740E  2A04               	incf	___ftpack@exp,f,c
  3907  007410  0E01               	movlw	1
  3908  007412  2601               	addwf	___ftpack@arg,f,c
  3909  007414  0E00               	movlw	0
  3910  007416  2202               	addwfc	___ftpack@arg+1,f,c
  3911  007418  0E00               	movlw	0
  3912  00741A  2203               	addwfc	___ftpack@arg+2,f,c
  3913  00741C  90D8               	bcf	status,0,c
  3914  00741E  3203               	rrcf	___ftpack@arg+2,f,c
  3915  007420  3202               	rrcf	___ftpack@arg+1,f,c
  3916  007422  3201               	rrcf	___ftpack@arg,f,c
  3917  007424                     l1726:
  3918  007424  0E00               	movlw	0
  3919  007426  1401               	andwf	___ftpack@arg,w,c
  3920  007428  6E06               	movwf	??___ftpack& (0+255),c
  3921  00742A  0E00               	movlw	0
  3922  00742C  1402               	andwf	___ftpack@arg+1,w,c
  3923  00742E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3924  007430  0EFF               	movlw	255
  3925  007432  1403               	andwf	___ftpack@arg+2,w,c
  3926  007434  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3927  007436  5006               	movf	??___ftpack,w,c
  3928  007438  1007               	iorwf	??___ftpack+1,w,c
  3929  00743A  1008               	iorwf	??___ftpack+2,w,c
  3930  00743C  B4D8               	btfsc	status,2,c
  3931  00743E  D006               	goto	l1730
  3932  007440  D7E6               	goto	l1722
  3933  007442                     l1728:
  3934  007442  0604               	decf	___ftpack@exp,f,c
  3935  007444  90D8               	bcf	status,0,c
  3936  007446  3601               	rlcf	___ftpack@arg,f,c
  3937  007448  3602               	rlcf	___ftpack@arg+1,f,c
  3938  00744A  3603               	rlcf	___ftpack@arg+2,f,c
  3939  00744C                     l1730:
  3940  00744C  BE02               	btfsc	___ftpack@arg+1,7,c
  3941  00744E  D003               	goto	l525
  3942  007450  0E02               	movlw	2
  3943  007452  6004               	cpfslt	___ftpack@exp,c
  3944  007454  D7F6               	goto	l1728
  3945  007456                     l525:
  3946  007456  A004               	btfss	___ftpack@exp,0,c
  3947  007458  9E02               	bcf	___ftpack@arg+1,7,c
  3948  00745A  90D8               	bcf	status,0,c
  3949  00745C  3204               	rrcf	___ftpack@exp,f,c
  3950  00745E  5004               	movf	___ftpack@exp,w,c
  3951  007460  1203               	iorwf	___ftpack@arg+2,f,c
  3952  007462  5005               	movf	___ftpack@sign,w,c
  3953  007464  A4D8               	btfss	status,2,c
  3954  007466  8E03               	bsf	___ftpack@arg+2,7,c
  3955  007468  C001  F001         	movff	___ftpack@arg,?___ftpack
  3956  00746C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3957  007470  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3958  007474  0012               	return	
  3959  007476                     __end_of___ftpack:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           postdec1	equ	0xFE5
  3968                           plusw1	equ	0xFE3
  3969                           fsr1l	equ	0xFE1
  3970                           indf2	equ	0xFDF
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           plusw2	equ	0xFDB
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _delay *****************
  3979 ;; Defined at:
  3980 ;;		line 81 in file "MotorFunction.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  val             2    0[COMRAM] unsigned int 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;  j               2    4[COMRAM] unsigned int 
  3985 ;;  i               2    2[COMRAM] unsigned int 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;		None               void
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3995 ;;      Params:         2       0       0       0       0       0       0       0       0
  3996 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3998 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3999 ;;Total ram usage:        6 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_motorlock_unlock
  4005 ;;		_motordoor_open
  4006 ;;		_motorlock_lock
  4007 ;;		_motordoor_close
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text20
  4012  006E56                     __ptext20:
  4013                           	opt stack 0
  4014  006E56                     _delay:
  4015                           	opt stack 28
  4016                           
  4017                           ;MotorFunction.c: 83: unsigned int i,j;
  4018                           ;MotorFunction.c: 84: for(i=0;i<val;i++)
  4019                           
  4020                           ;incstack = 0
  4021  006E56  0E00               	movlw	0
  4022  006E58  6E04               	movwf	delay@i+1,c
  4023  006E5A  0E00               	movlw	0
  4024  006E5C  6E03               	movwf	delay@i,c
  4025  006E5E  D00F               	goto	l2164
  4026  006E60                     l2152:
  4027                           
  4028                           ;MotorFunction.c: 85: for(j=0;j<10;j++);
  4029  006E60  0E00               	movlw	0
  4030  006E62  6E06               	movwf	delay@j+1,c
  4031  006E64  0E00               	movlw	0
  4032  006E66  6E05               	movwf	delay@j,c
  4033  006E68                     l2154:
  4034  006E68  5006               	movf	delay@j+1,w,c
  4035  006E6A  E107               	bnz	l2162
  4036  006E6C  0E0A               	movlw	10
  4037  006E6E  5C05               	subwf	delay@j,w,c
  4038  006E70  B0D8               	btfsc	status,0,c
  4039  006E72  D003               	goto	l2162
  4040  006E74  4A05               	infsnz	delay@j,f,c
  4041  006E76  2A06               	incf	delay@j+1,f,c
  4042  006E78  D7F7               	goto	l2154
  4043  006E7A                     l2162:
  4044  006E7A  4A03               	infsnz	delay@i,f,c
  4045  006E7C  2A04               	incf	delay@i+1,f,c
  4046  006E7E                     l2164:
  4047  006E7E  5001               	movf	delay@val,w,c
  4048  006E80  5C03               	subwf	delay@i,w,c
  4049  006E82  5002               	movf	delay@val+1,w,c
  4050  006E84  5804               	subwfb	delay@i+1,w,c
  4051  006E86  B0D8               	btfsc	status,0,c
  4052  006E88  0012               	return	
  4053  006E8A  D7EA               	goto	l2152
  4054  006E8C                     __end_of_delay:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           plusw1	equ	0xFE3
  4064                           fsr1l	equ	0xFE1
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           postdec2	equ	0xFDD
  4068                           plusw2	equ	0xFDB
  4069                           fsr2h	equ	0xFDA
  4070                           fsr2l	equ	0xFD9
  4071                           status	equ	0xFD8
  4072                           
  4073 ;; *************** function _PWMdoor_Init *****************
  4074 ;; Defined at:
  4075 ;;		line 26 in file "MotorFunction.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;		None
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;		None               void
  4082 ;; Registers used:
  4083 ;;		wreg, status,2
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         0       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4092 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4093 ;;Total ram usage:        0 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; This function calls:
  4096 ;;		Nothing
  4097 ;; This function is called by:
  4098 ;;		_motordoor_open
  4099 ;;		_motordoor_close
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text21
  4104  006D22                     __ptext21:
  4105                           	opt stack 0
  4106  006D22                     _PWMdoor_Init:
  4107                           	opt stack 28
  4108                           
  4109                           ;MotorFunction.c: 27: TRISCbits.TRISC1 = 0;
  4110                           
  4111                           ;incstack = 0
  4112  006D22  9294               	bcf	3988,1,c	;volatile
  4113                           
  4114                           ;MotorFunction.c: 28: CCP1CON = 0x0C;
  4115  006D24  0E0C               	movlw	12
  4116  006D26  6EBD               	movwf	4029,c	;volatile
  4117  006D28  0012               	return		;funcret
  4118  006D2A                     __end_of_PWMdoor_Init:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           plusw1	equ	0xFE3
  4128                           fsr1l	equ	0xFE1
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           plusw2	equ	0xFDB
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function _lcd_write_data *****************
  4138 ;; Defined at:
  4139 ;;		line 54 in file "lcd_utilities.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  data            1    wreg     unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  data            1    2[COMRAM] unsigned char 
  4144 ;;  temp1           1    3[COMRAM] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;		None               void
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4154 ;;      Params:         0       0       0       0       0       0       0       0       0
  4155 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4156 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4157 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4158 ;;Total ram usage:        3 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    1
  4161 ;; This function calls:
  4162 ;;		_lcd_strobe
  4163 ;; This function is called by:
  4164 ;;		_LockMotor
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text22
  4169  007334                     __ptext22:
  4170                           	opt stack 0
  4171  007334                     _lcd_write_data:
  4172                           	opt stack 28
  4173                           
  4174                           ;incstack = 0
  4175                           ;lcd_write_data@data stored from wreg
  4176  007334  6E03               	movwf	lcd_write_data@data,c
  4177                           
  4178                           ;lcd_utilities.c: 56: char temp1;
  4179                           ;lcd_utilities.c: 58: PORTDbits.RD6 = 1;
  4180  007336  8C83               	bsf	3971,6,c	;volatile
  4181                           
  4182                           ;lcd_utilities.c: 59: _delay((unsigned long)((4)*(48000000/4000.0)));
  4183  007338  0E3F               	movlw	63
  4184  00733A  6E02               	movwf	??_lcd_write_data& (0+255),c
  4185  00733C  0E55               	movlw	85
  4186  00733E                     u1917:
  4187  00733E  2EE8               	decfsz	wreg,f,c
  4188  007340  D7FE               	goto	u1917
  4189  007342  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4190  007344  D7FC               	goto	u1917
  4191  007346  F000               	nop	
  4192                           
  4193                           ;lcd_utilities.c: 61: temp1 = data;
  4194  007348  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4195                           
  4196                           ;lcd_utilities.c: 62: temp1 = temp1 >> 4;
  4197  00734C  3804               	swapf	lcd_write_data@temp1,w,c
  4198  00734E  0B0F               	andlw	15
  4199  007350  6E04               	movwf	lcd_write_data@temp1,c
  4200                           
  4201                           ;lcd_utilities.c: 63: PORTD = temp1 & 0x0F;
  4202  007352  5004               	movf	lcd_write_data@temp1,w,c
  4203  007354  0B0F               	andlw	15
  4204  007356  6E83               	movwf	3971,c	;volatile
  4205                           
  4206                           ;lcd_utilities.c: 64: _delay((unsigned long)((8)*(48000000/4000.0)));
  4207  007358  0E7D               	movlw	125
  4208  00735A  6E02               	movwf	??_lcd_write_data& (0+255),c
  4209  00735C  0EAC               	movlw	172
  4210  00735E                     u1927:
  4211  00735E  2EE8               	decfsz	wreg,f,c
  4212  007360  D7FE               	goto	u1927
  4213  007362  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4214  007364  D7FC               	goto	u1927
  4215                           
  4216                           ;lcd_utilities.c: 65: PORTDbits.RD6 = 1;
  4217  007366  8C83               	bsf	3971,6,c	;volatile
  4218                           
  4219                           ;lcd_utilities.c: 66: _delay((unsigned long)((8)*(48000000/4000.0)));
  4220  007368  0E7D               	movlw	125
  4221  00736A  6E02               	movwf	??_lcd_write_data& (0+255),c
  4222  00736C  0EAC               	movlw	172
  4223  00736E                     u1937:
  4224  00736E  2EE8               	decfsz	wreg,f,c
  4225  007370  D7FE               	goto	u1937
  4226  007372  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4227  007374  D7FC               	goto	u1937
  4228                           
  4229                           ;lcd_utilities.c: 68: lcd_strobe();
  4230  007376  ECBD  F036         	call	_lcd_strobe	;wreg free
  4231                           
  4232                           ;lcd_utilities.c: 69: _delay((unsigned long)((8)*(48000000/4000.0)));
  4233  00737A  0E7D               	movlw	125
  4234  00737C  6E02               	movwf	??_lcd_write_data& (0+255),c
  4235  00737E  0EAC               	movlw	172
  4236  007380                     u1947:
  4237  007380  2EE8               	decfsz	wreg,f,c
  4238  007382  D7FE               	goto	u1947
  4239  007384  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4240  007386  D7FC               	goto	u1947
  4241                           
  4242                           ;lcd_utilities.c: 71: temp1 = data;
  4243  007388  C003  F004         	movff	lcd_write_data@data,lcd_write_data@temp1
  4244                           
  4245                           ;lcd_utilities.c: 72: PORTD = temp1 & 0x0F;
  4246  00738C  5004               	movf	lcd_write_data@temp1,w,c
  4247  00738E  0B0F               	andlw	15
  4248  007390  6E83               	movwf	3971,c	;volatile
  4249                           
  4250                           ;lcd_utilities.c: 73: _delay((unsigned long)((8)*(48000000/4000.0)));
  4251  007392  0E7D               	movlw	125
  4252  007394  6E02               	movwf	??_lcd_write_data& (0+255),c
  4253  007396  0EAC               	movlw	172
  4254  007398                     u1957:
  4255  007398  2EE8               	decfsz	wreg,f,c
  4256  00739A  D7FE               	goto	u1957
  4257  00739C  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4258  00739E  D7FC               	goto	u1957
  4259                           
  4260                           ;lcd_utilities.c: 74: PORTDbits.RD6 = 1;
  4261  0073A0  8C83               	bsf	3971,6,c	;volatile
  4262                           
  4263                           ;lcd_utilities.c: 75: _delay((unsigned long)((10)*(48000000/4000.0)));
  4264  0073A2  0E9C               	movlw	156
  4265  0073A4  6E02               	movwf	??_lcd_write_data& (0+255),c
  4266  0073A6  0ED7               	movlw	215
  4267  0073A8                     u1967:
  4268  0073A8  2EE8               	decfsz	wreg,f,c
  4269  0073AA  D7FE               	goto	u1967
  4270  0073AC  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4271  0073AE  D7FC               	goto	u1967
  4272  0073B0  F000               	nop	
  4273                           
  4274                           ;lcd_utilities.c: 77: lcd_strobe();
  4275  0073B2  ECBD  F036         	call	_lcd_strobe	;wreg free
  4276                           
  4277                           ;lcd_utilities.c: 78: _delay((unsigned long)((10)*(48000000/4000.0)));
  4278  0073B6  0E9C               	movlw	156
  4279  0073B8  6E02               	movwf	??_lcd_write_data& (0+255),c
  4280  0073BA  0ED7               	movlw	215
  4281  0073BC                     u1977:
  4282  0073BC  2EE8               	decfsz	wreg,f,c
  4283  0073BE  D7FE               	goto	u1977
  4284  0073C0  2E02               	decfsz	??_lcd_write_data& (0+255),f,c
  4285  0073C2  D7FC               	goto	u1977
  4286  0073C4  F000               	nop	
  4287  0073C6  0012               	return		;funcret
  4288  0073C8                     __end_of_lcd_write_data:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           plusw1	equ	0xFE3
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           plusw2	equ	0xFDB
  4303                           fsr2h	equ	0xFDA
  4304                           fsr2l	equ	0xFD9
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _lcd_init *****************
  4308 ;; Defined at:
  4309 ;;		line 94 in file "lcd_utilities.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  i               2    5[COMRAM] int 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;		None               void
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0
  4324 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4325 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4326 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4327 ;;Total ram usage:        3 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    2
  4330 ;; This function calls:
  4331 ;;		_lcd_write_cmd
  4332 ;; This function is called by:
  4333 ;;		_LockMotor
  4334 ;;		_UltraSound
  4335 ;; This function uses a non-reentrant model
  4336 ;;
  4337                           
  4338                           	psect	text23
  4339  0070C2                     __ptext23:
  4340                           	opt stack 0
  4341  0070C2                     _lcd_init:
  4342                           	opt stack 27
  4343                           
  4344                           ;lcd_utilities.c: 96: int i;
  4345                           ;lcd_utilities.c: 97: TRISD = 0x00;
  4346                           
  4347                           ;incstack = 0
  4348  0070C2  0E00               	movlw	0
  4349  0070C4  6E95               	movwf	3989,c	;volatile
  4350                           
  4351                           ;lcd_utilities.c: 98: PORTD = 0x00;
  4352  0070C6  0E00               	movlw	0
  4353  0070C8  6E83               	movwf	3971,c	;volatile
  4354                           
  4355                           ;lcd_utilities.c: 99: PORTDbits.RD4 = 0;
  4356  0070CA  9883               	bcf	3971,4,c	;volatile
  4357                           
  4358                           ;lcd_utilities.c: 100: PORTDbits.RD6 = 0;
  4359  0070CC  9C83               	bcf	3971,6,c	;volatile
  4360                           
  4361                           ;lcd_utilities.c: 101: PORTDbits.RD5 = 0;
  4362  0070CE  9A83               	bcf	3971,5,c	;volatile
  4363                           
  4364                           ;lcd_utilities.c: 103: for(i=0;i<100;i++)
  4365  0070D0  0E00               	movlw	0
  4366  0070D2  6E07               	movwf	lcd_init@i+1,c
  4367  0070D4  0E00               	movlw	0
  4368  0070D6  6E06               	movwf	lcd_init@i,c
  4369  0070D8                     l2218:
  4370  0070D8  BE07               	btfsc	lcd_init@i+1,7,c
  4371  0070DA  D006               	goto	l2222
  4372  0070DC  5007               	movf	lcd_init@i+1,w,c
  4373  0070DE  E10F               	bnz	l2226
  4374  0070E0  0E64               	movlw	100
  4375  0070E2  5C06               	subwf	lcd_init@i,w,c
  4376  0070E4  B0D8               	btfsc	status,0,c
  4377  0070E6  D00B               	goto	l2226
  4378  0070E8                     l2222:
  4379                           
  4380                           ;lcd_utilities.c: 104: _delay((unsigned long)((10)*(48000000/4000.0)));
  4381  0070E8  0E9C               	movlw	156
  4382  0070EA  6E05               	movwf	??_lcd_init& (0+255),c
  4383  0070EC  0ED7               	movlw	215
  4384  0070EE                     u1987:
  4385  0070EE  2EE8               	decfsz	wreg,f,c
  4386  0070F0  D7FE               	goto	u1987
  4387  0070F2  2E05               	decfsz	??_lcd_init& (0+255),f,c
  4388  0070F4  D7FC               	goto	u1987
  4389  0070F6  F000               	nop	
  4390  0070F8  4A06               	infsnz	lcd_init@i,f,c
  4391  0070FA  2A07               	incf	lcd_init@i+1,f,c
  4392  0070FC  D7ED               	goto	l2218
  4393  0070FE                     l2226:
  4394                           
  4395                           ;lcd_utilities.c: 117: lcd_write_cmd(0x33);
  4396  0070FE  0E33               	movlw	51
  4397  007100  EC29  F038         	call	_lcd_write_cmd
  4398                           
  4399                           ;lcd_utilities.c: 118: lcd_write_cmd(0x32);
  4400  007104  0E32               	movlw	50
  4401  007106  EC29  F038         	call	_lcd_write_cmd
  4402                           
  4403                           ;lcd_utilities.c: 120: lcd_write_cmd(0x28);
  4404  00710A  0E28               	movlw	40
  4405  00710C  EC29  F038         	call	_lcd_write_cmd
  4406                           
  4407                           ;lcd_utilities.c: 123: lcd_write_cmd(0x0E);
  4408  007110  0E0E               	movlw	14
  4409  007112  EC29  F038         	call	_lcd_write_cmd
  4410                           
  4411                           ;lcd_utilities.c: 126: lcd_write_cmd(0x06);
  4412  007116  0E06               	movlw	6
  4413  007118  EC29  F038         	call	_lcd_write_cmd
  4414                           
  4415                           ;lcd_utilities.c: 130: lcd_write_cmd(0x01);
  4416  00711C  0E01               	movlw	1
  4417  00711E  EC29  F038         	call	_lcd_write_cmd
  4418                           
  4419                           ;lcd_utilities.c: 132: _delay((unsigned long)((10)*(48000000/4000.0)));
  4420  007122  0E9C               	movlw	156
  4421  007124  6E05               	movwf	??_lcd_init& (0+255),c
  4422  007126  0ED7               	movlw	215
  4423  007128                     u1997:
  4424  007128  2EE8               	decfsz	wreg,f,c
  4425  00712A  D7FE               	goto	u1997
  4426  00712C  2E05               	decfsz	??_lcd_init& (0+255),f,c
  4427  00712E  D7FC               	goto	u1997
  4428  007130  F000               	nop	
  4429  007132  0012               	return		;funcret
  4430  007134                     __end_of_lcd_init:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           plusw1	equ	0xFE3
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           plusw2	equ	0xFDB
  4445                           fsr2h	equ	0xFDA
  4446                           fsr2l	equ	0xFD9
  4447                           status	equ	0xFD8
  4448                           
  4449 ;; *************** function _lcd_write_cmd *****************
  4450 ;; Defined at:
  4451 ;;		line 29 in file "lcd_utilities.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;  cmd             1    wreg     unsigned char 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  cmd             1    2[COMRAM] unsigned char 
  4456 ;;  temp2           1    3[COMRAM] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;		None               void
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0
  4467 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4468 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4469 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4470 ;;Total ram usage:        3 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    1
  4473 ;; This function calls:
  4474 ;;		_lcd_strobe
  4475 ;; This function is called by:
  4476 ;;		_lcd_init
  4477 ;;		_LockMotor
  4478 ;;		_PIR
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           	psect	text24
  4483  007052                     __ptext24:
  4484                           	opt stack 0
  4485  007052                     _lcd_write_cmd:
  4486                           	opt stack 28
  4487                           
  4488                           ;incstack = 0
  4489                           ;lcd_write_cmd@cmd stored from wreg
  4490  007052  6E03               	movwf	lcd_write_cmd@cmd,c
  4491                           
  4492                           ;lcd_utilities.c: 31: unsigned char temp2;
  4493                           ;lcd_utilities.c: 32: PORTDbits.RD6 = 0;
  4494  007054  9C83               	bcf	3971,6,c	;volatile
  4495                           
  4496                           ;lcd_utilities.c: 33: _delay((unsigned long)((4)*(48000000/4000.0)));
  4497  007056  0E3F               	movlw	63
  4498  007058  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4499  00705A  0E55               	movlw	85
  4500  00705C                     u2007:
  4501  00705C  2EE8               	decfsz	wreg,f,c
  4502  00705E  D7FE               	goto	u2007
  4503  007060  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4504  007062  D7FC               	goto	u2007
  4505  007064  F000               	nop	
  4506                           
  4507                           ;lcd_utilities.c: 34: temp2 = cmd;
  4508  007066  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  4509                           
  4510                           ;lcd_utilities.c: 35: temp2 = temp2 >> 4;
  4511  00706A  3804               	swapf	lcd_write_cmd@temp2,w,c
  4512  00706C  0B0F               	andlw	15
  4513  00706E  6E04               	movwf	lcd_write_cmd@temp2,c
  4514                           
  4515                           ;lcd_utilities.c: 36: PORTD = temp2 & 0x0F;
  4516  007070  5004               	movf	lcd_write_cmd@temp2,w,c
  4517  007072  0B0F               	andlw	15
  4518  007074  6E83               	movwf	3971,c	;volatile
  4519                           
  4520                           ;lcd_utilities.c: 38: _delay((unsigned long)((8)*(48000000/4000.0)));
  4521  007076  0E7D               	movlw	125
  4522  007078  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4523  00707A  0EAC               	movlw	172
  4524  00707C                     u2017:
  4525  00707C  2EE8               	decfsz	wreg,f,c
  4526  00707E  D7FE               	goto	u2017
  4527  007080  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4528  007082  D7FC               	goto	u2017
  4529                           
  4530                           ;lcd_utilities.c: 39: lcd_strobe();
  4531  007084  ECBD  F036         	call	_lcd_strobe	;wreg free
  4532                           
  4533                           ;lcd_utilities.c: 41: _delay((unsigned long)((8)*(48000000/4000.0)));
  4534  007088  0E7D               	movlw	125
  4535  00708A  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4536  00708C  0EAC               	movlw	172
  4537  00708E                     u2027:
  4538  00708E  2EE8               	decfsz	wreg,f,c
  4539  007090  D7FE               	goto	u2027
  4540  007092  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4541  007094  D7FC               	goto	u2027
  4542                           
  4543                           ;lcd_utilities.c: 43: temp2 = cmd;
  4544  007096  C003  F004         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  4545                           
  4546                           ;lcd_utilities.c: 44: PORTD = temp2 & 0x0F;
  4547  00709A  5004               	movf	lcd_write_cmd@temp2,w,c
  4548  00709C  0B0F               	andlw	15
  4549  00709E  6E83               	movwf	3971,c	;volatile
  4550                           
  4551                           ;lcd_utilities.c: 46: _delay((unsigned long)((8)*(48000000/4000.0)));
  4552  0070A0  0E7D               	movlw	125
  4553  0070A2  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4554  0070A4  0EAC               	movlw	172
  4555  0070A6                     u2037:
  4556  0070A6  2EE8               	decfsz	wreg,f,c
  4557  0070A8  D7FE               	goto	u2037
  4558  0070AA  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4559  0070AC  D7FC               	goto	u2037
  4560                           
  4561                           ;lcd_utilities.c: 47: lcd_strobe();
  4562  0070AE  ECBD  F036         	call	_lcd_strobe	;wreg free
  4563                           
  4564                           ;lcd_utilities.c: 48: _delay((unsigned long)((8)*(48000000/4000.0)));
  4565  0070B2  0E7D               	movlw	125
  4566  0070B4  6E02               	movwf	??_lcd_write_cmd& (0+255),c
  4567  0070B6  0EAC               	movlw	172
  4568  0070B8                     u2047:
  4569  0070B8  2EE8               	decfsz	wreg,f,c
  4570  0070BA  D7FE               	goto	u2047
  4571  0070BC  2E02               	decfsz	??_lcd_write_cmd& (0+255),f,c
  4572  0070BE  D7FC               	goto	u2047
  4573  0070C0  0012               	return		;funcret
  4574  0070C2                     __end_of_lcd_write_cmd:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           postinc0	equ	0xFEE
  4581                           wreg	equ	0xFE8
  4582                           postdec1	equ	0xFE5
  4583                           plusw1	equ	0xFE3
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           plusw2	equ	0xFDB
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _lcd_strobe *****************
  4594 ;; Defined at:
  4595 ;;		line 84 in file "lcd_utilities.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;		None               void
  4602 ;; Registers used:
  4603 ;;		wreg
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4609 ;;      Params:         0       0       0       0       0       0       0       0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4611 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4612 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4613 ;;Total ram usage:        1 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_lcd_write_cmd
  4619 ;;		_lcd_write_data
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text25
  4624  006D7A                     __ptext25:
  4625                           	opt stack 0
  4626  006D7A                     _lcd_strobe:
  4627                           	opt stack 28
  4628                           
  4629                           ;lcd_utilities.c: 86: PORTDbits.RD4 = 1;
  4630                           
  4631                           ;incstack = 0
  4632  006D7A  8883               	bsf	3971,4,c	;volatile
  4633                           
  4634                           ;lcd_utilities.c: 87: _delay((unsigned long)((8)*(48000000/4000.0)));
  4635  006D7C  0E7D               	movlw	125
  4636  006D7E  6E01               	movwf	??_lcd_strobe& (0+255),c
  4637  006D80  0EAC               	movlw	172
  4638  006D82                     u2057:
  4639  006D82  2EE8               	decfsz	wreg,f,c
  4640  006D84  D7FE               	goto	u2057
  4641  006D86  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  4642  006D88  D7FC               	goto	u2057
  4643                           
  4644                           ;lcd_utilities.c: 88: PORTDbits.RD4 = 0;
  4645  006D8A  9883               	bcf	3971,4,c	;volatile
  4646                           
  4647                           ;lcd_utilities.c: 89: _delay((unsigned long)((8)*(48000000/4000.0)));
  4648  006D8C  0E7D               	movlw	125
  4649  006D8E  6E01               	movwf	??_lcd_strobe& (0+255),c
  4650  006D90  0EAC               	movlw	172
  4651  006D92                     u2067:
  4652  006D92  2EE8               	decfsz	wreg,f,c
  4653  006D94  D7FE               	goto	u2067
  4654  006D96  2E01               	decfsz	??_lcd_strobe& (0+255),f,c
  4655  006D98  D7FC               	goto	u2067
  4656  006D9A  0012               	return		;funcret
  4657  006D9C                     __end_of_lcd_strobe:
  4658                           	opt stack 0
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           postinc0	equ	0xFEE
  4664                           wreg	equ	0xFE8
  4665                           postdec1	equ	0xFE5
  4666                           plusw1	equ	0xFE3
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _lcd_backlight_on *****************
  4677 ;; Defined at:
  4678 ;;		line 18 in file "lcd_utilities.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;		None
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		None
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0
  4693 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4695 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4696 ;;Total ram usage:        0 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_LockMotor
  4702 ;;		_UltraSound
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           	psect	text26
  4707  006D1E                     __ptext26:
  4708                           	opt stack 0
  4709  006D1E                     _lcd_backlight_on:
  4710                           	opt stack 29
  4711                           
  4712                           ;lcd_utilities.c: 19: PORTDbits.RD7 = 1;
  4713                           
  4714                           ;incstack = 0
  4715  006D1E  8E83               	bsf	3971,7,c	;volatile
  4716  006D20  0012               	return		;funcret
  4717  006D22                     __end_of_lcd_backlight_on:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           postdec1	equ	0xFE5
  4726                           plusw1	equ	0xFE3
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           plusw2	equ	0xFDB
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _getkey *****************
  4737 ;; Defined at:
  4738 ;;		line 17 in file "keypad_utilities.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  lookup         18    0[COMRAM] const unsigned char [18]
  4743 ;;  keycode         1   18[COMRAM] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      unsigned char 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4753 ;;      Params:         0       0       0       0       0       0       0       0       0
  4754 ;;      Locals:        19       0       0       0       0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4756 ;;      Totals:        19       0       0       0       0       0       0       0       0
  4757 ;;Total ram usage:       19 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_LockMotor
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text27
  4767  006E20                     __ptext27:
  4768                           	opt stack 0
  4769  006E20                     _getkey:
  4770                           	opt stack 29
  4771                           
  4772                           ;keypad_utilities.c: 19: const unsigned char lookup[] = "123F456E789DA0BC ";
  4773                           
  4774                           ;incstack = 0
  4775  006E20  0E05               	movlw	low getkey@F4444
  4776  006E22  6EF6               	movwf	tblptrl,c
  4777  006E24                     	if	0	;There is only one active tblptr byte
  4778  006E24                     	endif
  4779  006E24                     	if	0	;There are less than 3 active tblptr bytes
  4780  006E24                     	endif
  4781  006E24  EE20  F001         	lfsr	2,getkey@lookup
  4782  006E28  0E11               	movlw	17
  4783  006E2A                     u1700:
  4784  006E2A  0009               	tblrd		*+
  4785  006E2C  CFF5 FFDE          	movff	tablat,postinc2
  4786  006E30  06E8               	decf	wreg,f,c
  4787  006E32  E2FB               	bc	u1700
  4788  006E34                     l126:
  4789  006E34  AA81               	btfss	3969,5,c	;volatile
  4790  006E36  D7FE               	goto	l126
  4791                           
  4792                           ;keypad_utilities.c: 22: keycode=PORTB & 0x0F;
  4793  006E38  5081               	movf	3969,w,c	;volatile
  4794  006E3A  0B0F               	andlw	15
  4795  006E3C  6E13               	movwf	getkey@keycode,c
  4796  006E3E                     l129:
  4797  006E3E  BA81               	btfsc	3969,5,c	;volatile
  4798  006E40  D7FE               	goto	l129
  4799                           
  4800                           ;keypad_utilities.c: 25: return(lookup[keycode]);
  4801  006E42  5013               	movf	getkey@keycode,w,c
  4802  006E44  0D01               	mullw	1
  4803  006E46  0E01               	movlw	low getkey@lookup
  4804  006E48  24F3               	addwf	prodl,w,c
  4805  006E4A  6ED9               	movwf	fsr2l,c
  4806  006E4C  0E00               	movlw	high getkey@lookup
  4807  006E4E  20F4               	addwfc	prodh,w,c
  4808  006E50  6EDA               	movwf	fsr2h,c
  4809  006E52  50DF               	movf	indf2,w,c
  4810  006E54  0012               	return	
  4811  006E56                     __end_of_getkey:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           postinc0	equ	0xFEE
  4820                           wreg	equ	0xFE8
  4821                           postdec1	equ	0xFE5
  4822                           plusw1	equ	0xFE3
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           plusw2	equ	0xFDB
  4828                           fsr2h	equ	0xFDA
  4829                           fsr2l	equ	0xFD9
  4830                           status	equ	0xFD8
  4831                           
  4832 ;; *************** function _delay_ms *****************
  4833 ;; Defined at:
  4834 ;;		line 10 in file "delays_utilities.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  i               2    0[COMRAM] unsigned int 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  j               2    3[COMRAM] unsigned int 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;		None               void
  4841 ;; Registers used:
  4842 ;;		wreg, status,2, status,0
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4848 ;;      Params:         2       0       0       0       0       0       0       0       0
  4849 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4850 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4851 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4852 ;;Total ram usage:        5 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; This function calls:
  4855 ;;		Nothing
  4856 ;; This function is called by:
  4857 ;;		_LockMotor
  4858 ;;		_PIR
  4859 ;;		_UltraSound
  4860 ;;		_buzzer_but
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           	psect	text28
  4865  006DEC                     __ptext28:
  4866                           	opt stack 0
  4867  006DEC                     _delay_ms:
  4868                           	opt stack 29
  4869                           
  4870                           ;delays_utilities.c: 12: if(i!=0)
  4871                           
  4872                           ;incstack = 0
  4873  006DEC  5001               	movf	delay_ms@i,w,c
  4874  006DEE  1002               	iorwf	delay_ms@i+1,w,c
  4875  006DF0  B4D8               	btfsc	status,2,c
  4876  006DF2  0012               	return	
  4877                           
  4878                           ;delays_utilities.c: 13: for(j=0;j<i;j++)_delay((unsigned long)((1)*(48000000/4000.0)));
  4879  006DF4  0E00               	movlw	0
  4880  006DF6  6E05               	movwf	delay_ms@j+1,c
  4881  006DF8  0E00               	movlw	0
  4882  006DFA  6E04               	movwf	delay_ms@j,c
  4883  006DFC  D00A               	goto	l70
  4884  006DFE                     l2170:
  4885  006DFE  0E10               	movlw	16
  4886  006E00  6E03               	movwf	??_delay_ms& (0+255),c
  4887  006E02  0E94               	movlw	148
  4888  006E04                     u2077:
  4889  006E04  2EE8               	decfsz	wreg,f,c
  4890  006E06  D7FE               	goto	u2077
  4891  006E08  2E03               	decfsz	??_delay_ms& (0+255),f,c
  4892  006E0A  D7FC               	goto	u2077
  4893  006E0C  D000               	nop2	
  4894  006E0E  4A04               	infsnz	delay_ms@j,f,c
  4895  006E10  2A05               	incf	delay_ms@j+1,f,c
  4896  006E12                     l70:
  4897  006E12  5001               	movf	delay_ms@i,w,c
  4898  006E14  5C04               	subwf	delay_ms@j,w,c
  4899  006E16  5002               	movf	delay_ms@i+1,w,c
  4900  006E18  5805               	subwfb	delay_ms@j+1,w,c
  4901  006E1A  B0D8               	btfsc	status,0,c
  4902  006E1C  0012               	return	
  4903  006E1E  D7EF               	goto	l2170
  4904  006E20                     __end_of_delay_ms:
  4905                           	opt stack 0
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           postinc0	equ	0xFEE
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           plusw1	equ	0xFE3
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           plusw2	equ	0xFDB
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _UART_Write *****************
  4926 ;; Defined at:
  4927 ;;		line 36 in file "LockMotor.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  data            1    wreg     unsigned char 
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;  data            1    0[COMRAM] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;		None               void
  4934 ;; Registers used:
  4935 ;;		wreg
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0
  4942 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4944 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4945 ;;Total ram usage:        1 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_LockMotor
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text29
  4955  006D3C                     __ptext29:
  4956                           	opt stack 0
  4957  006D3C                     _UART_Write:
  4958                           	opt stack 29
  4959                           
  4960                           ;incstack = 0
  4961                           ;UART_Write@data stored from wreg
  4962  006D3C  6E01               	movwf	UART_Write@data,c
  4963  006D3E                     l188:
  4964  006D3E  A2AC               	btfss	4012,1,c	;volatile
  4965  006D40  D7FE               	goto	l188
  4966                           
  4967                           ;LockMotor.c: 38: TXREG = data;
  4968  006D42  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  4969  006D46  0012               	return		;funcret
  4970  006D48                     __end_of_UART_Write:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           postdec1	equ	0xFE5
  4981                           plusw1	equ	0xFE3
  4982                           fsr1l	equ	0xFE1
  4983                           indf2	equ	0xFDF
  4984                           postinc2	equ	0xFDE
  4985                           postdec2	equ	0xFDD
  4986                           plusw2	equ	0xFDB
  4987                           fsr2h	equ	0xFDA
  4988                           fsr2l	equ	0xFD9
  4989                           status	equ	0xFD8
  4990                           
  4991 ;; *************** function _UART_Init *****************
  4992 ;; Defined at:
  4993 ;;		line 24 in file "LockMotor.c"
  4994 ;; Parameters:    Size  Location     Type
  4995 ;;		None
  4996 ;; Auto vars:     Size  Location     Type
  4997 ;;		None
  4998 ;; Return value:  Size  Location     Type
  4999 ;;		None               void
  5000 ;; Registers used:
  5001 ;;		wreg, status,2
  5002 ;; Tracked objects:
  5003 ;;		On entry : 0/0
  5004 ;;		On exit  : 0/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5007 ;;      Params:         0       0       0       0       0       0       0       0       0
  5008 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5009 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5010 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5011 ;;Total ram usage:        0 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; This function calls:
  5014 ;;		Nothing
  5015 ;; This function is called by:
  5016 ;;		_LockMotor
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text30
  5021  006D5E                     __ptext30:
  5022                           	opt stack 0
  5023  006D5E                     _UART_Init:
  5024                           	opt stack 29
  5025                           
  5026                           ;LockMotor.c: 25: TRISCbits.TRISC6 = 0;
  5027                           
  5028                           ;incstack = 0
  5029  006D5E  9C94               	bcf	3988,6,c	;volatile
  5030                           
  5031                           ;LockMotor.c: 26: TRISCbits.TRISC7 = 1;
  5032  006D60  8E94               	bsf	3988,7,c	;volatile
  5033                           
  5034                           ;LockMotor.c: 28: TXSTA = 0x24;
  5035  006D62  0E24               	movlw	36
  5036  006D64  6EAC               	movwf	4012,c	;volatile
  5037                           
  5038                           ;LockMotor.c: 29: RCSTA = 0x90;
  5039  006D66  0E90               	movlw	144
  5040  006D68  6EAB               	movwf	4011,c	;volatile
  5041                           
  5042                           ;LockMotor.c: 30: BAUDCON = 0x08;
  5043  006D6A  0E08               	movlw	8
  5044  006D6C  6EB8               	movwf	4024,c	;volatile
  5045                           
  5046                           ;LockMotor.c: 31: SPBRG = 77;
  5047  006D6E  0E4D               	movlw	77
  5048  006D70  6EAF               	movwf	4015,c	;volatile
  5049                           
  5050                           ;LockMotor.c: 32: SPBRGH = 0;
  5051  006D72  0E00               	movlw	0
  5052  006D74  6EB0               	movwf	4016,c	;volatile
  5053                           
  5054                           ;LockMotor.c: 33: PIR1bits.TXIF = 0;
  5055  006D76  989E               	bcf	3998,4,c	;volatile
  5056  006D78  0012               	return		;funcret
  5057  006D7A                     __end_of_UART_Init:
  5058                           	opt stack 0
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           prodh	equ	0xFF4
  5064                           prodl	equ	0xFF3
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           postdec1	equ	0xFE5
  5068                           plusw1	equ	0xFE3
  5069                           fsr1l	equ	0xFE1
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           plusw2	equ	0xFDB
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           plusw1	equ	0xFE3
  5087                           fsr1l	equ	0xFE1
  5088                           indf2	equ	0xFDF
  5089                           postinc2	equ	0xFDE
  5090                           postdec2	equ	0xFDD
  5091                           plusw2	equ	0xFDB
  5092                           fsr2h	equ	0xFDA
  5093                           fsr2l	equ	0xFD9
  5094                           status	equ	0xFD8
  5095                           
  5096                           	psect	rparam
  5097  0000                     tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           plusw1	equ	0xFE3
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           plusw2	equ	0xFDB
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    18
    Data        65
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     87     142
    BANK1           256      0      21
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _SetDutyCycleTo->___fttol
    _round->___ftneg
    _trunc->___altoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___lltoft->___ftpack
    _doorSetDutyCycleTo->___fttol
    ___fttol->___ftmul
    ___ftmul->___ftadd
    ___ftdiv->___lltoft
    ___ftadd->___ftdiv
    ___awtoft->___ftpack
    _lcd_write_data->_lcd_strobe
    _lcd_init->_lcd_write_cmd
    _lcd_write_cmd->_lcd_strobe

Critical Paths under _main in BANK0

    _main->_LockMotor
    _LockMotor->_motordoor_open
    _LockMotor->_motorlock_unlock
    _motorlock_unlock->_setPeriodTo
    _motordoor_open->_setPeriodTo
    _setPeriodTo->_round

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   78090
                          _LockMotor
 ---------------------------------------------------------------------------------
 (1) _LockMotor                                           55    55      0   78090
                                             33 BANK0     54    54      0
                          _UART_Init
                         _UART_Write
                           _delay_ms
                             _getkey
                   _lcd_backlight_on
                           _lcd_init
                      _lcd_write_cmd
                     _lcd_write_data
                     _motordoor_open
                   _motorlock_unlock
 ---------------------------------------------------------------------------------
 (2) _motorlock_unlock                                     2     2      0   38342
                                             31 BANK0      2     2      0
                           _PWM_Init
                     _SetDutyCycleTo
                              _delay
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _SetDutyCycleTo                                      12     7      5   13717
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _motordoor_open                                       2     2      0   38342
                                             31 BANK0      2     2      0
                       _PWMdoor_Init
                              _delay
                 _doorSetDutyCycleTo
                        _setPeriodTo
 ---------------------------------------------------------------------------------
 (3) _setPeriodTo                                         25    21      4   23976
                                              6 BANK0     25    21      4
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3    7666
                                              0 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                8     5      3    3549
                                             84 COMRAM     8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     336
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2350
                                             74 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     109
                                             92 COMRAM     3     0      3
                            ___ftadd (ARG)
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2345
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _doorSetDutyCycleTo                                  12     7      5   13717
                                             74 COMRAM    12     7      5
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4     572
                                             59 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3344
                                             44 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    2914
                                             17 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3832
                                             32 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2431
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _delay                                                6     4      2     604
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _PWMdoor_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data                                       3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             3     3      0     159
                                              4 COMRAM     3     3      0
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_write_cmd                                        3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (3) _lcd_strobe                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_backlight_on                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getkey                                              19    19      0      48
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     580
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LockMotor
     _UART_Init
     _UART_Write
     _delay_ms
     _getkey
     _lcd_backlight_on
     _lcd_init
       _lcd_write_cmd
         _lcd_strobe
     _lcd_write_cmd
       _lcd_strobe
     _lcd_write_data
       _lcd_strobe
     _motordoor_open
       _PWMdoor_Init
       _delay
       _doorSetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)
     _motorlock_unlock
       _PWM_Init
       _SetDutyCycleTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
       _delay
       _setPeriodTo
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
         ___lltoft
           ___ftpack
         _round
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftneg
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
               _frexp (ARG)
           _trunc
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
             _frexp (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      15       7        8.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      20        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Feb 06 16:53:09 2024

                   ___altoft@exp 0053                                _c 00E7  
                  ___altoft@sign 0054                               l70 6E12  
                             _p1 00EA                               _p2 00EB  
                             _p3 00EC                               _p4 00ED  
                   ___ftadd@exp1 002C                     ___ftadd@exp2 002B  
                   ___ftadd@sign 002A                              l126 6E34  
                            l129 6E3E                              l188 6D3E  
                            l525 7456                              l605 6DB2  
                            l552 7946                              l563 79F6  
                            l572 7A12                              l548 791C  
                            l583 76BE                              _PR2 000FCB  
                            _key 00E8                              prod 000FF3  
                            wreg 000FE8                     __CFG_FOSC$HS 000000  
                   __CFG_LVP$OFF 000000                      getkey@F4444 1005  
                   ___ftdiv@cntr 001B                     ___ftdiv@sign 0020  
                   __CFG_WDT$OFF 000000                             l2002 7772  
                           l2012 779A                             l2100 7DA0  
                           l2006 7782                             l2032 6EA0  
                           l2016 77AA                             l2040 6F30  
                           l2112 7E78                             l2104 7DE8  
                           l2116 7EC0                             l2108 7E30  
                           l2222 70E8                             l2038 6F24  
                           l2152 6E60                             l2320 7B7C  
                           l2170 6DFE                             l2226 70FE  
                           l2218 70D8                             l2162 6E7A  
                           l2154 6E68                             l2164 6E7E  
                           l2092 7D10                             l2324 7B98  
                           l2086 7CC0                             l1720 73F0  
                           l1800 78B0                             l2096 7D58  
                           l2352 7C38                             l1730 744C  
                           l1722 740E                             l1714 73D8  
                           l2338 7BEC                             l2290 7AD6  
                           l2362 6D36                             l1804 78C6  
                           l2348 7C1C                             l2356 7C62  
                           l1726 7424                             l1718 73E6  
                           l1814 71C8                             l1910 7268  
                           l2286 7ABA                             l1728 7442  
                           l1832 792A                             l1754 7156  
                           l1906 724E                             l1860 79A6  
                           l1756 7162                             l1862 79B0  
                           l1854 7984                             l1838 7954  
                           l1942 765A                             l1790 7886  
                           l1880 7A2E                             l1872 79E4  
                           l1864 79BA                             l1936 7632  
                           l1768 7810                             l1890 7A5E  
                           l1874 79EE                             l1866 79C2  
                           l1962 7698                             l1786 7876  
                           l1796 789E                             l1982 7718  
                           l1798 78AA                             l1988 7740  
                           u1100 782E                             u1105 7826  
                           u2007 705C                             u2017 707C  
                           u1081 77F4                             u1170 71F0  
                           u1410 725A                             u2027 708E  
                           u2037 70A6                             u1181 78E8  
                           u1421 761A                             u2047 70B8  
                           u1191 78FC                             u2057 6D82  
                           u1441 7642                             u1178 71F2  
                           u2067 6D92                             u1700 6E2A  
                           u2077 6E04                             u1471 7700  
                           u1801 7B68                             u1491 7728  
                           u1821 7C08                             u1741 7AA6  
                           u1840 7C78                             u1917 733E  
                           u1927 735E                             u1937 736E  
               ??_motordoor_open 0060                             u1947 7380  
                           u1957 7398                             u1967 73A8  
                           u1977 73BC                             u1987 70EE  
                           u1997 7128                             _TMR2 000FCC  
                           _TRMT 007D61         SetDutyCycleTo@Duty_cycle 004B  
         __end_of_lcd_write_data 73C8                             _main 6D32  
                   ___ftpack@arg 0001                     ___ftpack@exp 0004  
                           fsr2h 000FDA                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                           prodl 000FF3                   ?_lcd_write_cmd 0001  
                           start 1000          _doorSetDutyCycleTo$1378 0052  
                   ___ftmul@cntr 003A                     ___param_bank 000010  
                   ___ftmul@sign 003B                       LockMotor@i 00B1  
    __size_of_doorSetDutyCycleTo 00CA                     ___fttol@exp1 004A  
                   ___fttol@lval 0046                            ?_main 0001  
                __end_of___ftadd 7A84                  __end_of___ftdiv 76F0  
                __end_of___ftneg 6DC0                  __end_of___ftmul 77E4  
                __end_of___fttol 78D8                            _T2CON 000FCA  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _PORTB 000F81                            _PORTD 000F83  
                          _TRISC 000F94                            _TRISD 000F95  
               lcd_write_cmd@cmd 0003                            _TXREG 000FAD  
                          _TXSTA 000FAC                   LockMotor@F4632 00CC  
                 LockMotor@F4637 00D9                   LockMotor@F4629 00B7  
                   ___lltoft@exp 0011                      ?_UART_Write 0001  
             __size_of_UART_Init 001C            __size_of_PWMdoor_Init 0008  
     setPeriodTo@clockSelectBits 0076                    ___awtoft@sign 000C  
                          _delay 6E56                            _frexp 71AC  
                          _errno 00E3                    ___ftpack@sign 0005  
                          _round 72A6                            _trunc 7224  
                          _wrong 00E5                   LockMotor@i_534 00B3  
                 LockMotor@i_537 00B5                 __end_of_PWM_Init 6D32  
                          tablat 000FF5                            plusw1 000FE3  
                          plusw2 000FDB                  ?_lcd_write_data 0001  
                          status 000FD8                     getkey@lookup 0001  
                __initialization 6EC4                     __end_of_main 6D3C  
                    LockMotor@p1 00AD                      LockMotor@p2 00AE  
                    LockMotor@p3 00AF                      LockMotor@p4 00B0  
       __end_of_lcd_backlight_on 6D22                     _PWMdoor_Init 6D22  
                         ??_main 0060                    ___fttol@sign1 0045  
                  __activetblptr 000001                     ?_setPeriodTo 0066  
                         ?_delay 0001                           _ADCON1 000FC1  
                         ?_frexp 0001                 __end_of___altoft 71AC  
                         _CCPR1L 000FBE                           _CCPR2L 000FBB  
               __end_of___awtoft 6EC4                 __end_of___ftpack 7476  
                         ?_round 0060                           ?_trunc 0055  
               __end_of___lltoft 6F7A                           _OSCCON 000FD3  
                         _SPBRGH 000FB0                  ??_lcd_write_cmd 0002  
               ??_SetDutyCycleTo 0050               __size_of_LockMotor 01FC  
               __end_of_delay_ms 6E20                 __end_of_lcd_init 7134  
              __end_of_UART_Init 6D7A              __size_of_UART_Write 000C  
                      ??___ftadd 0027                        ??___ftdiv 0018  
                      ??___ftneg 0060                        ??___ftmul 0033  
                      ??___fttol 0040                           _getkey 6E20  
                         delay@i 0003                           delay@j 0005  
                         clear_0 6ECA            ___ftmul@f3_as_product 0037  
                   __mediumconst 0000                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         round@f 0063                           round@x 0060  
                         trunc@i 0058                           trunc@x 0055  
              ?_motorlock_unlock 0001                       __accesstop 0060  
        __end_of__initialization 6F10                       ___altoft@c 004B  
                __CFG_PBADEN$OFF 000000                    getkey@keycode 0013  
                     ___ftadd@f1 0021                       ___ftadd@f2 0024  
             ??_motorlock_unlock 0060                    ___rparam_used 000001  
                     ___ftdiv@f1 0012                       ___ftdiv@f2 0015  
                     ___ftdiv@f3 001C                       ___ftneg@f1 005D  
                     ___awtoft@c 0009                       ___ftmul@f1 002D  
                     ___ftmul@f2 0030                       ___fttol@f1 003C  
                 __pcstackCOMRAM 0001           setPeriodTo@_resolution 007B  
                   __pidataBANK0 6DC0                     __pidataBANK1 6D49  
                  __end_of_delay 6E8C                       ___lltoft@c 0009  
                  __end_of_frexp 7224                    __end_of_round 7334  
                  __end_of_trunc 72A6                        ?_PWM_Init 0001  
              __end_of_LockMotor 7C80                          ??_delay 0003  
                        ??_frexp 0006                          ??_round 0060  
                        ??_trunc 0058                       __pbssBANK0 00E3  
                        ?_getkey 0001                          _CCP1CON 000FBD  
                        _CCP2CON 000FBA                        ?___altoft 004B  
                        _BAUDCON 000FB8                        ?___awtoft 0009  
                      ?___ftpack 0001                        ?___lltoft 0009  
                     ??_PWM_Init 0001                        ?_delay_ms 0001  
                   ??_UART_Write 0001                 ??_lcd_write_data 0002  
                     _lcd_strobe 6D7A                        ?_lcd_init 0001  
           __size_of_setPeriodTo 0380               lcd_write_data@data 0003  
             lcd_write_cmd@temp2 0004           motorlock_unlock@Period 007F  
                        __Hparam 0000       __end_of_doorSetDutyCycleTo 7540  
                        __Lparam 0000                          ___ftadd 78D8  
                        ___ftdiv 760A                          ___ftneg 6D9C  
             __end_of_UART_Write 6D48                          ___ftmul 76F0  
                        ___fttol 77E4                     __psmallconst 1004  
                     ??___altoft 004F                  __size_of_getkey 0036  
              ?_lcd_backlight_on 0001                          __pcinit 6EC4  
                     ??___awtoft 000C                       ??___ftpack 0006  
                        __ramtop 0800                       ??___lltoft 000D  
                        __ptext0 6D32                          __ptext1 7A84  
                        __ptext2 6FE6                          __ptext3 7540  
                        __ptext4 6D2A                          __ptext5 6F7A  
                        __ptext6 7C80                          __ptext7 72A6  
                        __ptext8 7224                          __ptext9 71AC  
             ??_lcd_backlight_on 0001                        _T2CONbits 000FCA  
                     ??_delay_ms 0003                          _outchar 00E9  
   setPeriodTo@TimerPrescaleBits 006E         doorSetDutyCycleTo@Period 004E  
                     ??_lcd_init 0005             end_of_initialization 6F10  
        __size_of_motordoor_open 006C                          postdec1 000FE5  
                        postdec2 000FDD    setPeriodTo@TimerPrescaleValue 0070  
                        postinc0 000FEE                          postinc2 000FDE  
                      _UART_Init 6D5E                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _PORTCbits 000F82  
                      _PORTDbits 000F83                 LockMotor@openMsg 0096  
                 UART_Write@data 0001                        _TRISAbits 000F92  
                      _TRISCbits 000F94             SetDutyCycleTo@Period 004E  
                    ?_lcd_strobe 0001                      ___ftdiv@exp 001F  
          __end_of_lcd_write_cmd 70C2                      ___ftmul@exp 0036  
      __size_of_motorlock_unlock 006C                setPeriodTo@period 0078  
                     ?_UART_Init 0001                   __end_of_getkey 6E56  
              __size_of_PWM_Init 0008              start_initialization 6EC4  
                      _LockMotor 7A84                       frexp@value 0001  
    SetDutyCycleTo@PWM10BitValue 0055                      __pdataBANK0 00B7  
                    __pdataBANK1 0100                         ??_getkey 0001  
            __size_of_lcd_strobe 0022          __size_of_SetDutyCycleTo 00CA  
              __size_of___altoft 0078                __size_of___awtoft 0038  
              __size_of___ftpack 00AE                __size_of___lltoft 005C  
                  __pcstackBANK0 0060                       ?_LockMotor 0001  
              __size_of_delay_ms 0034                __size_of_lcd_init 0072  
                 _motordoor_open 6F7A                         ?___ftadd 0021  
                       ?___ftdiv 0012                         ?___ftneg 005D  
                       ?___ftmul 002D                         ?___fttol 003C  
                    ??_UART_Init 0001                    ?_PWMdoor_Init 0001  
   doorSetDutyCycleTo@Duty_cycle 004B               _doorSetDutyCycleTo 7476  
                    __smallconst 1004                    ??_setPeriodTo 006A  
                 __size_of_delay 0036              ?_doorSetDutyCycleTo 004B  
                 __size_of_frexp 0078        __size_of_lcd_backlight_on 0004  
                 __size_of_round 008E                   __size_of_trunc 0082  
                      delay_ms@i 0001                        delay_ms@j 0004  
         __end_of_motordoor_open 6FE6                         _PIR1bits 000F9E  
           ??_doorSetDutyCycleTo 0050  doorSetDutyCycleTo@PWM10BitValue 0055  
               _motorlock_unlock 6FE6                   ??_PWMdoor_Init 0001  
                       _PWM_Init 6D2A                        lcd_init@i 0006  
            lcd_write_data@temp1 0004                      ??_LockMotor 0060  
                   ??_lcd_strobe 0001                        copy_data0 6EE4  
                      copy_data1 6F04              __end_of_setPeriodTo 8000  
               _setPeriodTo$1376 006B                         _Message1 0100  
                      frexp@eptr 0004                  ?_motordoor_open 0001  
        __size_of_lcd_write_data 0094                         __Hrparam 0000  
                       __Lrparam 0000                     __Lsmallconst 1004  
               __size_of___ftadd 01AC                   _SetDutyCycleTo 7540  
               __size_of___ftdiv 00E6                 __size_of___ftneg 0024  
                       ___altoft 7134                 __size_of___ftmul 00F4  
               __size_of___fttol 00F4               __end_of_lcd_strobe 6D9C  
                       ___awtoft 6E8C                         ___ftpack 73C8  
                       ___lltoft 6F1E                         _delay_ms 6DEC  
                       __ptext10 7134                         __ptext11 6D9C  
                       __ptext20 6E56                         __ptext12 6F1E  
                       __ptext21 6D22                         __ptext13 7476  
                       __ptext30 6D5E                         __ptext22 7334  
                       __ptext14 77E4                         __ptext23 70C2  
                       __ptext15 76F0                         __ptext24 7052  
                       __ptext16 760A                         __ptext25 6D7A  
                       __ptext17 78D8                         __ptext26 6D1E  
                       __ptext18 6E8C                         __ptext27 6E20  
                       __ptext19 73C8                         __ptext28 6DEC  
                       __ptext29 6D3C                         _lcd_init 70C2  
                     trunc@expon 005B                    __size_of_main 000A  
                       delay@val 0001           __end_of_SetDutyCycleTo 760A  
                setPeriodTo@FOSC 0072                  setPeriodTo@FPWM 0066  
         __size_of_lcd_write_cmd 0070                      _setPeriodTo 7C80  
              LockMotor@Message1 0081                 _lcd_backlight_on 6D1E  
           __end_of_PWMdoor_Init 6D2A              __end_ofgetkey@F4444 1017  
                ?_SetDutyCycleTo 004B             motordoor_open@Period 007F  
            _SetDutyCycleTo$1377 0052                       _UART_Write 6D3C  
              LockMotor@errorMsg 00A3         __end_of_motorlock_unlock 7052  
                 _lcd_write_data 7334                    _lcd_write_cmd 7052  
